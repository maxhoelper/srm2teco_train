import org.junit.Test;
import static org.junit.Assert.*;

public class HumanEval_57_monotonicTest {

    @Test
    public void test_monotonic_Problem_0_a77678ae_a790_43bd_b8fb_fa00a6124936() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bfcff9f0_0d21_4402_af88_fa4ea3f9a78b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_90cf6754_6402_4df4_8280_1a5945e38e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_76075cc7_97b4_4227_a992_043d3277fbaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5e0521c3_1ceb_4dae_8922_84d5f762607e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_da9051db_99e6_4b72_b877_63cc38e66950() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4b36cfce_2bf0_46a9_9e42_ded60584e193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f2e2bb16_4a99_431a_9d9f_684c9006a3ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_da839160_a716_438e_98b9_74087f427bed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_92744e7e_c3e2_414d_b930_2d0d765ac789() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0eb6165f_3f9e_4c5f_9a22_b6504446f5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d16910d0_fe53_4907_8be3_c2764872ad70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5f4e1fa8_6723_4713_a258_71a4d4bdeccb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c29e8ca6_1731_4c05_8780_194287bf2735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_8956b178_bf58_4406_a81e_e80c907655dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_17157a1b_a13f_41c9_aa6b_965c05137bd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2a1c767b_cfcf_493d_8bd7_c0caafb2d1de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1fb108c4_d8de_47a5_8858_6499eea4f34e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_80f245bd_538e_4a11_aa4f_c6dff001da8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c35091d7_125b_4684_a002_a44c9470541b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f1fb57c2_bf89_4651_8957_a0100a5f746a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_eb58debe_0c97_4d4a_af72_5028b4cccef3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_373054b4_59d4_45e7_ab31_4282cbad3770() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c75d976e_5def_435c_8e3f_264853f81a3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e8cd0df8_dda9_407b_8708_92baedc47a3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_df5b9228_2696_4e83_a8d6_4ac73fd9f293() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_33895557_3680_4c91_95ca_7cfe4accf8fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7aee86fe_bc37_4d55_b027_c7b748e3ac74() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_15aba3b8_faf7_4d1d_9490_b70b291af662() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e4a779bb_53b0_4792_94c7_dabea65d6c7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f4f79686_df17_4539_bb22_c4f71cfbdd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7aee86fe_bc37_4d55_b027_c7b748e3ac74() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_844acbbe_17c1_47cc_be1c_c9d2a43bd9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1c9b4fc2_c722_46d8_9f90_fe9c263508d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_caaf88b6_5705_427e_9eab_a51158e981b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f3801894_494c_4cf3_b4ed_18ef7fbce130() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b464ff5c_08bb_44aa_a15f_2b5f2229cc23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9123309f_2b1f_44e1_a3b8_b901103ff8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f39b036f_cab2_4952_ad23_41a045e84eb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5cda23af_36b1_4597_aced_7e0e514b43a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_619c2930_9f66_4e7f_802f_9485975be402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b6643769_fd22_4144_9d7c_f2590a568f09() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6e2fb2e1_2f28_4a10_90f1_93e87bc17f59() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ae8d7ceb_394e_4552_a3b8_894ca5c42846() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_fb7eb574_281c_4e4e_965d_72a89b0a9306() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_54181e4c_bd59_474a_8bab_a812bb9a5280() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c30aa0e0_3cb0_4cff_b1e9_0221d6cdf9a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_92744e7e_c3e2_414d_b930_2d0d765ac789() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1da39b39_46f9_42f6_b518_de5441c393ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_135a55cd_3659_4de7_bf7b_a477461f0f11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f9b4128f_623c_43e7_a54c_7436bc7c9ed0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6c5faae5_83a5_4cd4_a8d1_518abaa7ebf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_80b75226_e260_4658_8f10_245237a4ad1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b69e63d5_fd8d_4d2c_aa93_b83b622069a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_0d06e089_cfcb_4146_808d_381509d71a82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3ee170eb_1b3d_4115_83d4_49b504e91229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bfd55b99_f54a_442f_99ed_b97875dcaf7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_02b2c1b2_5636_4b6a_ba2e_4deb0cff6cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e1022359_5a75_4059_b56a_d0e56c6c0624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c153690c_220c_4b24_91fe_9146fe019f1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_186bedb0_34cb_40cb_8f06_221f1c02cc63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_70201347_07a1_4e52_8ee8_92da805ced88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_83e55aae_48a2_4960_a1fe_3f31ef6ce15c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e85619d8_16cf_4e07_95d8_9009216a92d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ee97a465_090d_48e8_917e_e08b4ca2485a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c64d6cc5_dfba_408f_9d79_56addd2b5667() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7b7f1feb_6142_40ca_9c4d_348de7690eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d6ee4fe1_639f_48f6_a4fa_fda54f6aa5ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_72aeec1c_931c_4eee_9dda_2ad8094c3947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0d1e376d_5ad4_43d7_9e0c_843f05532ba8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_1397a06e_d440_4d2a_9763_251174b880cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4f750753_a2f8_4503_9272_caca33cb3835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8e804c5c_4e5d_4364_9ce6_7cff69c2b8d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2e685dfa_8307_4f56_b5a2_0d2fb46f654f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_59f145b7_68ab_4938_b2b8_307a43e3ce41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8ac97d62_10ef_48e6_b151_60ae21058c94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0eb6165f_3f9e_4c5f_9a22_b6504446f5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1fb108c4_d8de_47a5_8858_6499eea4f34e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d273a64e_0e83_41c2_98d0_dfdc2ad8bab8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_23cc3949_d600_4010_9257_8e0601397137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2f87392d_edee_46ba_a65e_f365bc303b92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ffb6fda3_2d5a_46b8_9838_3c544f92ef9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0ed7e1ce_d7bb_481a_8305_85e2ad5eb766() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_06554558_90e9_4fd6_bb4d_c1caf305b2dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c23a30a8_4b9d_4cb3_b89d_9042cfa17482() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0ab61eda_f597_4958_8a73_f544372185a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_db4bc96d_a230_4bf7_8dbe_19ab09c13579() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c451a034_a863_421d_9e83_2ce4678e167e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_19673009_e08d_4c48_8d17_85077959f944() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_65c65ee3_fb68_4e84_a28e_8789ff13e3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f5e7dfd1_30df_4e97_a6bf_b2175368a5c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4d84cb57_23f4_4fd5_904e_2d9cc1bf1c77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_1edf4c22_4659_4acf_97aa_92d8c74fc401() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_d7c34757_8473_44d0_a34a_f37cfdfa3249() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3c89a5f6_da79_4175_9b0e_95f78c683f94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_15385204_0ee7_44a5_8a10_17989398c9fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b5df5cbf_092c_49dc_aa19_7d01a8f367ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ca2b5c9c_43e0_4eb0_afe8_d1868508fb83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_095c31c0_2037_4562_a2f2_e2ed5aa038e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e1f96444_b43a_4bda_b27b_de2b15402ed2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_88402215_6f23_4d68_8de7_d13283a303dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_9ed3c1f3_43a7_4794_80d3_d1bf1a4e9ade() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d9b86c6a_b186_401d_88ac_5646e300aa05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9135a7a4_d524_4af6_8a1e_d92455eb4a76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1202bb40_7fc4_4c9e_ad42_f53d735c88ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_27e5a8e7_ce52_4b47_a536_2cd363b7b4e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_838acb3a_0aaf_4d0b_8743_e64613f327cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_15166ec6_8047_4c78_9d7f_2afda2687e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5f11e901_f42f_43d3_883d_34cb7f4ce9f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5b73bc30_75ff_4abb_84f9_15d5cbb87cc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4a04f9ee_75c4_4b64_b56d_9b7e1002498c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9c218489_d418_4473_b2c5_73e2fad8abb8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6439eea6_3e10_4fb1_88bd_b536b7029012() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_155fd60a_fa44_486f_acb2_3f0fa86927b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_183075f1_61b3_4d78_b46d_0aa53156a193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_47cae136_54d2_4361_8ac1_ab1a834e021d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7475da91_311a_4edd_b72b_c13836bcf6d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d3eae0eb_2f96_4eee_bdda_d6415912aebc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4fed3a50_e8e4_4545_95b2_223bde220038() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_411587a2_aa72_4864_a871_312abd9e3cba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_18aaebe0_36ab_4093_880a_be0a748ad44a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_8b87fe58_f430_4a0c_b1cd_de5c19751dd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3c425c26_7a3a_4433_ac52_01a9dac329f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_bf56ed06_3dd0_4dfe_80d8_33bd5b397ab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_69a157a0_054f_4246_81db_16a8bf7fb65d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6bfd7e19_5fa2_40b6_b628_3e090b7291f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_420c4423_eba6_481f_a57a_033a44079ce3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4d0df127_5ce9_4266_9462_01f809836673() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c19a0687_9615_4385_a686_5d52bb859bd2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_16abab32_6e31_44c9_b3e1_b8d404772e50() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cc0bca4a_f917_41ec_889a_abe3cc642961() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1aae327e_f8e8_4689_9a7b_4dfc24f2060b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_67324c69_fefb_4852_96ec_87f2fafb1767() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bdf5c0a2_c3a6_44d4_adff_47d9bcf01858() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9e835908_49d1_442d_ab49_72330617fd7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f7240e90_e5d0_4d87_b2c8_af39b6905312() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7475da91_311a_4edd_b72b_c13836bcf6d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_feaf1a9a_487b_444b_95fa_58ecf7988e96() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f8dab4a4_4413_4629_b71c_3c17f03e127d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_adf347f4_c3e7_48d9_b104_7bf6d8446f53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_49f84c84_03aa_4765_b838_641bb9a9ad4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f5e7dfd1_30df_4e97_a6bf_b2175368a5c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e3ff4543_1ef8_4502_8f34_3253c7b467c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a10f374d_aeaa_4bae_9885_2bbdb8d9d168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_006564b7_92fe_45b3_9a12_89b513218ad8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bdf5c0a2_c3a6_44d4_adff_47d9bcf01858() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_78631fc2_e125_4026_87f6_a4900eec2d35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_956eaebc_77ff_42a5_a59b_6631b95feec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6162a2ad_fc6b_4f37_878d_784d5a5c9f28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_95a01bd5_ecbe_41a6_bd5b_6714dd84edc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a6d1b07c_7cf7_494a_84ad_a82ebae78e4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6b100c66_d328_45b8_99bb_50c341be8b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_01e25675_51fe_47fd_875d_e96271c36e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_06938022_06b9_4be0_9470_c454eb5b3d7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b7196086_2e96_4916_a5b3_d8ff5e293e86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d93a6b7e_025f_4c89_b301_8b5c79387a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f45b0b22_247e_4918_9216_2c4dfaab5019() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_70bbaaa4_6c60_4eba_a5db_14b81e319baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b39fba80_94ec_457f_b23e_3d72322f81c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_312977d7_73af_441e_bd3a_c5b9c03b2995() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_43698697_0a05_4e0d_bcfb_cc6457f02f62() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a1aa45a6_90b9_4513_8e4f_c8af874af8e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_923f14c9_0cb3_44ff_beda_38ce6f7747a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_04111dba_38a1_409c_90ce_ccf200b12b2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ea6d834e_c25f_4d0d_9560_c6399c59d010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_82cb1ce6_eda3_4755_9832_3ce52c8fa6e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2dca65df_215d_49a7_a4a0_8aa28545f847() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_96ebb77a_9925_42a6_a38f_3889cb958042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3bd85280_801d_4d3b_bc72_9ab2a5b91468() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8ecffc3e_b80b_4a4d_92b9_f5268ceda959() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3043bcb4_364d_40cd_9f39_be2317e8449c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_464a672b_c21e_4ed6_a515_d9baf612c388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_14a3440c_ef0c_4739_afaf_ab27cea7e73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5db123d0_0ce8_4374_bc32_0656a7e31b3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_aa3a7bb0_0032_4913_b9db_88421ec90d97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c299139a_8973_4505_bde2_844a952eda63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1ddbc9b8_c279_462e_9540_3e6b194602cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f02bb53f_d4b4_46d5_b429_ff7cb390495d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_99a3dd4c_6f79_4e06_93a6_72cd24f81893() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4de9a468_1632_46ae_b72d_10bcebaac23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_152fdaed_1509_445f_9780_341493f5aaab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cd63ab28_50e3_4f21_a06f_6382af40d566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f46f00d6_c59e_4722_a85b_e4e2c303a86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b7daf45b_923a_4877_a331_19f23495c9a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3ae4a2a1_764b_4631_9df5_67e7126bea6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1dde8c22_9c23_4895_99e2_a0534e2bde3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9a673136_183d_4e19_9dcf_89a75a6901c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f8625fff_7419_4fc6_940b_fe463cc08b05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_09fe211c_1033_4315_b8d0_8f0bb870ed27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d9b86c6a_b186_401d_88ac_5646e300aa05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e9ff98b8_ec05_4350_86a9_fa13aa65f5d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8d9d167f_c1f4_4d6b_893b_36fe125a641a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2f87392d_edee_46ba_a65e_f365bc303b92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d2f49ed4_c719_46f0_8657_b4d6890342ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_95d773e9_5e29_4683_b573_acf7c14da1cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_11bfefd2_9db0_4af1_a70f_7118520c5b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c556e7ea_c1ee_4392_8f56_d224ce7f1246() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_166520be_8ecb_4d86_b53f_0626a08c2442() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_edc00cae_b2a3_44e4_ab1a_57da12292e39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_2b4d7e66_74cd_4ae3_b652_a48115d4c381() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6dfd85e1_f92b_43dd_b273_b0b2d9b4b7ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_224206a0_eedc_48fe_a6e5_f73e419ad183() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c57d4bde_8ff5_4158_921b_352f5edd5598() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ff314a7b_a9dd_48f7_a54a_744551127b60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2160d417_0be3_419b_975a_65b7832bf5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cd63ab28_50e3_4f21_a06f_6382af40d566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b2d48aab_2188_4f0e_8249_1650d0e6aa5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5b636626_176f_494c_960c_2aeec6e8c9d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d9f98e45_d8d2_47e8_8d07_f4ea8df36565() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f6922215_5c0c_4407_9a6a_07f78df613a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5a753daa_53ae_45a2_8c49_ea68e7c541b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_97d592e7_754b_45e6_b7a0_21d4e1b2de17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_aafa1de2_9bbd_4155_b625_7aa9f0475a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5f11e901_f42f_43d3_883d_34cb7f4ce9f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_12527554_9999_44f3_a177_eae88d8f4b31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_56da5154_d646_4e2c_aa5b_2daa2663669c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_75299203_d8ec_45fd_9d65_98fa20789412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8c5306fe_2dea_49ea_8678_d65320e5c962() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_666de809_03d5_453f_9fbe_dd4bfb8c0524() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_67dbce46_19d3_48ce_9b5b_7e3a27efdaf6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_ff6a0a67_53b4_4557_9b11_eb5a1e67b2fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2f4c8238_cefd_4d65_b5a1_5b32aaa090a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_397c5131_d44c_421d_82ce_41f073d67a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b26e001e_3f06_40ca_ad6d_3f99d5d06f12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6d8cebe7_7632_43f1_97fe_21483cf4fa57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c698500e_0c49_4cc7_89ab_e23b4b9556b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_25c21292_520c_4dbc_875d_6c2d4848059b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_397c5131_d44c_421d_82ce_41f073d67a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c25072f3_7250_4577_94a1_89aef61fe8df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2d140101_281a_4dd5_9f23_c52dc81e9158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2f4c8238_cefd_4d65_b5a1_5b32aaa090a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7fd1879f_4a3a_402c_b6f6_f93cd5714439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f2ad3cd8_243e_4529_b52c_702f1803766b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_36411eac_8d22_4efd_b273_d6d4a2142894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_da9051db_99e6_4b72_b877_63cc38e66950() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_923f14c9_0cb3_44ff_beda_38ce6f7747a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9a3637ec_7610_422e_b27d_6dcb5106c849() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fb7eb574_281c_4e4e_965d_72a89b0a9306() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_22a70d35_95a4_43ef_8255_3f4b3f5177a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0520ea69_8105_4dec_b3de_77d6523cb5a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7fc7f2dc_82fd_48f8_bb5e_56f3478586bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8183c81c_43e6_4aec_90af_50f08a358870() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9074651c_72fb_47e8_a9f8_d7b8e007a409() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a9db90c2_2084_44db_9f57_1bb142403fd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_224206a0_eedc_48fe_a6e5_f73e419ad183() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_14afa445_7117_458d_b311_990d6e6ae756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7e98b08f_1db4_47b2_b8ef_0db04f663b52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9d5c132b_232a_453e_b585_e1d40790796f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8e804c5c_4e5d_4364_9ce6_7cff69c2b8d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_28409518_f84c_434b_b27c_f6d60e999868() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4cb815b3_f05d_48f0_9b54_f345867131df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_959d107a_14b8_479a_bb13_ee21daa7f74b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c9f64a04_4e7c_4351_8fe8_74eb29fc6372() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_6604279a_b9ff_4735_869c_33117449833d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2a17ae40_b5d8_453d_8c41_11f92d89db3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_156f35f7_09d5_484a_ba08_b81f63161ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ae1944a7_a241_454b_9d4c_cc08a20255d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a843e849_ac24_4c8e_b757_e9904325af64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ee4ee609_caae_4a91_8da6_5d407b82bbc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9102e3d8_9dce_40fa_b484_11e7868ea84b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4de9a468_1632_46ae_b72d_10bcebaac23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_558df44c_ad2b_40db_b182_bff76277000e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_6d888c8e_f050_49d0_bd71_1c88e40a55e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c8c9c676_7299_4bfa_8850_f5cb00818cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_502e7975_eb4f_4930_89b7_0b9b7c6350c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c5e1e3e3_bb71_442b_97e1_dafdc4f88c1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6834c735_74ff_4f19_9141_b72bd4f3d7ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_d09ad164_ccf1_4fd7_b13f_24a7e22d60a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_090c8983_9999_4240_a204_da923c24fe08() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6b6b1cb4_ccc6_4034_b6cb_166fac56dde5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_76075cc7_97b4_4227_a992_043d3277fbaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_288ee5fa_2143_47a5_8d7f_cf7d7be1e2e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a3cf341a_a9a6_4de3_b69e_38d274b14fc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f3e57c6b_d605_4916_96d9_10fff44e5d55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4e6862bf_b055_49a9_b0c2_af050a47df9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_68620d02_503c_4145_a3b0_dcc0fc8fb911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_56a7a0ce_dd25_4cb0_bc01_976423ea6f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_41f96a3f_f215_4bad_b483_9d3d75e1db12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0c8a7c68_4ec4_40d1_9dc9_972749087685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1aabcdad_afd0_43e3_a822_718cd1198a7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3aa4a0d8_a95d_4eb8_aa03_0420de531ec6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a31fde65_1936_4a78_ae43_5037eaf66661() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fec22be3_01c9_4f48_b954_c8de3af6838c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1da39b39_46f9_42f6_b518_de5441c393ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a0eafbc1_7c87_4153_bfa1_5217c88b5546() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7502e1d2_2945_4067_9b52_446ae6db0150() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cc8bd1ee_220d_4959_ad08_7cc4d2698e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b9bc2559_b562_430a_b1eb_3142e3d146be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1c558239_86db_44e1_9755_8121b9385755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a9f7d01a_1de8_4666_98f4_69a4a3e361a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7c7378ae_5efb_41fe_ad56_867f8c7eaaee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7ae560bf_409f_4d40_b570_544b2fcccab5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_902ff0c7_8c3c_49fe_92d2_cf026e8d6c58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0feca5bc_e841_4064_afd2_f59b1b38cd85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d704e785_9d47_4ccb_a6f9_76bd2be5106d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c30aa0e0_3cb0_4cff_b1e9_0221d6cdf9a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c7056859_41e8_4ecc_8d29_d2c5947eb16e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_989df6fd_07e7_4b9c_b493_768e3d24cc03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fdaf3392_34e1_4463_aefb_80d33bb68e4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2b664586_8576_40ae_9da8_594ce69716f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4a4cc083_afd5_4ced_b60c_9974ed467ba1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_34b4dc08_59ed_4fbf_aa88_d60c79391ece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_10dbec00_7f29_4695_8482_781fe9d8462d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_eee25c9e_e2ac_487b_86d8_e1a0e578224b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_0d1e376d_5ad4_43d7_9e0c_843f05532ba8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4de69a91_1b80_4ecf_877a_33a945d26ea0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_48c488fa_b6ca_45e1_8009_c58af9f286a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ec39a0c9_2323_4471_909e_337347b1b7ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_155fd60a_fa44_486f_acb2_3f0fa86927b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_406fc22e_9088_4b3d_8395_ff1fda9be614() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5f8b802f_062c_4c76_8517_9b46b7f012f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_312977d7_73af_441e_bd3a_c5b9c03b2995() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0d7c39b8_08fa_4ad3_8989_7e028f726525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_46318ffc_e207_4052_8175_4accf7d38b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_807db54d_a24f_40d2_aad6_73b390954cb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4fed3a50_e8e4_4545_95b2_223bde220038() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ff454c50_8cf1_40f6_9ca8_543c0d294a9e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_617352a9_fce3_490c_985d_1f0a08e300bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_309df7ac_411c_4f97_a435_b1e2be258194() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e0b8ab0e_88b3_48c0_ade1_e54af831c5cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_853ce822_49af_4acd_a17a_4eb9fccbe810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_19395eaa_de8e_4028_9cf9_1881c6ae5082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cff84526_a922_4736_8461_5af1ca488b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a807cdfc_7618_4724_bf38_3a7799957127() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_18aaebe0_36ab_4093_880a_be0a748ad44a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_732dac41_ebf7_4233_afe0_aa381bdefa8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_807db54d_a24f_40d2_aad6_73b390954cb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_75ea0576_3de5_4934_97ec_9d6d26cf9eba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3cdc3c22_9d91_436c_8204_f90abb946706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_afe8e6b4_d557_4cea_b4e6_6398c40db84c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_abd09ee9_899d_444f_a2ab_52d767211318() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_da73e1a6_8572_4407_b5a5_ac7428743fbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5e139813_980e_403a_98fa_fdb2578bb139() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b11f0a88_08dd_4143_b40f_12b4ac993dcd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cd832202_b3b6_4bf3_a17b_60b06abfdc34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_843ac6ad_88cc_440e_bc3a_8a89fd5c5f57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_74ffd2a1_b9b2_40b6_a335_51a75f01a0bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e9ff98b8_ec05_4350_86a9_fa13aa65f5d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d9ac7716_18dc_48bb_9a70_e9725a6eb996() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_49f84c84_03aa_4765_b838_641bb9a9ad4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ba1c5b0f_80f6_4870_ba6c_a2ea0f921d3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_66587cfd_e1dc_497a_9e81_0f71d4e1771c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_57b9149d_1dd2_43bc_ae0e_81232d1e976a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2256e16d_a772_41ae_bb67_62c60530d634() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5a51f1fa_3c81_45e3_a4d1_c34733e30070() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0b020b7e_e275_4d20_b6d8_9125997ef2a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d861fea6_5b9a_4c61_87c3_268fee419451() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bb1390e5_50eb_47a3_ba6d_122f68a75129() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_52fc6055_0b77_47c4_8e28_1167887f1204() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6f01ea83_3b6a_4716_be62_0340b4d71baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1edf4c22_4659_4acf_97aa_92d8c74fc401() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c1595a06_7ab8_41d3_bd47_457e6634464b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_448425d9_9f33_4f11_be77_4f0f53cd19e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f6922215_5c0c_4407_9a6a_07f78df613a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a807cdfc_7618_4724_bf38_3a7799957127() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_594aff1f_ccaf_4de6_b340_24d579e2b144() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c9c3c734_e4f8_4050_ab04_b065c2882c53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c698500e_0c49_4cc7_89ab_e23b4b9556b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_20d00016_a9f6_4da4_a0fb_12b881d6993d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4111e63b_6ab7_4ea8_abc1_8768264f749c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_aec493bd_1061_4737_b9dc_5a3ac2d28c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4992d0e2_4483_4d63_bee6_c61f48caa9ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c8c9c676_7299_4bfa_8850_f5cb00818cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_de802b87_64e2_43ea_b38c_fc2cf55a75c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_75d3a7d3_886b_406a_8c44_7428e82516b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_558df44c_ad2b_40db_b182_bff76277000e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_18aaebe0_36ab_4093_880a_be0a748ad44a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_02b2c1b2_5636_4b6a_ba2e_4deb0cff6cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c30aa0e0_3cb0_4cff_b1e9_0221d6cdf9a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_763df214_be9c_4a01_8f98_198266809fbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_923f14c9_0cb3_44ff_beda_38ce6f7747a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b17300a7_02a9_45b8_aa3a_fabe80514afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cb50fbbc_46b6_4186_98f4_51bf54b9219f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0d7c39b8_08fa_4ad3_8989_7e028f726525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_95d773e9_5e29_4683_b573_acf7c14da1cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9ed3c1f3_43a7_4794_80d3_d1bf1a4e9ade() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_feaeea1f_a580_42d4_a50b_b2abcc90615e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b32ef39a_f584_4043_b11f_2309c5498082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_eb8e8991_8992_4225_b5b7_c06def7bec18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_95c51af9_65a3_4bb8_9b7f_298c72d00553() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f2ad3cd8_243e_4529_b52c_702f1803766b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2bf58553_9e53_41ed_82c7_a0f6752cfeec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_129ede65_dd3e_4b25_b189_2c95279ce610() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0915085f_2ac6_4b7c_a03d_3153be2e738f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a838f46b_be21_4a32_9406_eac35cee65bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a6d1b07c_7cf7_494a_84ad_a82ebae78e4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f33ab305_b833_4d3b_9ea5_90b99987262f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_04bd1bdb_dd31_459d_a95d_d001ce9781ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d5505315_9663_4443_a270_b8cd7ccc961b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_67dbce46_19d3_48ce_9b5b_7e3a27efdaf6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7dfc86d5_53b8_4c37_b8ef_1b4b80453952() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_adf9b152_0bc6_4e5b_ab5f_660cc04fe710() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8a009dc3_96a2_458e_ab47_f3c08768b94b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1ec97dde_1b1e_468e_86fc_e46187dbf13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_633fe966_5fb5_4f48_a10c_dcfaf830ec38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_fa639bd1_ae8b_4dc1_bd1a_96d81e46da0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f3801894_494c_4cf3_b4ed_18ef7fbce130() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_29e90f18_825c_4a1b_9ca5_7e5014ad1308() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_aac74a22_a912_48de_8ef6_dcf5559d5e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f0120469_3428_4ad0_8568_a2fc5d38c5be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_87d3330b_a138_4bd0_af92_8169d36c1e27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f9aa0cc3_77b7_49bf_824c_c80c5cec8d71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5ca675bc_dfe4_4eaf_b849_21d959b7e353() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7d487dcf_8861_4a4d_8c89_950f5929a6b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3580e7b5_17ea_4286_92ff_195e213323e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4087f2dd_63cf_4c1b_a969_7ae4c8aa7e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6f259ef0_82c8_4a3d_9a54_e0492f3fd1f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_de98c634_292d_4e4a_a9be_9cbdb1453ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c6c16ad8_c80a_4668_971b_575943b80ced() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e1d0cf0f_0f16_4244_a47b_bad0df347eb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_491b3d0c_2fb4_47bd_8ba3_1136df96358a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3c8fa9f9_0c28_4d4a_9f93_4e5afd584b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b056b70f_34ab_48d7_9ea6_1fcb99d24484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b2675607_b1de_42ca_8bda_99ce18ab89c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d052cca5_f9a5_403c_a5f2_d1dd7e8d903b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8ed2ec77_296a_4e5c_84fe_99b5dd3e401b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1083d0b4_5891_47a5_84d5_5e47bbccf1a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f0026b5b_9739_4c14_9a9c_c53b21826de4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1c330a38_c064_437a_9d2d_fae5b1a54d20() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c993c20b_c8fe_423b_94e3_a11f5deadc16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8f07f72e_f367_4265_a10b_7be7e14eed6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_34847a04_0930_433c_920f_ea3fb0d71599() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_3a57ec2f_ce0a_4e8d_9069_630d327567d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_52a2a986_b76e_4783_9785_29d56cb7c452() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_14992d0a_121d_4ee7_aac6_99248c2af879() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e0102bb9_852c_4dae_ab88_f98c0698c95c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2394df99_c649_455b_8783_a3dbb7fbfdd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a6071f27_0faa_44c1_a543_c9fff15dc0d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d273a64e_0e83_41c2_98d0_dfdc2ad8bab8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c809e6b5_a8f6_44c3_9cac_b7f83ca9abd2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_805a5a74_3365_4c17_832a_229b2fabaf5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_013ea1d5_617f_44b4_99fd_87be1c55ffbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2bd3b8cd_4a44_49c7_8e3a_2251035b70a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_358739ea_aa07_4299_b6c8_fa188004b44c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5f3ccbbb_ab54_4f43_8a31_8fad3d8e933f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8a009dc3_96a2_458e_ab47_f3c08768b94b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_00e25ee7_df89_4130_b4d0_734d8b8387db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_109f4d24_e22d_4a83_931b_536903b90cd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0477ab11_0f6d_4536_9a94_fcc2c0849885() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4cb815b3_f05d_48f0_9b54_f345867131df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_0280d40a_d7bc_43a8_958e_3eaeb30f826f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a77678ae_a790_43bd_b8fb_fa00a6124936() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f26d649c_4083_4346_8537_34c54606d352() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_8b3784a2_ec2e_4c7f_bc8c_c4c517f82184() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_93ab52e0_22a6_4cbe_b868_a0a5bcb4c010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3d302b84_0423_49ec_ab29_cbc423cdf549() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f00b01f1_495b_4d5e_9d6d_5892a20f2b89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d752727a_8cf0_4a59_a15a_401ab6b1d2e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2cf1e92e_3a7b_4f97_9ce7_aa7d96c447ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_060a2819_6e41_48ae_a317_f1a7ed7bb0f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2fb84282_b9c5_4fad_bdb8_11b9dd34aca2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_476cbb75_d885_4e10_96aa_973202f7685d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_bcc26970_59bd_4ef3_95d0_9d90c5e76956() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1ec97dde_1b1e_468e_86fc_e46187dbf13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_493eaa96_38e5_4f01_b8ef_047f076e1dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f61e5e7a_ab2c_440a_9c81_49209b5d2586() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_52fc6055_0b77_47c4_8e28_1167887f1204() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2394df99_c649_455b_8783_a3dbb7fbfdd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ee234a98_2600_4606_8117_d0b09b53316b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3a7662c9_8b17_4ba8_9498_2dd824635c33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b6ee810a_ec23_4e5f_b925_92806ea549a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d4d6a753_107e_41cf_88eb_bc51ef9d22d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9ed3c1f3_43a7_4794_80d3_d1bf1a4e9ade() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c9ea1ee3_2fbc_4213_96df_2fd046dee2ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_85440e13_530b_4b02_bfd6_e24930316463() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1a9bb200_f515_4049_8ad1_1111dd94f9b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d7b045da_d9f7_4e91_953d_af3a33e6dab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fb7eb574_281c_4e4e_965d_72a89b0a9306() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_86be6dc6_65fd_4468_a60a_e3e47711a13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_29ae5c3a_1d03_47e4_a6a7_058b215903b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_efc49b58_fd44_475e_9491_2bace5012ccc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_81e4d4d4_3e2e_43a3_849a_30554f84fe98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1a1c53fb_ae1c_453c_bdf8_1a0cca96ee6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_77f7d997_713a_45c0_bade_5e7aa5ed12c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f39b036f_cab2_4952_ad23_41a045e84eb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7a65b6a9_33d9_418b_a1d2_8915591b57ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_95c51af9_65a3_4bb8_9b7f_298c72d00553() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_199bfcdf_b38f_46ca_a1b0_df0831511058() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_7d46a874_1f6d_4966_a958_23dba48b995b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_473b0d9f_8fb4_469f_bfd9_1f0cc4a17626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f2bec0ea_5c26_42c6_adfc_7e458eda5ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5ca675bc_dfe4_4eaf_b849_21d959b7e353() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_353d9793_a612_4c0b_ac42_21b26fb52848() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4cda2c99_29fa_4aba_ba14_1ebf7fe59969() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f4f79686_df17_4539_bb22_c4f71cfbdd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a206878d_2302_4002_9680_959dd742eeef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f4f79686_df17_4539_bb22_c4f71cfbdd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e8b28da3_11bf_4121_a8d7_1a69c8c492cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_13296526_4606_4635_a47d_35a9a4f1b042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_66c25bf0_227b_4ed3_806e_d20209521601() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f3850f03_165e_4d66_8a95_419b3033d801() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_913b48e9_55ba_4b44_86e6_d41caf8cf0f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_18a85fc3_8120_4a24_a73a_e9fdd88f245f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_deb29c8a_fbb9_4e87_9f95_4191a41fa7e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2307f200_7b9d_409d_bfc3_5e1ee5fbb42c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d638c72b_1e03_4cf8_ba16_956ae7cade9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_66c5b2eb_b0aa_4f39_b805_192696ade28e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_72b2213b_b949_400c_b4fd_984eb09d46b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c25072f3_7250_4577_94a1_89aef61fe8df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0334db5e_68c7_45f4_833f_915b32c5a2cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_acdbbf25_0f40_444c_b8c9_e695392d82f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c992ba17_4962_42ed_9d07_20e6127d818f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_29ae5c3a_1d03_47e4_a6a7_058b215903b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_13296526_4606_4635_a47d_35a9a4f1b042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3309557d_8568_4c20_9deb_e46e610469f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3f459302_0b9e_4c6b_83d6_b5bd0a17ff90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b5ec3c24_c897_423c_9e32_e883407e380d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2c09e5c2_89cf_44ed_b026_2e6db2bb15f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1fcb1f5a_c441_4719_82e7_0721859068b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_54fd500d_e788_4238_84cc_94b08e188792() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a2546def_01ff_43b5_a90b_5f7c7d2696b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4e16bb6e_0d62_4d67_9174_f9e4f9cde3f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e0102bb9_852c_4dae_ab88_f98c0698c95c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9105a35e_2885_4f14_9350_57b924bd0c88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_375b0a74_743c_43a4_b056_b30ec26c0833() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_efaa1305_3e74_4610_ac5b_f81526d90db2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_397c5131_d44c_421d_82ce_41f073d67a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9af9967c_93ee_4283_965e_b140d0d2556c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_19395eaa_de8e_4028_9cf9_1881c6ae5082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_288ee5fa_2143_47a5_8d7f_cf7d7be1e2e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_45076c5d_ffb2_406e_9172_4db36107ef19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4859f171_7ea1_43f2_83f6_74fd5a24eac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bad24fb8_8769_4537_b52d_fe680bef5384() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d9f98e45_d8d2_47e8_8d07_f4ea8df36565() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f16b00ec_60da_4bdc_b1be_dd86df39e52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_da703dd0_de97_4a37_8d9f_36eeafdd8cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_191a58ac_584a_427f_91be_79b5da0c542a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_0caa00d1_463b_4a6e_870c_17ea4fb46939() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7931051c_bbf0_437e_8703_b16041fb6779() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a206878d_2302_4002_9680_959dd742eeef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_524a7012_bb1b_4258_8931_67467b82a253() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b6ee810a_ec23_4e5f_b925_92806ea549a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1da39b39_46f9_42f6_b518_de5441c393ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_90490bc1_5755_4419_87cf_38277424680a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2da6f0d6_9c61_456d_b0ce_eead74b5dfff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_2d11cbb9_78bb_4a7f_aab1_8248d88fa918() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a807cdfc_7618_4724_bf38_3a7799957127() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_74208003_764a_4b0b_9d1f_f89dcc0abb01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e01177a7_5449_4f01_99ad_4331d8d18c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_d1493453_c52e_432e_b7f7_eb295cf9423c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e60e531a_8a5c_419b_af72_009a5df4ce25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bedbcf85_4de4_4116_a096_1748f1d46251() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c74d4c71_ed19_40f7_be34_fdcccd5b420f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c4609263_ef06_4de1_b054_8d854b8d3eb5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_79c0e0b7_f49f_4a85_8d5c_cb2cfc183c55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0feca5bc_e841_4064_afd2_f59b1b38cd85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_369894d0_172d_4f2f_970d_964e34bae181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ba21a753_2eb6_40ee_a7a1_3f4d9b3b0680() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8ab95dae_db58_4d6a_a2fc_6a072a52a8e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_46350b48_041c_45aa_99a8_c5095b2663de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b6eb9ed3_befa_4491_b84f_5c7a1ffbaeea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d047fc3b_fd72_4a3d_b515_15dcb89b9e4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8d250a84_2ce7_47c4_8504_836b864ce35f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bfa9ae79_b3a2_470e_84cd_7e5a4c32fc94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_acf2bc4c_cc90_400a_ae3e_c5dafaf03b68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5696a735_18a9_43cb_98cb_6f022e3786a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c9f64a04_4e7c_4351_8fe8_74eb29fc6372() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f1d2af93_6d70_4330_905a_ed536e36743d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7b15e7ae_3964_438b_84ca_1cd606670ae0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b4c55071_d0da_425e_9a8f_e0d165a9934e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c7056859_41e8_4ecc_8d29_d2c5947eb16e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_cc0f70a3_dbdc_4dc2_a1ba_d353fe1a6173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_476c5912_66dc_4aad_930d_a029e59e8828() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3bb32a82_e88a_423f_8752_d5bede16ce18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_11ae9eff_9488_4c4f_8ab3_ea17446c6c06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0186b02e_1193_4c85_910b_c020cb41367f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b41a0927_56e0_4b0c_8162_f78481d04292() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_29e90f18_825c_4a1b_9ca5_7e5014ad1308() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cb50fbbc_46b6_4186_98f4_51bf54b9219f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4e6862bf_b055_49a9_b0c2_af050a47df9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7e98b08f_1db4_47b2_b8ef_0db04f663b52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_eee25c9e_e2ac_487b_86d8_e1a0e578224b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fa01a8d0_3c23_4af4_bc43_c868b88267f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e590c4c6_de11_4da0_80d2_f19af0815a18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ba59dd74_936c_4159_b62a_55c975c0eb47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_57b9149d_1dd2_43bc_ae0e_81232d1e976a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8ccdf212_a716_4053_b957_444b9a984be2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4e92d703_4bca_481b_9230_c22792995cc7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fcfcb8c0_5779_4e1b_af0d_efe6e456e620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3b5de9e4_af92_41ed_9442_893609075436() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ba1c5b0f_80f6_4870_ba6c_a2ea0f921d3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_311806a2_22e6_4c1d_9453_45716fb6b95d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f0026b5b_9739_4c14_9a9c_c53b21826de4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_12e8c994_1cf7_471f_9297_eff2af5f9547() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_43698697_0a05_4e0d_bcfb_cc6457f02f62() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6f01ea83_3b6a_4716_be62_0340b4d71baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a9a3f02a_6a0d_453b_931c_c6d68cc48575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7559a675_cf04_4529_b0dc_10f9fe98979b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f6958a5d_e8d4_4a34_be99_bc2f34789ffe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_694cc508_8533_4370_9aab_fa1a89228467() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e7d6d9fa_5eaf_45eb_a932_a9f39e3f949b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6998c1f8_d7f1_4ae5_84ed_d629a7ec7ec9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3c06aabf_813d_4702_a795_fdb2eaec82fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_dae921a4_aef1_48f6_844c_a6ded0c3a021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7aee86fe_bc37_4d55_b027_c7b748e3ac74() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_17b5a9b1_7ba8_4221_b589_a55bd1f7f543() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7a84bb9c_e9f0_4eb4_87c0_ec8c28a07376() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b464ff5c_08bb_44aa_a15f_2b5f2229cc23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_559c1fcd_3154_48b9_a1dc_f9e6f37f3771() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cb4fdc98_8ff5_4899_8349_c6c5d6b4bd36() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_dae921a4_aef1_48f6_844c_a6ded0c3a021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1945e604_bcf8_47c9_a783_483b2cb4cffc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c7056859_41e8_4ecc_8d29_d2c5947eb16e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_49af8968_b9ec_4990_9bb6_235514e7a633() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2609348b_1fd0_4662_9467_36ce54be2572() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b76f81c5_4161_4471_a3c2_e33feaaeaf52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_25f9dd09_24b6_4636_b217_8049165370f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5b629202_3a60_41ea_89d4_c2b7e2a355ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_68f98558_29eb_40c2_b40f_1323f09db799() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b2d80524_9506_447a_beda_ccd5cc2c2cc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_31fff2a5_e84e_47e6_afb7_6a35a66992e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_43e777a3_64eb_4c3a_a73c_3256aa5a63d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fb7eb574_281c_4e4e_965d_72a89b0a9306() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_2ce0f22d_d3f4_426c_88fd_319bac62731e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_efc4fdf5_01ab_462f_b789_f61b8656e61a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9040e531_f962_4862_a4e3_76e5e79a35f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6f697b70_670d_40e7_9468_5c1c453ea22f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6bcd3631_fb4e_42ba_81b8_7c3b4adc9638() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c4c43c80_4501_42cd_8d92_8a51c86165d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6d888c8e_f050_49d0_bd71_1c88e40a55e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e19eae6b_dc78_45bd_95f6_86bbbd7ad5ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_94e61289_5c99_40b4_8e86_bce683d238ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5078faf3_65e9_411a_a828_a13a6358384c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a28b75ba_c563_42c9_af0b_18171ca42691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f84c022b_67de_49cd_9f6c_01bd5749895d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_9e483280_5460_4afa_8d20_f795d40f47d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_aee7f721_1e5e_4ce3_ba14_8fe754393be4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_15166ec6_8047_4c78_9d7f_2afda2687e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_38b59086_0c7c_47c3_8af2_395941d0e84d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7a45af8a_4fdd_4244_83aa_254d48ff36bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_559c1fcd_3154_48b9_a1dc_f9e6f37f3771() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_afe8e6b4_d557_4cea_b4e6_6398c40db84c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_056214c9_5734_48fa_a170_524e37000e85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_48e56d99_2ec1_43da_9e88_ea4d483c7826() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f6958a5d_e8d4_4a34_be99_bc2f34789ffe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_18aaebe0_36ab_4093_880a_be0a748ad44a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c814dc33_e699_4b3b_b236_701ef8ee3bcb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_39404c94_7903_4a27_a397_e2aaa87ebcb2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bdb227d3_74a3_464e_8582_aeaa4f0b8f55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5012de6d_3796_4140_8041_a849a0e3de8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_995480a9_1d20_4f31_ae58_b784cde4a6ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7de6c5c2_9aae_4b35_8cc2_c1fe954992b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_af6bc2a4_7926_4038_921c_2144bce04a79() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f1d77301_06ba_40d0_9850_3d85148def9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fc732082_6d3d_4d34_911d_e46127fe2656() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_72d29a71_3e8a_4c9d_91bd_a4d9d50e632a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6cd7fbf7_36bc_4595_9585_096498db3c8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_906fe9dd_b933_46f4_8427_fcf0c3c5f755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9ef771b0_de8c_414c_9890_478f7aa76d92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7502e1d2_2945_4067_9b52_446ae6db0150() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_480cda45_1d9e_4766_84ea_cae975e39ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_013ea1d5_617f_44b4_99fd_87be1c55ffbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3047c64b_5602_4c47_9ba2_2f57df36b75a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d56122e9_63f9_4197_8474_4c9e4b996fea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1f9791dd_a7b1_4cd8_9bb9_1a854d99c7bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_95a01bd5_ecbe_41a6_bd5b_6714dd84edc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_67dbce46_19d3_48ce_9b5b_7e3a27efdaf6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a907bea0_0549_43fc_876e_7e4a973d0191() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9a7e3ef2_5199_4161_9432_fb2f3f0424af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_04c7acf2_4bd4_47e3_8ea5_b0d4a089fb4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ca9acb25_9421_47a1_bd9f_72aa4c23073a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_186bedb0_34cb_40cb_8f06_221f1c02cc63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ca2b5c9c_43e0_4eb0_afe8_d1868508fb83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c2f01d0b_d3ce_44e7_91f6_a51b748123fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2201305e_54ac_4882_b4c9_6738b74739e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_53d5b3b7_2015_4ad3_b5ef_1d9e2f003905() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a79fdd1d_2e02_4e29_a68f_33da15dc40ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_536861b4_159b_4b4a_9fc3_d4e421e41447() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_3bd85280_801d_4d3b_bc72_9ab2a5b91468() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ab6e58ae_4bd3_42af_a269_64f4d87e3402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b2bf2174_e0ec_4e93_96b4_f8c12dba7ec7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c76c47af_861c_4278_b69d_7d9b81bcd957() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b7cf93b8_c866_45cf_b648_e798274d5a1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_375b0a74_743c_43a4_b056_b30ec26c0833() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f9b1b82d_3349_465e_bb61_9f4a578abe2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_090c8983_9999_4240_a204_da923c24fe08() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_353d9793_a612_4c0b_ac42_21b26fb52848() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5c8573e8_4537_4701_a812_58c8a001b783() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e5fec7d7_46df_4575_a8e6_ce6e714d88ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_6d888c8e_f050_49d0_bd71_1c88e40a55e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_17b5a9b1_7ba8_4221_b589_a55bd1f7f543() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f855d8a4_2502_4ef7_b458_2a4bd7b6fa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_17c7d914_2f0d_46da_97e3_34de2bae69a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9102e3d8_9dce_40fa_b484_11e7868ea84b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_53d71208_f00c_4142_aeb8_38afa4891b93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_adf9b152_0bc6_4e5b_ab5f_660cc04fe710() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b4f0449d_e172_43ca_9b62_57a1562dc209() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f2ec5dee_cfd4_4e8c_a46f_bfc9e556e43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b2d48aab_2188_4f0e_8249_1650d0e6aa5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1deca706_fa97_4c2f_bd4b_8f1fd6de1df8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2b4d7e66_74cd_4ae3_b652_a48115d4c381() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7ae560bf_409f_4d40_b570_544b2fcccab5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c992ba17_4962_42ed_9d07_20e6127d818f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_14a3440c_ef0c_4739_afaf_ab27cea7e73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4d592097_c7d4_4da8_b004_a26b4cca3e61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_68620d02_503c_4145_a3b0_dcc0fc8fb911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_87e4e8e3_baeb_4501_ad60_6a69ad586c3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3de2730f_1b4a_42ff_b3ef_9a43265acc49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_309b990f_f638_4d49_9d57_16288a71eea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6fd099b1_7fe3_44aa_9a6d_865ed72d2237() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ddf3dcce_148c_4f7b_bc16_3ef2f33249e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ca9acb25_9421_47a1_bd9f_72aa4c23073a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ebe40ab3_b9a0_4864_9d11_ff89eaabae78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ddc440f4_7e2c_4aa1_bf8b_42b7ec59fcd6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_01daed2a_23b1_499a_b705_5921e6b87d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_94dfb269_b10a_4cde_b59d_30ccaa9c96d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5c178846_f02c_4303_965d_5e5ccb02039d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_15166ec6_8047_4c78_9d7f_2afda2687e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_25715498_f196_40b6_a331_539cf9ca216c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a9a3f02a_6a0d_453b_931c_c6d68cc48575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_633fe966_5fb5_4f48_a10c_dcfaf830ec38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f5e7dfd1_30df_4e97_a6bf_b2175368a5c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f3fa43d3_3421_4156_a9d5_61cfe3ca7f82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c451a034_a863_421d_9e83_2ce4678e167e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a8b27cb4_913d_4550_9fc2_dabfb1794d49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_89f2f8ac_2eb2_476a_bfb1_32d17ca1de85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6c41eb87_1daa_4ab4_a24f_487effc9cf24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6a95c035_0ebb_42f0_b245_4a0351ee33f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e98c7290_42ea_465e_85f5_f32168a0e98e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b227a9d8_feed_470d_8c3d_0d276d3f2e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_56baa124_c9f6_4dab_b2f7_2aec96d3193b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_134aa7a9_5908_4638_a8b8_9d09635541d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4b39de92_0f70_4b28_81e3_04208d98c462() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_448425d9_9f33_4f11_be77_4f0f53cd19e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5e7ec1cf_6737_49f0_afe8_6c1d2270b060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fb9a89e5_7b24_4ec6_8bfb_cfad7cf35158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5d69e473_920a_4c89_853b_65ed286e091d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e281ef91_f065_4664_8744_9b890dae9c2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8fbf3b60_c8fe_49c1_80b7_5562f73c7438() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0caa00d1_463b_4a6e_870c_17ea4fb46939() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2bd3b0c3_534d_4d43_b13f_149f091df9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_290ee586_c2e7_4809_8a2d_b0b592bc780c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a5916754_3844_4b44_afa2_da745d867b97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d31ce131_6ac0_4ed4_803f_c87577fd4f17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6b87ef8f_3e18_47d6_84eb_963a77ad326b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0fd0fc34_2510_4255_b52a_139776c88cc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_60fbb24f_18b4_4955_b2b1_34af2cc7d7a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c35091d7_125b_4684_a002_a44c9470541b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c1f00d4e_4e3e_462b_9d63_e051bba73279() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b2675607_b1de_42ca_8bda_99ce18ab89c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_568a7e62_1f76_4094_ae91_53516189679f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_569e4181_3ab3_47ea_8476_160dce8960d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_33895557_3680_4c91_95ca_7cfe4accf8fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_410d3d6a_3142_4d6c_bb4b_ccec07654ab7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0585d13e_2b19_44b3_859f_85a7730e49e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_037ca5d3_7abb_4323_9d99_89ec73e5d229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7893d1de_f8b9_4be2_b04b_fb73201c6589() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_54432884_1fbb_4dc7_9098_156fe308cb89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e01177a7_5449_4f01_99ad_4331d8d18c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b2d80524_9506_447a_beda_ccd5cc2c2cc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_14241fd2_b741_484f_92f6_07dd53880c1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6d35df7f_83df_4c4c_b7f5_e897ccfe048d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_09fe211c_1033_4315_b8d0_8f0bb870ed27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c0294b23_a968_498a_8d21_b312b94b9596() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_2c09e5c2_89cf_44ed_b026_2e6db2bb15f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_19c69545_f1ca_4d3e_89e5_75a216902a9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8b4bae11_cf31_405a_9a74_930284c3a3a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_75d3a7d3_886b_406a_8c44_7428e82516b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c153690c_220c_4b24_91fe_9146fe019f1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d1d2112a_f7b1_4fd3_8150_58b393f5a54a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_93ab52e0_22a6_4cbe_b868_a0a5bcb4c010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_951ec70e_0267_433a_8343_2b6952f611aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_388bee55_deb3_45de_9f82_cb2387b70446() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_86d1ad5e_cc56_46d0_86d5_7a9f805c14ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_19bf1445_5581_4d23_8a67_abdfa6fbed06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c64d6cc5_dfba_408f_9d79_56addd2b5667() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8ecffc3e_b80b_4a4d_92b9_f5268ceda959() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2f294516_9ca3_465f_aab7_e84f3e11c503() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3c56c142_0b54_4221_9a14_0ad94d455bf3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a57061f7_50ee_4e3f_aded_fb67c8a39d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_54fe99eb_2403_4857_87ca_633fad6f907e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_216a4d49_c217_4f9a_a984_84a1f7bbaf3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_3043bcb4_364d_40cd_9f39_be2317e8449c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9ed3c1f3_43a7_4794_80d3_d1bf1a4e9ade() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c25bb9b6_a280_4e18_95b9_7eb98d4e40fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_aeb59689_b707_4be6_919c_92312e29b0fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8853697c_2baf_4864_9fdd_1241bf33f9d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_373054b4_59d4_45e7_ab31_4282cbad3770() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_df968c45_8ec5_4db6_8e54_8011f3e72b2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2a87427d_498b_46fc_911f_e0edcde83ea1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8de24d28_716f_4f9b_9138_c07ac4ca2947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5f4e1fa8_6723_4713_a258_71a4d4bdeccb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b7318be5_a3ce_499a_aa8d_ca54a9052b11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f00b01f1_495b_4d5e_9d6d_5892a20f2b89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e6f09294_9cfb_4923_a0bd_203b6960f0a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_38b59086_0c7c_47c3_8af2_395941d0e84d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f2e2bb16_4a99_431a_9d9f_684c9006a3ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ae1944a7_a241_454b_9d4c_cc08a20255d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_27270c33_cb41_4fbf_bfda_82008ab4dd38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_adcd89e6_99bb_42a6_a539_3d504508d0ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c23a4b41_c833_4c99_845e_dfc047045f7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2be3d1f5_1000_44ea_9e36_116a311519e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a9a3f02a_6a0d_453b_931c_c6d68cc48575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a5bf4aa5_654d_4ba3_b263_ef14423a5685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_a9db90c2_2084_44db_9f57_1bb142403fd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_679e86e7_cdad_4ea7_960d_bc14440f3a2e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_731aaaa0_aa7e_4355_9070_9b935d911066() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f27df727_d098_4d3d_8809_ed944ea933b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_63527cff_58d2_40cd_a85c_e5f2206a18fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5f3ccbbb_ab54_4f43_8a31_8fad3d8e933f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_818fff67_cdb9_4f61_96f4_b8a91f736032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_8ef717ec_79c1_442c_a2c0_b93be262dfaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_07d2382e_7e07_4eff_8b2d_e1821d5d0a3c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_17b5a9b1_7ba8_4221_b589_a55bd1f7f543() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_0dc8277e_e4ae_41cb_96e5_4ee26d70ceba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_63c46383_c4a3_4d23_836f_6fcd6b3b61ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_6a4a886f_6578_403c_93f1_84c4672eba25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c9c3c734_e4f8_4050_ab04_b065c2882c53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_85c5a287_7416_4cbc_a082_412b2c34876c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c12c4499_f0fc_456e_93f0_fe00243b5e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5c1473e0_c333_4d24_bb90_1046368e7fe1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_46bc51d8_135d_4220_96ab_0778f9f610e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9f1c5893_d8c5_4daf_9d6c_b4b96f56d998() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bd7217a3_3b17_48ad_a6c0_39baff6b0657() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_da839160_a716_438e_98b9_74087f427bed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0eb6165f_3f9e_4c5f_9a22_b6504446f5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0a818c23_a0e1_48d1_a8a2_ff467c2fae95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3a7410bf_29d0_4619_88b8_6b0669a66765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9ed3c1f3_43a7_4794_80d3_d1bf1a4e9ade() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_850c6745_004d_4835_bcc5_5f6016eecc55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c3f5d853_3294_456a_b6f5_8d1770d4c706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b41a0927_56e0_4b0c_8162_f78481d04292() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3e74925d_641a_4f75_8c78_2ffcb3997616() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b7daf45b_923a_4877_a331_19f23495c9a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ca9acb25_9421_47a1_bd9f_72aa4c23073a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b7b82154_ea6a_4b8b_9ea8_085ca56b9fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ef45541e_d303_4241_9ddd_1ede03a345e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_043eb383_4413_4c7d_86af_cb3e2fca439f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0477ab11_0f6d_4536_9a94_fcc2c0849885() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a5916754_3844_4b44_afa2_da745d867b97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_72ba1603_7291_4e4e_b19a_2fc10ccabece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2201305e_54ac_4882_b4c9_6738b74739e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d8c3b788_d483_4d47_b123_e190e929a802() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_29e90f18_825c_4a1b_9ca5_7e5014ad1308() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_1d57b98c_249d_4d04_bcd1_3f4cddd13527() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a51738e8_8ff7_4126_b187_4f54855e3d07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3c8fa9f9_0c28_4d4a_9f93_4e5afd584b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a31fde65_1936_4a78_ae43_5037eaf66661() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_79c0e0b7_f49f_4a85_8d5c_cb2cfc183c55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_79fa659c_0c71_45c6_aca4_cd8e7ebf3967() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_efc49b58_fd44_475e_9491_2bace5012ccc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2f20bdf3_1752_444a_8b48_86396c4813ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_2fb84282_b9c5_4fad_bdb8_11b9dd34aca2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_79553e77_5385_4650_a551_3c71ada6ed98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f1d2af93_6d70_4330_905a_ed536e36743d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c698500e_0c49_4cc7_89ab_e23b4b9556b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_34fd786b_962b_4989_84b0_1a88715d107e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3329eabb_a99e_43b5_9d50_089c0f130832() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f6958a5d_e8d4_4a34_be99_bc2f34789ffe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_89f2f8ac_2eb2_476a_bfb1_32d17ca1de85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f64c9cb6_ebd0_4963_a522_4c9710d18107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_58a81e7b_aab8_4bde_9dbc_1ea6fed606b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fdaf3392_34e1_4463_aefb_80d33bb68e4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_9ddbec57_e125_406a_803c_cd81a0126df1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b1f24f98_9179_49fa_a25e_6c7c84091ca1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_67d8d6bc_24fd_4303_9958_5e3913700460() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d7c34757_8473_44d0_a34a_f37cfdfa3249() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_65fb5930_1bf5_4bed_9793_448cb7212c99() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6162a2ad_fc6b_4f37_878d_784d5a5c9f28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_abd09ee9_899d_444f_a2ab_52d767211318() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bdaecf8f_4ee6_41b0_9efb_ce684fce5fff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_20913b8f_584b_475a_ade3_4912547d1bc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1c558239_86db_44e1_9755_8121b9385755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_309b0f9a_a4d2_4547_bf46_cc2daafc0e5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_536861b4_159b_4b4a_9fc3_d4e421e41447() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f4ffc246_ad3c_417c_8e25_d89da5eed9b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0936ec4e_f0e8_474b_be48_d3a6bae7e8eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bfa9ae79_b3a2_470e_84cd_7e5a4c32fc94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f2e2bb16_4a99_431a_9d9f_684c9006a3ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e95d1062_4578_4eaa_b67f_97442ed3ffc2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ca3ef9e9_d3aa_4ec4_bccc_8543f51790d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_853ce822_49af_4acd_a17a_4eb9fccbe810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_01ed684b_0d68_4bab_8c60_bbb1130462ab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_74ffd2a1_b9b2_40b6_a335_51a75f01a0bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e0b8ab0e_88b3_48c0_ade1_e54af831c5cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cc0bca4a_f917_41ec_889a_abe3cc642961() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1083d0b4_5891_47a5_84d5_5e47bbccf1a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_44db7931_24ba_486c_9ed6_ae1a5ff0de64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ab229044_f825_40b6_93db_b869e7552697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f00b01f1_495b_4d5e_9d6d_5892a20f2b89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0c01ea96_5a5c_4d38_af48_c8dac16ed3e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d6ee4fe1_639f_48f6_a4fa_fda54f6aa5ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5cc33b70_1fe8_4f73_a06b_7ebf1696d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_56c69a57_f7a2_4ad8_a152_cf882b12da81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_29ae5c3a_1d03_47e4_a6a7_058b215903b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_59f6c3a2_7200_4a50_89d3_c6a55bd4e245() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5ee02244_7a10_48e7_8462_68c66410d9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_209530a3_f380_48a2_84c1_5ec6d4a10965() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5157b0e7_5c37_466a_8427_328d3046b9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a55ab954_ed2b_4c8b_bb8d_189269c24c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f6fcbf94_7967_4e0b_a3eb_01c7569376cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ce9b2eec_cbd0_43b9_a03c_6416dcc5337c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5078faf3_65e9_411a_a828_a13a6358384c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3580e7b5_17ea_4286_92ff_195e213323e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7132fad9_02ac_40b1_9255_0a0efa1a3555() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0ef02c1d_79da_4829_87a2_44ee0dd57f75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_29208566_8a35_4d31_85c8_579105008ec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_94dfb269_b10a_4cde_b59d_30ccaa9c96d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_47cae136_54d2_4361_8ac1_ab1a834e021d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_21fa7f1c_2810_4ec7_9fd2_ebfde3d82b53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_859082a5_7531_4f30_b10c_8f025ba183fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e07f6abd_0585_448c_86ca_40c0f3c85407() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6f697b70_670d_40e7_9468_5c1c453ea22f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f68925d3_3ef0_41aa_99c9_0e8d528e304b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_03612763_5740_4d8c_a351_2970f859d4b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8de24d28_716f_4f9b_9138_c07ac4ca2947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c75d976e_5def_435c_8e3f_264853f81a3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cc0bca4a_f917_41ec_889a_abe3cc642961() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8b275996_0a2f_464e_ae0f_da39f5dbc525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_01fd0d1f_8c05_44e3_a8e9_5fa433c10d2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4de9a468_1632_46ae_b72d_10bcebaac23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8fd6496e_d983_41e8_86df_469abc9b15c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f23c2913_5f40_48ce_8772_4d4a6fec54ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bb0ad54a_4522_45aa_a199_a3054e149119() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_36e90961_0428_40c6_98a4_133c09896639() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_49e92902_ecb4_4501_a13d_716256d259ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8e72351a_070b_41dd_94a8_9358af98677f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6644ea3a_59f8_46d6_9bd9_6e1c71426910() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_53d5b3b7_2015_4ad3_b5ef_1d9e2f003905() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e283b54f_e42e_41ca_8888_08383aa04ecd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f6922215_5c0c_4407_9a6a_07f78df613a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_267e8666_03bf_4c97_a841_fba23e5f3040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3047c64b_5602_4c47_9ba2_2f57df36b75a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c74f959a_87d0_469a_baba_1e29c364d2ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5040b327_01c7_4a44_a9e5_98184c146baa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_01daed2a_23b1_499a_b705_5921e6b87d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1941b723_c509_4bda_8c44_7792c5e80745() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_06d90366_23f3_4fe0_99a9_12804f89945a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7de6c5c2_9aae_4b35_8cc2_c1fe954992b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1ce0146f_3fe1_4611_8673_0e71d8f8c389() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1a3836ca_9c47_4fba_aa74_84ce38699987() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8e2a441a_9bb0_4bae_abdf_c1dfaadf10b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f3801894_494c_4cf3_b4ed_18ef7fbce130() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c4b517fc_a496_41cb_b425_a49f07235a41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4c659fb7_13f5_4e50_9734_c92ae5c3c737() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6dfd85e1_f92b_43dd_b273_b0b2d9b4b7ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b1410c7d_e423_4d66_955a_ad0d1057dc47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6439eea6_3e10_4fb1_88bd_b536b7029012() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b5ec3c24_c897_423c_9e32_e883407e380d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_7fd45f81_1269_4b98_b332_d7c5271dbc0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bfaa431f_fff4_484a_858c_04d8aebc036a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_768ccb95_8e63_4503_b460_80bf946339d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0d06e089_cfcb_4146_808d_381509d71a82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_72ee2213_1804_4af5_84e1_f9e5efa5eb71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c709500a_cdcc_4977_9d86_ac6ac578029f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_fac00f35_8dc7_4ea8_bc00_916d4f0b32ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_20d00016_a9f6_4da4_a0fb_12b881d6993d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d942031e_53f6_44ac_a05c_ae9c372e5645() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_84482b97_4d0e_4389_801a_8a8e499f9727() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d942031e_53f6_44ac_a05c_ae9c372e5645() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_92d29a86_3a6a_4e21_8d16_b5ba56e1e810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_8d0eb2fb_4fea_4bd7_a6a5_c195728d9e1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_95d773e9_5e29_4683_b573_acf7c14da1cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d6362bbb_c45b_48b8_9201_bb24b55e267c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7fd45f81_1269_4b98_b332_d7c5271dbc0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4b600242_6994_4929_a1dc_bf035db62a40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_db3f6134_4f1b_40c3_b41b_9e01f756f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c4c43c80_4501_42cd_8d92_8a51c86165d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_47c13555_7891_42e5_b3a9_d0d75686e049() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f2ec5dee_cfd4_4e8c_a46f_bfc9e556e43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b32353cf_a72f_4e76_9ab6_9c79efd3674a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3f237a26_bd57_4ca5_b2ee_e8bb6642cb2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5012de6d_3796_4140_8041_a849a0e3de8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9ef771b0_de8c_414c_9890_478f7aa76d92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e281ef91_f065_4664_8744_9b890dae9c2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1c00c7dd_06b9_44fa_b286_ab8e503dfeaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e01177a7_5449_4f01_99ad_4331d8d18c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f0026b5b_9739_4c14_9a9c_c53b21826de4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6fd099b1_7fe3_44aa_9a6d_865ed72d2237() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_17f11aac_9fa5_4b45_88d8_45abfd2195be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_209530a3_f380_48a2_84c1_5ec6d4a10965() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_170464d2_7c6f_4641_ab45_ee1e93aefd84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_dae921a4_aef1_48f6_844c_a6ded0c3a021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3ae4a2a1_764b_4631_9df5_67e7126bea6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e877df89_22b3_431d_a34f_44700be5237d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2bd3b0c3_534d_4d43_b13f_149f091df9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_183075f1_61b3_4d78_b46d_0aa53156a193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bdd52173_74d3_4d93_9848_11feebbd3499() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9bf8e74b_399f_468a_9fe9_949b43503748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e604462b_37a5_4a46_8d0b_17e74c6d6a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cee968d7_597e_49e7_85d1_750d04bb7c68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b69e63d5_fd8d_4d2c_aa93_b83b622069a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8d643ba7_381c_4e1c_8bc5_ab3c9739953c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_fba299c4_b2ac_49e9_a7cb_ccb3838605d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c0c5b3b2_56c5_4983_a7e9_696b202dda16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1aaebd79_ce87_4348_be86_71e170ef3561() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_26048655_72ce_41be_8b15_e4bf348433f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_fd019daa_2241_4194_8a6a_b573026e7566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b775ffbb_eea3_4c89_9665_c3fdfef72498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fa990ef3_fc79_4af2_bb2c_4e0d1dedab8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_59be8ecb_cbec_412f_bf6a_8a7310faca29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_fd3f4bcb_26ce_4086_8a59_09d8d16906ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_69e97de1_51ad_4204_8a9c_6886fa84c250() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4d0df127_5ce9_4266_9462_01f809836673() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_223517f5_1076_4f41_8f8a_9f6fd2697bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bef6894d_6027_4a7e_b5a2_2fec3dcef1f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_56a7a0ce_dd25_4cb0_bc01_976423ea6f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ccd75a8b_6fbb_4485_868a_0ed0c19fc570() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_04c7acf2_4bd4_47e3_8ea5_b0d4a089fb4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f72a210d_3b4d_42c4_ac28_08482df780d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a5ac7375_feb5_49ae_89b5_fba99a412a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_96e72c4e_8fbe_4fc5_b64b_52be64623984() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b8a683b5_e72b_41b5_99d4_93f43d95668b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_139b6088_e76f_4f09_adc1_22009859e72d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_510e945e_d796_43c2_9430_1f65362467c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_98849b06_dc44_477d_8c0d_7285e8c5df02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a0fb3330_ea61_4dff_a2b0_14444981b831() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_569e4181_3ab3_47ea_8476_160dce8960d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c9926bc7_b0b6_49d7_8026_459ea06433eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_225366bf_5b96_403a_8c91_5303b3f0a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b8ccbd73_7acb_415f_abde_3e2e9a23dbdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6a95c035_0ebb_42f0_b245_4a0351ee33f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_69a157a0_054f_4246_81db_16a8bf7fb65d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5cc33b70_1fe8_4f73_a06b_7ebf1696d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6a4a886f_6578_403c_93f1_84c4672eba25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7b15e7ae_3964_438b_84ca_1cd606670ae0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_191a58ac_584a_427f_91be_79b5da0c542a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_07994110_eab1_4ff5_9cc6_2f3e285e46c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2d45d5bc_274d_4a44_a0b8_d2d6064f1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f6b55665_6268_4bc5_99de_aa1d36b4c2b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2394df99_c649_455b_8783_a3dbb7fbfdd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_97a65ee2_94a6_42e9_b552_764779f519da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_536861b4_159b_4b4a_9fc3_d4e421e41447() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f61e5e7a_ab2c_440a_9c81_49209b5d2586() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c709500a_cdcc_4977_9d86_ac6ac578029f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_66587cfd_e1dc_497a_9e81_0f71d4e1771c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d1d2112a_f7b1_4fd3_8150_58b393f5a54a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_773383ce_35b3_4cdc_810e_6a34cc3cc753() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1448abc6_740b_4016_95b3_9329fee0232f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f342a60e_bf7e_4f66_ac6b_9124048f8dee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c68aaf08_12c5_4f24_99da_26c69e2e2c8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_01daed2a_23b1_499a_b705_5921e6b87d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f90f85ac_4a26_4b8a_9e0e_830f6046881f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a59e8992_85cf_4c11_b7bf_a0f2e37b64b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d19d2d4e_e813_4a73_8479_490843bd8040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5d69e473_920a_4c89_853b_65ed286e091d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f0120469_3428_4ad0_8568_a2fc5d38c5be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5202199d_1983_4caa_9288_6d7bf28ede84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_fa92a027_b08d_4816_b24a_587a47312117() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_473b0d9f_8fb4_469f_bfd9_1f0cc4a17626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a5916754_3844_4b44_afa2_da745d867b97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c1595a06_7ab8_41d3_bd47_457e6634464b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a28b75ba_c563_42c9_af0b_18171ca42691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_d87bebf7_7a81_403e_aba2_b81bc6574425() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_944d49a8_02b1_48a1_9b18_fe2cc022ed53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c77195f8_ebdf_4a36_895b_3057f904edce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c37adbe0_87ab_4f00_aeaf_e17aaa9662ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_36033106_2f46_4260_ad1c_03a5520d4947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_808de8fe_3f23_4443_ac4d_fc3105e94f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a5d8fef2_8fc9_4431_a0ed_ae9b98d796d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a7de2efd_f9cf_4d51_a818_89fb23085a02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1e20ef2e_01d1_4164_a03a_1191929a3e30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c78fee96_73e0_4db9_a3bf_d6857dbad62a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_052b4dba_e3ca_4e00_b4d5_6be9817f6b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1cc7bb49_960a_4b1f_9a06_e5e520d360e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c74d4c71_ed19_40f7_be34_fdcccd5b420f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ba59dd74_936c_4159_b62a_55c975c0eb47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2d11cbb9_78bb_4a7f_aab1_8248d88fa918() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_bfd55b99_f54a_442f_99ed_b97875dcaf7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_56baa124_c9f6_4dab_b2f7_2aec96d3193b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_d7b045da_d9f7_4e91_953d_af3a33e6dab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7a06bd60_212e_4a68_91fc_7f275ae59c56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0c62e169_fe74_45f5_bceb_b815778458ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7316e54e_18c8_4569_97d5_f86b3e9a746c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1c00c7dd_06b9_44fa_b286_ab8e503dfeaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b4f5c254_a77d_404a_96ad_30e323a7a9bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d5002e31_70a0_4c89_a0fb_e76360923f90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_0de5f100_f142_49e1_9476_4c3364a3fd58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_18a85fc3_8120_4a24_a73a_e9fdd88f245f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_bb5eb97c_de5a_4499_800e_5b732050afc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e1022359_5a75_4059_b56a_d0e56c6c0624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7931051c_bbf0_437e_8703_b16041fb6779() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6162a2ad_fc6b_4f37_878d_784d5a5c9f28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_72ee2213_1804_4af5_84e1_f9e5efa5eb71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7eaf6c04_d2e1_4efd_9cfe_71254ec5ffed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6bfd7e19_5fa2_40b6_b628_3e090b7291f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_051f74d3_b144_4f02_bf50_2e7c3c8c5f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_044b8ed3_30a5_428c_ac24_b46fffabb859() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_532a10b0_cec4_4763_ac4a_b261b1b62b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_66e5af8a_7fa9_4c79_a34d_4b07a2319fab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_3de2730f_1b4a_42ff_b3ef_9a43265acc49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f45092d9_cf90_4996_b38d_069a7ed8534e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4d0df127_5ce9_4266_9462_01f809836673() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_32c232a4_3d23_49ba_9d27_db4f64d071ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_811209e7_7587_44e4_983a_6b833511fd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8be5dd20_2762_400d_aa63_e5e0d54529d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e5b72dcd_2315_4aa2_ad7f_5f27d2d2783e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_375b0a74_743c_43a4_b056_b30ec26c0833() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2d170e57_18b8_455e_bab4_fbabe087e20a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b32ef39a_f584_4043_b11f_2309c5498082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_24b01630_8ee1_4ac3_85d0_0ac201c45025() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_dc717223_ea69_4938_8e7c_0239f698bc19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_dba89110_4c34_43ef_be35_1eafbb821cf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_81e4d4d4_3e2e_43a3_849a_30554f84fe98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_603118ad_7f1e_429e_b190_a57cd3cd9c1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f3ce6c17_6f04_4243_b7c5_5ac407546999() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_312977d7_73af_441e_bd3a_c5b9c03b2995() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bdd8f061_b905_41e1_bee5_b84a78a7a4c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2307f200_7b9d_409d_bfc3_5e1ee5fbb42c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0b020b7e_e275_4d20_b6d8_9125997ef2a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_46036afe_8af1_40e8_b036_259b8aea2af8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a807cdfc_7618_4724_bf38_3a7799957127() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c1fa22c4_12d7_41a8_bdd5_32301d9bc213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4dd952ee_ba10_4cfe_82dc_320df8758a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_2c09e5c2_89cf_44ed_b026_2e6db2bb15f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3bb32a82_e88a_423f_8752_d5bede16ce18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_853ce822_49af_4acd_a17a_4eb9fccbe810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_dda4348e_a2ae_4938_abfd_05e21beae926() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_60e48cc8_9216_4b05_8da0_88779b42bbc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_aeb59689_b707_4be6_919c_92312e29b0fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_caaf0ce7_3934_4e1f_96d9_0f5f8ead05ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5c9a1566_b7db_40a9_b13e_669b7ae44c03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9599ba02_82d6_4346_a876_c227a78ffc3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_47d3d8e4_edd8_48eb_b966_f7d9e3cc6c3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d6ce0deb_2c91_4752_b825_54171ba34825() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_07753571_1f05_4f43_b77c_38ba10cb2748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b32353cf_a72f_4e76_9ab6_9c79efd3674a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1be72399_bc03_4d1f_8c12_27f584a3038f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b32353cf_a72f_4e76_9ab6_9c79efd3674a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8ccdf212_a716_4053_b957_444b9a984be2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f6b55665_6268_4bc5_99de_aa1d36b4c2b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_32ca1e4a_ec43_4da3_90b4_d13281645197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_06554558_90e9_4fd6_bb4d_c1caf305b2dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_84b71600_0e4a_4621_bb44_d32a07a8f3ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1427c1d6_782d_4b05_b52b_a3feffdaf731() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8d643ba7_381c_4e1c_8bc5_ab3c9739953c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_397c5131_d44c_421d_82ce_41f073d67a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_61a460aa_4cb5_420e_a103_daa836b5171a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9cc92481_af05_4cbe_9a43_1486dcbc880d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_73b6983c_2543_402f_8bb8_23d927a2b607() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f6bbd26b_ba87_4c71_8375_8acb37743d8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3bb32a82_e88a_423f_8752_d5bede16ce18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4859f171_7ea1_43f2_83f6_74fd5a24eac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_309df7ac_411c_4f97_a435_b1e2be258194() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_46350b48_041c_45aa_99a8_c5095b2663de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_94dfb269_b10a_4cde_b59d_30ccaa9c96d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f340ac67_cd16_4047_b2ab_8ff63c411e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ffc16cc8_8243_422c_a40d_3542f913b077() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d942031e_53f6_44ac_a05c_ae9c372e5645() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_913b48e9_55ba_4b44_86e6_d41caf8cf0f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_86096c58_7eb4_4e8b_8b04_2ab89ec27469() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_85c5a287_7416_4cbc_a082_412b2c34876c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a8b59008_4d65_480f_918d_5f9407376e5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_daf44f99_9943_41e4_92b0_c249918a7d15() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_203274bb_247f_4451_b6f7_1a71272cb6bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4cb815b3_f05d_48f0_9b54_f345867131df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bcfda23e_5ad3_4c58_9354_cf4d72843225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ff6a0a67_53b4_4557_9b11_eb5a1e67b2fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6fe31620_b3c7_4fb6_93ae_18f3f08e07b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f3801894_494c_4cf3_b4ed_18ef7fbce130() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_64f5f449_f73f_4afc_a4dc_ae9b146302df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_317a9483_f6ec_44bc_ac46_9a0714e83d5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b260f73f_feb4_4d60_aa6b_6df266b5b0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2c9bfbde_a620_4033_be8f_894bdab1251d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7fc7f2dc_82fd_48f8_bb5e_56f3478586bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4de69a91_1b80_4ecf_877a_33a945d26ea0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2c413238_a289_4823_9ebf_252e48e93606() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ab6e58ae_4bd3_42af_a269_64f4d87e3402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_6750f0c6_56eb_4d80_88a8_bcd3c806e46b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_853ce822_49af_4acd_a17a_4eb9fccbe810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5249e79b_44fc_4cdf_8a2b_7266b9cd2b5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_18a85fc3_8120_4a24_a73a_e9fdd88f245f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2d140101_281a_4dd5_9f23_c52dc81e9158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a843e849_ac24_4c8e_b757_e9904325af64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d4d6a753_107e_41cf_88eb_bc51ef9d22d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f7e62e76_756f_41e2_933a_ae84ab01d925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a1aa45a6_90b9_4513_8e4f_c8af874af8e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a6d1b07c_7cf7_494a_84ad_a82ebae78e4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bfa9ae79_b3a2_470e_84cd_7e5a4c32fc94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f61e5e7a_ab2c_440a_9c81_49209b5d2586() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8f6a9f67_0bce_4651_9a02_a7a05fc53beb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ca2b5c9c_43e0_4eb0_afe8_d1868508fb83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_31646a5e_4f64_4620_a22b_abe2278b73af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_06554558_90e9_4fd6_bb4d_c1caf305b2dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_849103f7_c9fe_416d_8af4_85c87ac0c72b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0bde64da_3232_4c64_b790_49751acaeee7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0ad501e3_8fc8_47c6_8112_2959fdfb28e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_64498bd9_c1f4_47b4_b339_11863a55195a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2e685dfa_8307_4f56_b5a2_0d2fb46f654f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_52a2a986_b76e_4783_9785_29d56cb7c452() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7647c534_b93e_4316_98db_fd4e1f4cdc5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_369e60a0_af82_4d0a_86f7_55ba600b1925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1deca706_fa97_4c2f_bd4b_8f1fd6de1df8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c35091d7_125b_4684_a002_a44c9470541b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ed2b3511_5803_472d_9001_33c01a509ca4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b304ca62_3625_4d30_8f2b_0934c8ec6007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8b275996_0a2f_464e_ae0f_da39f5dbc525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a0fb3330_ea61_4dff_a2b0_14444981b831() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d8b6710f_e58c_4d1c_ab1a_4ba079702e8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d895572a_8f7c_4baf_a0c2_977b04e24d77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_705da8d9_fe0a_4ab3_ac70_4ca8b5b7dbab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8282fa9f_6971_4f0c_a8c3_eb8a39428eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_4c090651_3256_46ef_a9e7_db98dc0c2fcf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a0eafbc1_7c87_4153_bfa1_5217c88b5546() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_ed793831_560c_47ff_8b5c_d644581d76e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_448425d9_9f33_4f11_be77_4f0f53cd19e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_75299203_d8ec_45fd_9d65_98fa20789412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b260f73f_feb4_4d60_aa6b_6df266b5b0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b7318be5_a3ce_499a_aa8d_ca54a9052b11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a2ce0981_0c79_4bbf_bc6f_a506728e3223() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2832bdb7_d979_4ad0_a753_dbbb06825b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_df968c45_8ec5_4db6_8e54_8011f3e72b2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a59e8992_85cf_4c11_b7bf_a0f2e37b64b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_a00aa613_cf58_4c4f_ae70_90dbe4025f13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4f626321_6ff3_4653_8108_50e98aba4bf1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_56baa124_c9f6_4dab_b2f7_2aec96d3193b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_852b511b_436a_4022_a581_c8361f358e31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_44ccd14a_0fd4_45b6_9c63_a6c5d1568ee3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d56122e9_63f9_4197_8474_4c9e4b996fea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2f87392d_edee_46ba_a65e_f365bc303b92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e1c53e7c_f314_4c4e_991d_cda53d5cf808() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e3907d6b_f302_492a_b8cb_c3eef367348f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f855d8a4_2502_4ef7_b458_2a4bd7b6fa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_72aeec1c_931c_4eee_9dda_2ad8094c3947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5650e95c_4c05_4860_aed8_463b30cf1704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b2675607_b1de_42ca_8bda_99ce18ab89c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_60fbb24f_18b4_4955_b2b1_34af2cc7d7a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e4e30e93_58be_48f2_8cbd_56e20d4d6d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e5b72dcd_2315_4aa2_ad7f_5f27d2d2783e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_060a2819_6e41_48ae_a317_f1a7ed7bb0f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9a231d2b_3db7_44b4_9db3_39aea15512a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_dc717223_ea69_4938_8e7c_0239f698bc19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8d9d167f_c1f4_4d6b_893b_36fe125a641a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4e16bb6e_0d62_4d67_9174_f9e4f9cde3f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f3e57c6b_d605_4916_96d9_10fff44e5d55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_032900fb_f504_4665_b0c9_e852c83ff25a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c74f959a_87d0_469a_baba_1e29c364d2ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_36e7a877_59ed_4f73_9534_6824ab5f5297() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_3df4f4e4_d5fa_4146_ad86_e93e7d550a6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7af265cb_4bae_4218_b9b9_4570657cc0f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f1fb57c2_bf89_4651_8957_a0100a5f746a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_298f69fb_8b14_42d4_a74e_58fb1dcde137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5c178846_f02c_4303_965d_5e5ccb02039d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7e98b08f_1db4_47b2_b8ef_0db04f663b52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_18aaebe0_36ab_4093_880a_be0a748ad44a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3a7410bf_29d0_4619_88b8_6b0669a66765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_01ef5233_485b_43a6_94f7_687626857894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f27df727_d098_4d3d_8809_ed944ea933b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0e134aeb_8605_442e_a9ce_bf043a43c81b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9ef771b0_de8c_414c_9890_478f7aa76d92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3fffa344_a071_4344_87e1_deb6fc3b73df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_44dfa3b4_1000_4150_885d_eb825f5a0047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_74d3af00_43c6_4091_9cfc_3c9d6bcb6835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_56a7a0ce_dd25_4cb0_bc01_976423ea6f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ebe40ab3_b9a0_4864_9d11_ff89eaabae78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_623015c7_9db2_4461_bb79_dc9d654b5b9a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1deca706_fa97_4c2f_bd4b_8f1fd6de1df8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_56c16a8e_e993_4c14_aac5_69b760be9be7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_623015c7_9db2_4461_bb79_dc9d654b5b9a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_7841591a_fd9f_4dea_9928_c5b797e1f5ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c202a3b5_d46d_49e8_824e_bc7c6c0e6a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_66e54364_3047_4d32_a8f8_6482c24c834d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_aee7f721_1e5e_4ce3_ba14_8fe754393be4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a3cf341a_a9a6_4de3_b69e_38d274b14fc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b7fdee48_75e4_48b3_9edd_a20c9d7c1196() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2d140101_281a_4dd5_9f23_c52dc81e9158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9135a7a4_d524_4af6_8a1e_d92455eb4a76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5202199d_1983_4caa_9288_6d7bf28ede84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_03f51d70_0c8b_4f04_b572_d50f9e37899b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_67d8d6bc_24fd_4303_9958_5e3913700460() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_225366bf_5b96_403a_8c91_5303b3f0a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3dbccc5e_5041_4443_b6f4_b4a487a8dd73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_3fffa344_a071_4344_87e1_deb6fc3b73df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bfae48c2_ba42_4e1b_b136_6fc24e38fe11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2d11cbb9_78bb_4a7f_aab1_8248d88fa918() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5f8b802f_062c_4c76_8517_9b46b7f012f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f10fbd61_dd53_4a7e_9d0c_afc3111088fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b1afa205_4c47_4eb3_a540_f0d2589e90ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_70201347_07a1_4e52_8ee8_92da805ced88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_03b66409_b1a1_43f9_952d_5bcf82d63a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_183075f1_61b3_4d78_b46d_0aa53156a193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e8cbb386_a17f_47b2_9f6f_83f270e29455() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5078faf3_65e9_411a_a828_a13a6358384c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_54181e4c_bd59_474a_8bab_a812bb9a5280() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e07f6abd_0585_448c_86ca_40c0f3c85407() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_25da0985_6082_4dda_a8ef_9f298114257a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e4a779bb_53b0_4792_94c7_dabea65d6c7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_deb29c8a_fbb9_4e87_9f95_4191a41fa7e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0585d13e_2b19_44b3_859f_85a7730e49e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e95d1062_4578_4eaa_b67f_97442ed3ffc2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c54e8b14_6838_471f_b4b3_5e22f9cff441() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_60e48cc8_9216_4b05_8da0_88779b42bbc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_135a55cd_3659_4de7_bf7b_a477461f0f11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6b100c66_d328_45b8_99bb_50c341be8b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8b275996_0a2f_464e_ae0f_da39f5dbc525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2ada1a99_15f7_4df0_8c77_30a4e124d98b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2f98032f_7f96_4e3d_958e_c05f688aa5a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_559c1fcd_3154_48b9_a1dc_f9e6f37f3771() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_46036afe_8af1_40e8_b036_259b8aea2af8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bd315b8b_e503_4e21_b890_acc9c6c2a332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_97d592e7_754b_45e6_b7a0_21d4e1b2de17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8db69925_0565_48ad_8b01_2d0d610f4a72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8e8b4672_715b_4a7d_afab_ee9942726535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0ed7e1ce_d7bb_481a_8305_85e2ad5eb766() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_25f9dd09_24b6_4636_b217_8049165370f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_30beac97_7803_4da4_bf69_0e37f9feec91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_41f96a3f_f215_4bad_b483_9d3d75e1db12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_79749e93_7379_4d7d_974a_c78d5d7968f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_8183c81c_43e6_4aec_90af_50f08a358870() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6d834741_efb9_4d5c_adf5_f1b35907d7ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d752727a_8cf0_4a59_a15a_401ab6b1d2e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a7339ccb_9ed2_4d86_829a_88eb84067dc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_60950d2d_9a48_4725_bd69_42559df4170f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c1fa22c4_12d7_41a8_bdd5_32301d9bc213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7cd6f875_20f4_41c2_bbd4_068ec0160c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_63034043_97d5_4c57_b61a_afa41faefcec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b76f81c5_4161_4471_a3c2_e33feaaeaf52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_059c9122_c206_4480_b305_52ad4d1e568a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c19a0687_9615_4385_a686_5d52bb859bd2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3688d2d3_2cb3_4a87_8062_4c4e7f9863ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6f259ef0_82c8_4a3d_9a54_e0492f3fd1f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3ae4a2a1_764b_4631_9df5_67e7126bea6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7502e1d2_2945_4067_9b52_446ae6db0150() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d1e6a867_619d_45dc_81b6_f3f5f8fa01c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3bb32a82_e88a_423f_8752_d5bede16ce18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d5383aea_5b3c_4a33_a7ec_8780a59ebddb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1109a239_5947_4f39_9bd4_c79f0f72a55c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8ce477b9_5406_4a3b_a431_7a9f6f03d51e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c78fee96_73e0_4db9_a3bf_d6857dbad62a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9a7e3ef2_5199_4161_9432_fb2f3f0424af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0f31f959_6a22_483e_82a3_07a9c9d8c5b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2267bd43_5b1b_4e37_9989_818e70f0f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f53f1f82_3808_482e_9a9d_6fbeccdb1b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d9b86c6a_b186_401d_88ac_5646e300aa05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bfae48c2_ba42_4e1b_b136_6fc24e38fe11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1a3836ca_9c47_4fba_aa74_84ce38699987() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_776cd8d1_e285_49b9_9990_8dd13e35085b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_72ba1603_7291_4e4e_b19a_2fc10ccabece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_52f77a55_6d26_4fad_9a9b_bccf78bf53aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a5d8b8f8_5ab8_460b_8d9c_266645d921c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f2e2bb16_4a99_431a_9d9f_684c9006a3ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_913b48e9_55ba_4b44_86e6_d41caf8cf0f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6a95c035_0ebb_42f0_b245_4a0351ee33f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_92744e7e_c3e2_414d_b930_2d0d765ac789() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_07994110_eab1_4ff5_9cc6_2f3e285e46c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cc0f70a3_dbdc_4dc2_a1ba_d353fe1a6173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9af9967c_93ee_4283_965e_b140d0d2556c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a73b42f5_1f0e_4cb6_98fc_fd0115d6743c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ce9d2271_283b_4be6_b84f_1faaed0e968f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8eaf8a0f_4a92_48bf_8645_ad90823464d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7252ce4e_6fae_4894_8acf_8ceac7dd73f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_dc0b4f95_5ec2_4c8e_a94e_348f9b206903() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d4d6a753_107e_41cf_88eb_bc51ef9d22d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a55ab954_ed2b_4c8b_bb8d_189269c24c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_fb9a89e5_7b24_4ec6_8bfb_cfad7cf35158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_473b0d9f_8fb4_469f_bfd9_1f0cc4a17626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e3907d6b_f302_492a_b8cb_c3eef367348f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_9bf8e74b_399f_468a_9fe9_949b43503748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d93a6b7e_025f_4c89_b301_8b5c79387a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_31dab31d_86a6_4ab6_8be3_3906d04eac1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_07145161_86c8_438e_a97b_1142af050e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_79887937_3b75_48a8_bbc6_844389c81975() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_85440e13_530b_4b02_bfd6_e24930316463() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e0b8ab0e_88b3_48c0_ade1_e54af831c5cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_731aaaa0_aa7e_4355_9070_9b935d911066() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_65fb5930_1bf5_4bed_9793_448cb7212c99() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_9621e535_45be_44bc_baa0_5566b7f86341() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6604279a_b9ff_4735_869c_33117449833d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9ac84fde_82a8_4c89_9faa_ee1f55d5a2da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_35196c56_0140_4661_ac4d_fb3786f726ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3f3398ad_420d_41ad_a999_ba7e79eb5244() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7a45af8a_4fdd_4244_83aa_254d48ff36bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_feb814e5_d0c5_4776_a9cc_22ff0a67d46d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f6b55665_6268_4bc5_99de_aa1d36b4c2b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b049245f_4edc_428d_bc4f_04b023368bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fba299c4_b2ac_49e9_a7cb_ccb3838605d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_26892abd_f0ea_447c_b4e5_b800aa7d78f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_488d8253_66e0_4b27_927c_cea259b28db8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c814dc33_e699_4b3b_b236_701ef8ee3bcb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_152fdaed_1509_445f_9780_341493f5aaab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a690cd64_1da9_4938_944e_5a0db5566ef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_03d7373d_f7db_45e8_bdff_aba6423a7d05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_07a5938c_c62f_4fd7_9904_33aea4c86099() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_448425d9_9f33_4f11_be77_4f0f53cd19e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_aec2d1d5_c090_41f3_9369_dce8eea327a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ab6e58ae_4bd3_42af_a269_64f4d87e3402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b51dfa66_eee9_48f5_86c1_6e20885ffb3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_34fa767a_dc6e_4d9a_bbd8_a5f62b27b3c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_388bee55_deb3_45de_9f82_cb2387b70446() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1397a06e_d440_4d2a_9763_251174b880cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f78afa5b_240c_4d0d_ba22_fec3bcef6036() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c1ec123f_0f0e_4425_a81f_8ddae93d361c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e239046b_b99d_471d_a061_d255e9bd898a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c0829858_1dbb_4441_992c_d4c2d7eba871() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a9f7d01a_1de8_4666_98f4_69a4a3e361a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_8510befa_3411_4840_b134_d09162f3d1e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_90cf6754_6402_4df4_8280_1a5945e38e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_90490bc1_5755_4419_87cf_38277424680a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1ce0146f_3fe1_4611_8673_0e71d8f8c389() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2d170e57_18b8_455e_bab4_fbabe087e20a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5249e79b_44fc_4cdf_8a2b_7266b9cd2b5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_04111dba_38a1_409c_90ce_ccf200b12b2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9a0e23ea_85c8_4de4_bef1_c7102c099819() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1083d0b4_5891_47a5_84d5_5e47bbccf1a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5aa89345_cc9d_4dc2_b311_a6a8bb5d793b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0ddbdfcd_5123_43d4_8552_0d337030663f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9e835908_49d1_442d_ab49_72330617fd7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_551a37ff_c5b6_4662_877d_7b32232124b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_750e5d03_578a_4863_8d10_fc3283079309() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b1410c7d_e423_4d66_955a_ad0d1057dc47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3b1605a3_afac_4d4b_82a1_9599aeca969d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cdcedb1b_8606_43f7_aeed_037091503434() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b46d2bf8_ba4c_4258_ba39_025ac1e46eb1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2f294516_9ca3_465f_aab7_e84f3e11c503() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_44ccd14a_0fd4_45b6_9c63_a6c5d1568ee3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_18971e1d_253f_4b42_ae7f_7ce2da6729a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_26f33b0f_0228_4338_999a_5195e138199a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7fd33a47_9e3a_4436_bae1_764501d29429() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_109f4d24_e22d_4a83_931b_536903b90cd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8f6a9f67_0bce_4651_9a02_a7a05fc53beb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_bbec2e79_00ba_487a_982b_36f6982072c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_28e4b7d5_4042_4bbd_9382_81892b881756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e28074bd_1d9f_4219_95e2_64c0b6d16b5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_712741bc_a35d_4d4e_8538_ed682dbb3c3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2609348b_1fd0_4662_9467_36ce54be2572() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b9199286_65dc_44ae_a835_54488626a6ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_aa3a7bb0_0032_4913_b9db_88421ec90d97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_180d2dd0_f405_442e_967f_a91c3a14973e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b1410c7d_e423_4d66_955a_ad0d1057dc47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c30aa0e0_3cb0_4cff_b1e9_0221d6cdf9a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2f294516_9ca3_465f_aab7_e84f3e11c503() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_26892abd_f0ea_447c_b4e5_b800aa7d78f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8e8b4672_715b_4a7d_afab_ee9942726535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0477ab11_0f6d_4536_9a94_fcc2c0849885() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b2352be0_2d83_4feb_a650_f5d2f4e57d56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6bfd7e19_5fa2_40b6_b628_3e090b7291f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2f294516_9ca3_465f_aab7_e84f3e11c503() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_032900fb_f504_4665_b0c9_e852c83ff25a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_551a37ff_c5b6_4662_877d_7b32232124b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_84482b97_4d0e_4389_801a_8a8e499f9727() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_568a7e62_1f76_4094_ae91_53516189679f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3cdc3c22_9d91_436c_8204_f90abb946706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_17e3161e_e269_41c8_a881_e19c78a26c63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_8adefca8_7981_4b19_8ddf_d7fb06fc31b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_26048655_72ce_41be_8b15_e4bf348433f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c7dfa0c3_8db2_495f_a5db_4d2edf2842b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_acf2bc4c_cc90_400a_ae3e_c5dafaf03b68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1cc7bb49_960a_4b1f_9a06_e5e520d360e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_94dfb269_b10a_4cde_b59d_30ccaa9c96d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5a737877_dc8c_446a_b475_19eeae5e1e55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_095c31c0_2037_4562_a2f2_e2ed5aa038e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_46a8feae_517a_4b60_95f3_27f1502efd54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e27ae4c0_e5b1_4df7_8613_117ec091e021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e19eae6b_dc78_45bd_95f6_86bbbd7ad5ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2bd3b8cd_4a44_49c7_8e3a_2251035b70a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2bb00773_6854_4293_9e1e_46d04caf0e1f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_75a7d86a_7f78_4603_90e9_5d8c0fbf9e11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5e7ec1cf_6737_49f0_afe8_6c1d2270b060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_86ab6a0f_99eb_43e5_8c2b_807e948dfd60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f90db12c_06c6_4dbd_ae69_afdf96f69b14() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c19a0687_9615_4385_a686_5d52bb859bd2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_7b577615_0e7d_4243_a105_1ea2572bd540() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8ef717ec_79c1_442c_a2c0_b93be262dfaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5cb9611d_55aa_43d1_9424_7185c7d6982e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_dda3c9c9_f045_4712_8539_42db7896205c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_56baa124_c9f6_4dab_b2f7_2aec96d3193b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_84b71600_0e4a_4621_bb44_d32a07a8f3ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c25bb9b6_a280_4e18_95b9_7eb98d4e40fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_59590d27_9ea9_44d5_ad25_e2071a38655a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_57eb73b0_393b_4f32_871b_a7237c99bde1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f5a83bc0_c8ab_494a_82ba_f6673deeddaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c698500e_0c49_4cc7_89ab_e23b4b9556b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ff2367de_102f_406d_a914_389db5fd9535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3043bcb4_364d_40cd_9f39_be2317e8449c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8ce477b9_5406_4a3b_a431_7a9f6f03d51e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0724312a_b2d5_4d2c_b448_6e5f41191310() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4ec961e0_cc20_4405_8045_6e44d80b007c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3a85be31_69e1_4628_b68f_062f88e6a9bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b7318be5_a3ce_499a_aa8d_ca54a9052b11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f90f85ac_4a26_4b8a_9e0e_830f6046881f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_25a21414_bc5d_47bf_b579_717676a42a0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_508bc443_be3d_4a01_8b05_2255086c5baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_411587a2_aa72_4864_a871_312abd9e3cba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7a425cee_f8e9_4d1b_8009_5245ce36bb31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4c659fb7_13f5_4e50_9734_c92ae5c3c737() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ddc440f4_7e2c_4aa1_bf8b_42b7ec59fcd6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e27ae4c0_e5b1_4df7_8613_117ec091e021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2bd3b8cd_4a44_49c7_8e3a_2251035b70a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cc8bd1ee_220d_4959_ad08_7cc4d2698e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_66587cfd_e1dc_497a_9e81_0f71d4e1771c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_8ac97d62_10ef_48e6_b151_60ae21058c94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_77911dd4_98d6_4508_b6d5_4d4928cff68a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e8320f90_7d06_4fcf_9127_fe995f264947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5e7ec1cf_6737_49f0_afe8_6c1d2270b060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_82d80b69_074b_4d74_a180_aa3ac9a22f5a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a6071f27_0faa_44c1_a543_c9fff15dc0d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a56d4207_36db_4346_8e63_d05b27745931() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_327811e1_3a2b_45af_8225_c5cc17620a81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_01ef5233_485b_43a6_94f7_687626857894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f61f94e8_882f_4af0_938c_4748292a886d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4f291299_10ae_4226_a0a9_79aa6f55427d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c809e6b5_a8f6_44c3_9cac_b7f83ca9abd2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fdaf3392_34e1_4463_aefb_80d33bb68e4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_54eacfbc_94c7_4704_83cf_32f232933c9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_27244f78_2e86_4d00_98fc_db0362fc70b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_1edf4c22_4659_4acf_97aa_92d8c74fc401() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d6362bbb_c45b_48b8_9201_bb24b55e267c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7f2c7355_252f_4ae7_a27b_c453357e2ae4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_25a21414_bc5d_47bf_b579_717676a42a0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_762081c7_71ba_4857_bddd_1ab5607e3459() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f8625fff_7419_4fc6_940b_fe463cc08b05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_77597bec_75ef_451d_ab1d_94d18ad9332a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d047fc3b_fd72_4a3d_b515_15dcb89b9e4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_01e25675_51fe_47fd_875d_e96271c36e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b2675607_b1de_42ca_8bda_99ce18ab89c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8b87fe58_f430_4a0c_b1cd_de5c19751dd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8492da1e_dc07_4d30_aaac_d03d44929691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3de2730f_1b4a_42ff_b3ef_9a43265acc49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0ad501e3_8fc8_47c6_8112_2959fdfb28e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_9a3637ec_7610_422e_b27d_6dcb5106c849() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_054160e4_733b_4d82_b02d_ffafbe56fead() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_752d2c97_2c2b_4068_90ff_1746d41eaef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_03f51d70_0c8b_4f04_b572_d50f9e37899b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_290ee586_c2e7_4809_8a2d_b0b592bc780c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_89c34b96_a14b_4af6_8a6e_789154576bc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5959b4a9_aecc_41dd_94e2_ac57b3fabf32() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a5d8b8f8_5ab8_460b_8d9c_266645d921c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_07a5938c_c62f_4fd7_9904_33aea4c86099() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5f4e1fa8_6723_4713_a258_71a4d4bdeccb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_183075f1_61b3_4d78_b46d_0aa53156a193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_79887937_3b75_48a8_bbc6_844389c81975() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f8dab4a4_4413_4629_b71c_3c17f03e127d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ffb6fda3_2d5a_46b8_9838_3c544f92ef9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_729d1a6c_edda_44e2_b923_89b45c9ca179() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1edf4c22_4659_4acf_97aa_92d8c74fc401() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cb50fbbc_46b6_4186_98f4_51bf54b9219f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2307f200_7b9d_409d_bfc3_5e1ee5fbb42c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_d895572a_8f7c_4baf_a0c2_977b04e24d77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4e16bb6e_0d62_4d67_9174_f9e4f9cde3f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b415ad0f_6906_469a_971a_8a35734beda8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ca388a8e_5846_462c_bbf9_566b48f6978b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bfaa431f_fff4_484a_858c_04d8aebc036a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_57eb73b0_393b_4f32_871b_a7237c99bde1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_7a45af8a_4fdd_4244_83aa_254d48ff36bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_01fd0d1f_8c05_44e3_a8e9_5fa433c10d2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_480cda45_1d9e_4766_84ea_cae975e39ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_63c46383_c4a3_4d23_836f_6fcd6b3b61ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_54fe99eb_2403_4857_87ca_633fad6f907e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d5505315_9663_4443_a270_b8cd7ccc961b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_372bdf54_6e55_4022_ae83_a9ee9fbd0a78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_82687b28_053e_4cbb_bd8e_d466d0a0fb41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_85440e13_530b_4b02_bfd6_e24930316463() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1edf4c22_4659_4acf_97aa_92d8c74fc401() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a79fdd1d_2e02_4e29_a68f_33da15dc40ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9621e535_45be_44bc_baa0_5566b7f86341() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_2201305e_54ac_4882_b4c9_6738b74739e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a85c5abe_f532_4ac5_9e86_106be76e99e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d418e39f_f8e4_4383_bd08_f65e1f63258a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bdb227d3_74a3_464e_8582_aeaa4f0b8f55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8f2b4cc4_ea90_42b0_bfd6_af26f150de03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b3d6d61e_3a30_4377_98ac_4f758fc3f647() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_aeb59689_b707_4be6_919c_92312e29b0fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4e6862bf_b055_49a9_b0c2_af050a47df9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2e685dfa_8307_4f56_b5a2_0d2fb46f654f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_be7ba40f_de0c_46d8_a157_ba733c3eb8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_afecc466_176f_4604_bc47_957303a40ac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_39273f84_d873_4ea9_ab3a_bf51f2424a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b837ba88_0c9a_4a4c_abe9_d3955d9f7670() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_845db240_3cfb_4ebc_a1dd_96d1da2c2092() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5a737877_dc8c_446a_b475_19eeae5e1e55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_03b66409_b1a1_43f9_952d_5bcf82d63a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0e134aeb_8605_442e_a9ce_bf043a43c81b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2f4c8238_cefd_4d65_b5a1_5b32aaa090a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1397a06e_d440_4d2a_9763_251174b880cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5078faf3_65e9_411a_a828_a13a6358384c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1f3f023c_03a6_489c_b07b_3fcf7f0618b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d5505315_9663_4443_a270_b8cd7ccc961b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3c89a5f6_da79_4175_9b0e_95f78c683f94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e1f96444_b43a_4bda_b27b_de2b15402ed2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_59f424cb_6bd8_4840_b9f0_f48466ba8d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_d895572a_8f7c_4baf_a0c2_977b04e24d77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f9b1b82d_3349_465e_bb61_9f4a578abe2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_01daed2a_23b1_499a_b705_5921e6b87d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a28b75ba_c563_42c9_af0b_18171ca42691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f6fcbf94_7967_4e0b_a3eb_01c7569376cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_845db240_3cfb_4ebc_a1dd_96d1da2c2092() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b4f0449d_e172_43ca_9b62_57a1562dc209() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_593c5d68_00bc_4524_8c99_d93ae5ea8cbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9a094b3f_0ca4_4f27_9f33_a0f1134dadf9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9013a0a6_d582_4695_b1c9_35e90c6ed73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_49af8968_b9ec_4990_9bb6_235514e7a633() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7559a675_cf04_4529_b0dc_10f9fe98979b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_40dd1577_3403_446d_a3b1_860f3e25bf55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_965d5374_8aee_45ee_8c97_05773fa09dbc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2fb84282_b9c5_4fad_bdb8_11b9dd34aca2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_49f84c84_03aa_4765_b838_641bb9a9ad4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_7252ce4e_6fae_4894_8acf_8ceac7dd73f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_327811e1_3a2b_45af_8225_c5cc17620a81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1c635c62_abd5_4b90_a13b_83b3a3c0b0ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_62ce21d5_1a84_42a1_a284_c08dbd5bf52d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_64498bd9_c1f4_47b4_b339_11863a55195a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b5df5cbf_092c_49dc_aa19_7d01a8f367ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e33b6eb5_f3bd_4cf3_90cd_90ee5f59c96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8aa7fa3f_83cd_4d89_bfe7_bfdcedc77428() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_af007427_34b4_4193_b0fd_5e222e1aa421() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_06554558_90e9_4fd6_bb4d_c1caf305b2dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e281ef91_f065_4664_8744_9b890dae9c2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_56d2d96a_f882_4b84_9860_f46d3b00bdf7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7a06bd60_212e_4a68_91fc_7f275ae59c56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3580c761_a578_4001_bcfb_44c56e104cbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3a7410bf_29d0_4619_88b8_6b0669a66765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4de69a91_1b80_4ecf_877a_33a945d26ea0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0186b02e_1193_4c85_910b_c020cb41367f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_807db54d_a24f_40d2_aad6_73b390954cb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a31fde65_1936_4a78_ae43_5037eaf66661() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f3e57c6b_d605_4916_96d9_10fff44e5d55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_8fd35ce5_7933_421a_a8b3_6550e24cb7e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9c361c82_823a_4bc1_b544_4f96962cd073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_0585d13e_2b19_44b3_859f_85a7730e49e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9013a0a6_d582_4695_b1c9_35e90c6ed73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b3d3190f_ee3c_4626_8c7a_71b57cf59270() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_79fa659c_0c71_45c6_aca4_cd8e7ebf3967() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2f2798ef_f2b9_4772_b35a_74397854eb77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_97d592e7_754b_45e6_b7a0_21d4e1b2de17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_11bfefd2_9db0_4af1_a70f_7118520c5b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1503155d_ac46_4240_a605_9f935c4d4949() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5fcfbb0a_0926_4f1a_b57a_b7425492b4a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_844acbbe_17c1_47cc_be1c_c9d2a43bd9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_bfcff9f0_0d21_4402_af88_fa4ea3f9a78b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_60b4fdba_7541_4140_92d6_4d17402d4dd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ddc440f4_7e2c_4aa1_bf8b_42b7ec59fcd6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_809af517_ac01_4279_aa38_a5e585bf05ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5e307478_a7df_4414_b169_6c0c62dda5f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_77bad787_453a_4ba3_bcda_75156c64be4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c299139a_8973_4505_bde2_844a952eda63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7318e19b_6930_4c32_8fcb_e65cc418e1c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7502e1d2_2945_4067_9b52_446ae6db0150() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_77bad787_453a_4ba3_bcda_75156c64be4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bd73a1d1_34eb_40d0_aadb_21caf1e222d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_14382c43_b9b1_44aa_92fd_e2d8bf052f33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f8625fff_7419_4fc6_940b_fe463cc08b05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ff72de95_9fd1_4e28_8090_e5ec991916a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b260f73f_feb4_4d60_aa6b_6df266b5b0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_58d6fee2_529b_48a0_bd6a_373ca8c281f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c6cf6f76_423f_4e55_b814_7658e3623cbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bad24fb8_8769_4537_b52d_fe680bef5384() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7a65b6a9_33d9_418b_a1d2_8915591b57ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_34590fc7_34f0_44e3_825f_4b03affaa332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ed793831_560c_47ff_8b5c_d644581d76e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_480cda45_1d9e_4766_84ea_cae975e39ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0fd0fc34_2510_4255_b52a_139776c88cc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_df1ac9c6_86f0_4104_9354_68a1049dd643() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a5ac7375_feb5_49ae_89b5_fba99a412a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_57eb73b0_393b_4f32_871b_a7237c99bde1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c1fa22c4_12d7_41a8_bdd5_32301d9bc213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2201305e_54ac_4882_b4c9_6738b74739e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b2200ec4_dd37_4f2b_92dc_09f2831ff1d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_067a73d4_5525_4381_9688_b72a304c054f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3225a4d6_cad7_4aa4_add5_617c313c5840() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6644ea3a_59f8_46d6_9bd9_6e1c71426910() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_886118d3_3a18_4d27_8af5_323dfa75476d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_09fe211c_1033_4315_b8d0_8f0bb870ed27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_31fff2a5_e84e_47e6_afb7_6a35a66992e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4ebed85b_b770_44a8_a578_a1760250fb8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_46350b48_041c_45aa_99a8_c5095b2663de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7de6c5c2_9aae_4b35_8cc2_c1fe954992b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_324f53d1_14c1_421e_bd3e_2c18f06209ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_889a9697_b401_441b_bb58_e8b190370501() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_309df7ac_411c_4f97_a435_b1e2be258194() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e694a6d2_6ba7_4408_9e91_05ce3345169c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_889a9697_b401_441b_bb58_e8b190370501() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_eaf8d209_6cb8_4633_9182_d31e40ae72ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_891dd467_e561_47f3_a362_bfd8533fa19e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_fdd9391c_8452_4126_a7df_3efb3cfe47ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4e6862bf_b055_49a9_b0c2_af050a47df9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bfb1e452_9fc2_4bf5_b022_056ae3282bae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ad938b5c_5d05_4bd7_b33d_e5bc833456a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2832bdb7_d979_4ad0_a753_dbbb06825b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e21bfc8f_f584_4787_b41a_6cfd8f853448() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_41d5bb15_7ac2_42ff_8a5e_56b309208350() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3309557d_8568_4c20_9deb_e46e610469f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8ae50af9_3f9a_4fd1_8a5d_c754d72c3dfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ad9dec16_d3c9_4731_8dc5_dee2b8f1a765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_77597bec_75ef_451d_ab1d_94d18ad9332a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e861a9c8_d352_4044_ba99_c5199317b697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a6b2d822_4074_47c8_aa46_e5751e6e5367() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_170464d2_7c6f_4641_ab45_ee1e93aefd84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b6ee810a_ec23_4e5f_b925_92806ea549a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_135a55cd_3659_4de7_bf7b_a477461f0f11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_39851f32_c6b5_41ac_83cd_eda434a3d443() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7d2d09de_ef3c_4564_87cb_895952dc1ea9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2bdab585_2cee_459c_a708_e4d872b5bd91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e4479473_9f59_4368_8f7e_0689d3c1a59c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f2616ad1_81fc_4f13_afdf_817c416647bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0d7c39b8_08fa_4ad3_8989_7e028f726525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9d437de3_0b03_4e8f_a6bf_72f0a5410178() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b2200ec4_dd37_4f2b_92dc_09f2831ff1d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_96a31b87_6dbd_466f_bcb3_5fcf77bbff29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1f9791dd_a7b1_4cd8_9bb9_1a854d99c7bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_6c5faae5_83a5_4cd4_a8d1_518abaa7ebf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fa92a027_b08d_4816_b24a_587a47312117() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_22a70d35_95a4_43ef_8255_3f4b3f5177a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bdb227d3_74a3_464e_8582_aeaa4f0b8f55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_1d921567_2c1e_4fcb_b868_e9c06dadd7d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d4d85f3f_93d9_4b81_9ffc_70f4637b31ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_caaf88b6_5705_427e_9eab_a51158e981b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_42653d31_cad8_4f4f_8967_8df6222ceff5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_007207d0_da65_4df0_b3f9_b90ed930723b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8f6a9f67_0bce_4651_9a02_a7a05fc53beb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_25da0985_6082_4dda_a8ef_9f298114257a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d9f98e45_d8d2_47e8_8d07_f4ea8df36565() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ce67a044_2962_4576_9f28_69d9a13044c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d3f58846_9478_4ae3_8c80_4d1adb50b902() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_da901ebf_0c33_44f5_a5f7_8e5fac489aaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_75905ef1_177f_4199_bb8c_36561676f6dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d638c72b_1e03_4cf8_ba16_956ae7cade9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_54432884_1fbb_4dc7_9098_156fe308cb89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_3d1e0f67_e0ab_434f_94d4_b05285ed6340() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f8f4df55_837d_4d96_9088_842886efb575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_9f55e98b_5266_445c_a075_24f23b4c3003() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1fcd229d_a37d_4f6a_b02f_fd276ae780c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_64f5f449_f73f_4afc_a4dc_ae9b146302df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_85f7a122_2b55_4b74_a7d9_f9014e02b781() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_052b4dba_e3ca_4e00_b4d5_6be9817f6b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_180d2dd0_f405_442e_967f_a91c3a14973e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a6b2d822_4074_47c8_aa46_e5751e6e5367() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_83daa340_3c4f_4295_89bd_ee65dbce5d1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_8fae3310_3c77_42bd_9e99_ebaa396a1621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6b100c66_d328_45b8_99bb_50c341be8b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6b6b1cb4_ccc6_4034_b6cb_166fac56dde5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_63034043_97d5_4c57_b61a_afa41faefcec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f418603a_7d00_4a59_bfb0_78027c4663ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5a53267b_b35a_4e36_8d3f_b04bbeebd3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3944016a_7e56_4f7c_9b1f_0c882c66c541() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_035cdcf6_122f_4479_9cdf_1ff527286b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f0120469_3428_4ad0_8568_a2fc5d38c5be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_75d3a7d3_886b_406a_8c44_7428e82516b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_07994110_eab1_4ff5_9cc6_2f3e285e46c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_07145161_86c8_438e_a97b_1142af050e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e239046b_b99d_471d_a061_d255e9bd898a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b5bd1b2c_706b_482b_9a5e_b4d9e37820e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b9fa3c39_7a59_49b5_8b5c_bef3affacb92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_77597bec_75ef_451d_ab1d_94d18ad9332a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a3cf341a_a9a6_4de3_b69e_38d274b14fc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c7d189c4_4fd3_4911_8d2d_44fa165fe888() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0caa00d1_463b_4a6e_870c_17ea4fb46939() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b5bd1b2c_706b_482b_9a5e_b4d9e37820e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_156f35f7_09d5_484a_ba08_b81f63161ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c1ec123f_0f0e_4425_a81f_8ddae93d361c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_21fa7f1c_2810_4ec7_9fd2_ebfde3d82b53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b7b82154_ea6a_4b8b_9ea8_085ca56b9fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_288ee5fa_2143_47a5_8d7f_cf7d7be1e2e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_67dbce46_19d3_48ce_9b5b_7e3a27efdaf6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_3c89a5f6_da79_4175_9b0e_95f78c683f94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e33b6eb5_f3bd_4cf3_90cd_90ee5f59c96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_34590fc7_34f0_44e3_825f_4b03affaa332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_481b1d47_bb73_4cd0_9dbf_39472bfc08a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_86be6dc6_65fd_4468_a60a_e3e47711a13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ce9d2271_283b_4be6_b84f_1faaed0e968f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a5ac7375_feb5_49ae_89b5_fba99a412a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9b53b0fc_c9e9_43ae_ac2b_bc740907cb24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c37adbe0_87ab_4f00_aeaf_e17aaa9662ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_491b3d0c_2fb4_47bd_8ba3_1136df96358a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_98b824f3_c9dc_418f_87da_369ec771253f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_de802b87_64e2_43ea_b38c_fc2cf55a75c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e1e8cdeb_3d02_48a8_8da8_470ef9f1c571() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c23a4b41_c833_4c99_845e_dfc047045f7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_77bae181_7139_44a1_b5aa_713274d429c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9f1c5893_d8c5_4daf_9d6c_b4b96f56d998() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_231c0056_4985_4a15_908e_ad76858eee3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b8a683b5_e72b_41b5_99d4_93f43d95668b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3580c761_a578_4001_bcfb_44c56e104cbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_7f9d96ae_0301_4b47_a5d7_ea8993ab4d66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_99cddae5_d688_4272_bd5f_b84f2fa15b10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_eeced3cd_7e38_47db_befc_8ae1f8e2d400() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ffc16cc8_8243_422c_a40d_3542f913b077() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_36e90961_0428_40c6_98a4_133c09896639() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_aac74a22_a912_48de_8ef6_dcf5559d5e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_886118d3_3a18_4d27_8af5_323dfa75476d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_170464d2_7c6f_4641_ab45_ee1e93aefd84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_06269574_26e7_4e24_b41c_195e989e8c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b227a9d8_feed_470d_8c3d_0d276d3f2e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4fed3a50_e8e4_4545_95b2_223bde220038() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b8ccbd73_7acb_415f_abde_3e2e9a23dbdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0dc8277e_e4ae_41cb_96e5_4ee26d70ceba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_173d6660_6406_4eae_914b_22d9f984852f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_68f98558_29eb_40c2_b40f_1323f09db799() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0741d2de_abad_49a9_b292_f15b6061ee8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_23b82137_1379_4052_b6dc_8c1d95128ff1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_85c5a287_7416_4cbc_a082_412b2c34876c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4dd952ee_ba10_4cfe_82dc_320df8758a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c68577a7_5e82_448b_931a_af85ee2949cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_41d5bb15_7ac2_42ff_8a5e_56b309208350() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b7cf93b8_c866_45cf_b648_e798274d5a1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f855d8a4_2502_4ef7_b458_2a4bd7b6fa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_df968c45_8ec5_4db6_8e54_8011f3e72b2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a58f8da5_ec99_4374_882c_85e2b081e60f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b1f7ae12_5bdb_4971_9d55_7d357fcc2e35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4e8f30df_752f_439e_befa_a6c0338f0687() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_558df44c_ad2b_40db_b182_bff76277000e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_43e777a3_64eb_4c3a_a73c_3256aa5a63d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0ed4e724_3af5_4fc9_b65c_5d7fb5d0ce01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c35091d7_125b_4684_a002_a44c9470541b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3a7662c9_8b17_4ba8_9498_2dd824635c33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b304ca62_3625_4d30_8f2b_0934c8ec6007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_14992d0a_121d_4ee7_aac6_99248c2af879() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7a06bd60_212e_4a68_91fc_7f275ae59c56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_80c8e26a_ae7e_4ee5_90a5_1c487037e2f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_173d6660_6406_4eae_914b_22d9f984852f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ca74aad6_4a0c_476d_93ba_6190ac143a73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_49f435f1_9a5d_4190_9851_969891b30736() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bebbd571_6cdf_414e_afde_07944c8e8872() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_36033106_2f46_4260_ad1c_03a5520d4947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b4f0449d_e172_43ca_9b62_57a1562dc209() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3f237a26_bd57_4ca5_b2ee_e8bb6642cb2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_edc00cae_b2a3_44e4_ab1a_57da12292e39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3329eabb_a99e_43b5_9d50_089c0f130832() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d0edd4a8_1e80_4fde_9b4b_d889a1bff04c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5fd6d602_1e80_4200_a4e7_86fc7303a207() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c0c5b3b2_56c5_4983_a7e9_696b202dda16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c126f5c7_efcc_4997_971f_d58e4eaa438d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_bb1390e5_50eb_47a3_ba6d_122f68a75129() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a28b75ba_c563_42c9_af0b_18171ca42691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5012de6d_3796_4140_8041_a849a0e3de8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fcc3b482_40be_4540_8197_c33155c871cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_88b7c0bd_96fd_49fb_8950_54bbdbfb3955() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e861a9c8_d352_4044_ba99_c5199317b697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d30b6807_321e_4dcf_afc0_e5fcfb5bc00a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_32ca1e4a_ec43_4da3_90b4_d13281645197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f2f4133d_dff7_4721_b106_ab7748dd54e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f627fcab_268e_4fb5_9d60_190c0dcc52f4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_36033106_2f46_4260_ad1c_03a5520d4947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6a95c035_0ebb_42f0_b245_4a0351ee33f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c0294b23_a968_498a_8d21_b312b94b9596() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9105a35e_2885_4f14_9350_57b924bd0c88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f09b3463_27a7_4c6d_8724_c5a3f2e32cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_47692e4a_b11e_4af4_83c4_b4bed57de911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_07753571_1f05_4f43_b77c_38ba10cb2748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6d35df7f_83df_4c4c_b7f5_e897ccfe048d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d1d59cad_5211_4481_8518_f1b0ea15503b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_216a4d49_c217_4f9a_a984_84a1f7bbaf3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7f2c7355_252f_4ae7_a27b_c453357e2ae4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a843e849_ac24_4c8e_b757_e9904325af64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7893d1de_f8b9_4be2_b04b_fb73201c6589() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_de5f33a1_e34f_4da5_9a55_ee37f35b086d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e8cd0df8_dda9_407b_8708_92baedc47a3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e07f6abd_0585_448c_86ca_40c0f3c85407() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d4600a47_e600_4992_ba49_e27860e10083() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_32ca1e4a_ec43_4da3_90b4_d13281645197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f7973b05_5fb6_4dc4_84db_f24849dd5f7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_df40f16d_b8f3_4958_b609_b121a6998439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e71a78d9_6746_41f7_9a76_2121770e42ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b39fba80_94ec_457f_b23e_3d72322f81c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9a231d2b_3db7_44b4_9db3_39aea15512a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_03612763_5740_4d8c_a351_2970f859d4b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e281ef91_f065_4664_8744_9b890dae9c2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_312977d7_73af_441e_bd3a_c5b9c03b2995() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_86096c58_7eb4_4e8b_8b04_2ab89ec27469() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_989df6fd_07e7_4b9c_b493_768e3d24cc03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_886118d3_3a18_4d27_8af5_323dfa75476d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8d250a84_2ce7_47c4_8504_836b864ce35f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f442f33c_f1bb_4b87_bf1c_5997eebd2a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_807db54d_a24f_40d2_aad6_73b390954cb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2f87392d_edee_46ba_a65e_f365bc303b92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f6f09421_6a5b_4047_baf4_1397188a1ca9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1cd7c96e_afbb_4965_8e60_426f80f4803f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3a7410bf_29d0_4619_88b8_6b0669a66765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d40f004c_722a_4959_9fc8_125a6778b552() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bf21c91c_cef0_41f7_b6c5_1dd7e7fc611e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e283b54f_e42e_41ca_8888_08383aa04ecd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6439eea6_3e10_4fb1_88bd_b536b7029012() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_853ce822_49af_4acd_a17a_4eb9fccbe810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d30b4668_4fd3_4ba9_8d3b_0cf8a96cfca8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f94c5c55_d78b_4fd3_be0d_ecc56f15beea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_72aeec1c_931c_4eee_9dda_2ad8094c3947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_3fffa344_a071_4344_87e1_deb6fc3b73df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c4189ee6_cc2c_4cf9_95aa_ef1477dd9032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3c425c26_7a3a_4433_ac52_01a9dac329f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_773383ce_35b3_4cdc_810e_6a34cc3cc753() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_decd4ff8_1f22_48ab_8226_55dbef62ec31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ea6d834e_c25f_4d0d_9560_c6399c59d010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_ffc16cc8_8243_422c_a40d_3542f913b077() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_db3f6134_4f1b_40c3_b41b_9e01f756f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5d69e473_920a_4c89_853b_65ed286e091d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_afe8e6b4_d557_4cea_b4e6_6398c40db84c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_69a157a0_054f_4246_81db_16a8bf7fb65d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5e0521c3_1ceb_4dae_8922_84d5f762607e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e088a530_6896_4fd0_82ac_5390573aa1dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e590c4c6_de11_4da0_80d2_f19af0815a18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e3907d6b_f302_492a_b8cb_c3eef367348f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_46bc51d8_135d_4220_96ab_0778f9f610e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_fd3f4bcb_26ce_4086_8a59_09d8d16906ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_897e7efe_33f0_4881_9493_2a189e99cc4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e0f38c4b_1e4c_4e0b_a062_729f36235388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_170464d2_7c6f_4641_ab45_ee1e93aefd84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3047c64b_5602_4c47_9ba2_2f57df36b75a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f9aa0cc3_77b7_49bf_824c_c80c5cec8d71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0b739275_02f0_494d_8cc4_7438460799e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1ad5074b_88f3_41a3_957d_a3ef28b6a99d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e01177a7_5449_4f01_99ad_4331d8d18c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_013ea1d5_617f_44b4_99fd_87be1c55ffbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ba21a753_2eb6_40ee_a7a1_3f4d9b3b0680() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_897e7efe_33f0_4881_9493_2a189e99cc4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_013ea1d5_617f_44b4_99fd_87be1c55ffbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_7de6c5c2_9aae_4b35_8cc2_c1fe954992b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b81aed14_e043_4b39_b507_14a869c76b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_8e804c5c_4e5d_4364_9ce6_7cff69c2b8d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b2bf2174_e0ec_4e93_96b4_f8c12dba7ec7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b260f73f_feb4_4d60_aa6b_6df266b5b0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5fcfbb0a_0926_4f1a_b57a_b7425492b4a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_965d5374_8aee_45ee_8c97_05773fa09dbc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_00e25ee7_df89_4130_b4d0_734d8b8387db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_852dd5bf_138b_4318_8f5f_a0050659e3f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d704e785_9d47_4ccb_a6f9_76bd2be5106d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_369e60a0_af82_4d0a_86f7_55ba600b1925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0fd0fc34_2510_4255_b52a_139776c88cc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cb4fdc98_8ff5_4899_8349_c6c5d6b4bd36() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e4501375_af7b_4f9d_a919_73e4665ba5c6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a613100e_763a_4706_9897_f2baebe010d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_5f099385_04ca_41ff_bc6e_4a0b051d5824() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ea28a4cd_f4bd_4487_9a69_e38a819e6e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ed2b3511_5803_472d_9001_33c01a509ca4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_03f51d70_0c8b_4f04_b572_d50f9e37899b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_1fb108c4_d8de_47a5_8858_6499eea4f34e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f02bb53f_d4b4_46d5_b429_ff7cb390495d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c07a70eb_a070_46f6_a707_8e66cdc571fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c23a30a8_4b9d_4cb3_b89d_9042cfa17482() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b498d9b3_985e_4d9d_b29b_9c3045dc11ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b775ffbb_eea3_4c89_9665_c3fdfef72498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7f9d96ae_0301_4b47_a5d7_ea8993ab4d66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9416b36d_ea1a_4860_9586_1b052549d0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_20d00016_a9f6_4da4_a0fb_12b881d6993d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7bf88e82_3e70_48f3_85fe_4eef35eb7c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_10520ce8_474d_41fe_8eff_23fc15adef56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d19d2d4e_e813_4a73_8479_490843bd8040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ee275eae_8c09_47f0_8b88_f147e8c07f6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c2f01d0b_d3ce_44e7_91f6_a51b748123fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_98d49fc6_b3cc_43b8_9585_9bc08a22359c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c7d189c4_4fd3_4911_8d2d_44fa165fe888() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2a87427d_498b_46fc_911f_e0edcde83ea1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_59be8ecb_cbec_412f_bf6a_8a7310faca29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6e182204_2325_4779_a1b6_6d9688e3aa13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7502e1d2_2945_4067_9b52_446ae6db0150() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_99b863ee_c518_40a7_a560_3b893a9a9567() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_62198a5f_3d75_421b_9546_aba8b1c58542() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_17f11aac_9fa5_4b45_88d8_45abfd2195be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_590d5623_4df0_4615_bcb3_cdf401d089fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_78101e8c_7184_4c83_ae62_408b34b43f72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d0edd4a8_1e80_4fde_9b4b_d889a1bff04c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_90b42e37_26d5_45ac_9b7b_d83727a37091() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9bd0bdea_4e18_47be_a6f2_5a5c0aa7996d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b9de911b_d08b_4d3c_b914_c922f28110d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bbec2e79_00ba_487a_982b_36f6982072c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3c8fa9f9_0c28_4d4a_9f93_4e5afd584b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_762081c7_71ba_4857_bddd_1ab5607e3459() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3301f7d5_623c_46ca_a795_243a2b0115d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_da901ebf_0c33_44f5_a5f7_8e5fac489aaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f9aa0cc3_77b7_49bf_824c_c80c5cec8d71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_60b4fdba_7541_4140_92d6_4d17402d4dd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b7b82154_ea6a_4b8b_9ea8_085ca56b9fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_36ee7891_38ec_495a_97e1_b59cc9e3ad61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6fe31620_b3c7_4fb6_93ae_18f3f08e07b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_859082a5_7531_4f30_b10c_8f025ba183fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4cda2c99_29fa_4aba_ba14_1ebf7fe59969() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f6958a5d_e8d4_4a34_be99_bc2f34789ffe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3bbf6a67_5d8a_4a4f_9c0c_03318d2b1747() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_eb08a6ad_d83e_4cd0_b979_8c9b43409f47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_97a65ee2_94a6_42e9_b552_764779f519da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f2e2bb16_4a99_431a_9d9f_684c9006a3ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3d3df9fe_0021_43d5_b94b_4dbad3123b5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6aa75ee1_a139_49f4_8b6d_3b116542d4cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e99d933e_dbfc_4186_a5fb_d01a48bbfd13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_daf44f99_9943_41e4_92b0_c249918a7d15() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_47c13555_7891_42e5_b3a9_d0d75686e049() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ff6a0a67_53b4_4557_9b11_eb5a1e67b2fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1c330a38_c064_437a_9d2d_fae5b1a54d20() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b56c8b1a_ef6e_4c5d_9982_9f53e6e64663() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cee968d7_597e_49e7_85d1_750d04bb7c68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_75905ef1_177f_4199_bb8c_36561676f6dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a85c5abe_f532_4ac5_9e86_106be76e99e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1fcd229d_a37d_4f6a_b02f_fd276ae780c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_edbe711b_f8c6_4add_a716_58c39f7bf3a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_34847a04_0930_433c_920f_ea3fb0d71599() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_20c07e92_aa49_4bec_9c8c_a511edf603c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_773e3290_bc31_41b1_9613_0194f2728e2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_da9051db_99e6_4b72_b877_63cc38e66950() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c626dadc_461a_4b01_8fe8_7c9c08435417() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_db4bc96d_a230_4bf7_8dbe_19ab09c13579() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_021770b4_737b_4b4c_9345_16c0f969cf0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2f98032f_7f96_4e3d_958e_c05f688aa5a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f7973b05_5fb6_4dc4_84db_f24849dd5f7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_8fbf3b60_c8fe_49c1_80b7_5562f73c7438() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c4c43c80_4501_42cd_8d92_8a51c86165d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_666de809_03d5_453f_9fbe_dd4bfb8c0524() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_42653d31_cad8_4f4f_8967_8df6222ceff5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_46036afe_8af1_40e8_b036_259b8aea2af8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bb58dc4a_3ea9_4bb7_82be_6d42ceded1fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ae93c031_4bc1_42ad_9b77_5e034b08fd66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bf110fd2_b7c9_402d_bdaa_c8fb9bb22110() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f6b55665_6268_4bc5_99de_aa1d36b4c2b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2307f200_7b9d_409d_bfc3_5e1ee5fbb42c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ca74aad6_4a0c_476d_93ba_6190ac143a73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_4f626321_6ff3_4653_8108_50e98aba4bf1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bedbcf85_4de4_4116_a096_1748f1d46251() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6c2c32d0_efd0_4484_b5ef_05bf47d7f39f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_9c218489_d418_4473_b2c5_73e2fad8abb8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e885c4c4_86da_413b_891c_c06834c988a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4a65e8db_24d8_47a6_9254_5704eb785fa8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_70bbaaa4_6c60_4eba_a5db_14b81e319baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_77911dd4_98d6_4508_b6d5_4d4928cff68a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_225366bf_5b96_403a_8c91_5303b3f0a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9e294aae_5223_4484_bed5_b29af85b097b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bbe8cdb4_d38b_45d6_aef8_f3f9f0dd1682() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9b53b0fc_c9e9_43ae_ac2b_bc740907cb24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_60b4fdba_7541_4140_92d6_4d17402d4dd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_09fe211c_1033_4315_b8d0_8f0bb870ed27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0ad501e3_8fc8_47c6_8112_2959fdfb28e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d895572a_8f7c_4baf_a0c2_977b04e24d77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_173d6660_6406_4eae_914b_22d9f984852f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c75d976e_5def_435c_8e3f_264853f81a3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2ce0f22d_d3f4_426c_88fd_319bac62731e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_43e777a3_64eb_4c3a_a73c_3256aa5a63d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_25c21292_520c_4dbc_875d_6c2d4848059b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6f259ef0_82c8_4a3d_9a54_e0492f3fd1f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0fd0fc34_2510_4255_b52a_139776c88cc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e885c4c4_86da_413b_891c_c06834c988a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ff6a0a67_53b4_4557_9b11_eb5a1e67b2fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f68925d3_3ef0_41aa_99c9_0e8d528e304b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b464ff5c_08bb_44aa_a15f_2b5f2229cc23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e7d6d9fa_5eaf_45eb_a932_a9f39e3f949b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9e483280_5460_4afa_8d20_f795d40f47d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2e4b4c82_82ae_4204_92c2_4a5e0c228be1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_74ef5886_3db2_4cda_87e3_c397828d6613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_74d3af00_43c6_4091_9cfc_3c9d6bcb6835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_06980093_e894_402b_93fb_cbfc432852d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_aec493bd_1061_4737_b9dc_5a3ac2d28c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_569e4181_3ab3_47ea_8476_160dce8960d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_59f424cb_6bd8_4840_b9f0_f48466ba8d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_da73e1a6_8572_4407_b5a5_ac7428743fbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c13690f1_c8d8_41f7_a7fc_04ed74a088ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_eb08a6ad_d83e_4cd0_b979_8c9b43409f47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d9ac7716_18dc_48bb_9a70_e9725a6eb996() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_27c1f921_faef_44cb_8017_a73794108b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1d3345b9_e249_4f3e_a3b5_56474c6fcf6b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6c6cb5b7_4907_4516_92ad_7b29768c1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c0829858_1dbb_4441_992c_d4c2d7eba871() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_65c65ee3_fb68_4e84_a28e_8789ff13e3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_31646a5e_4f64_4620_a22b_abe2278b73af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f6aff357_476e_495f_9fd0_216cdbb2ff04() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_76075cc7_97b4_4227_a992_043d3277fbaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_98c4b2d8_e78e_4cb6_9da7_d8875a3e07fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_afe8e6b4_d557_4cea_b4e6_6398c40db84c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f1c2c52f_3296_40c8_a363_0bdd1b49f795() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_27c1f921_faef_44cb_8017_a73794108b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fc732082_6d3d_4d34_911d_e46127fe2656() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a3d5d177_d480_4fb7_a9d9_450e612a225f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5202199d_1983_4caa_9288_6d7bf28ede84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_34847a04_0930_433c_920f_ea3fb0d71599() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5a2451b0_6b54_4153_8c49_73a727fd9d53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_74208003_764a_4b0b_9d1f_f89dcc0abb01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8282fa9f_6971_4f0c_a8c3_eb8a39428eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_fd3f4bcb_26ce_4086_8a59_09d8d16906ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_d7b045da_d9f7_4e91_953d_af3a33e6dab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d3eae0eb_2f96_4eee_bdda_d6415912aebc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_14241fd2_b741_484f_92f6_07dd53880c1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8ab95dae_db58_4d6a_a2fc_6a072a52a8e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_15385204_0ee7_44a5_8a10_17989398c9fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_fd019daa_2241_4194_8a6a_b573026e7566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_298f69fb_8b14_42d4_a74e_58fb1dcde137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2f98032f_7f96_4e3d_958e_c05f688aa5a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_71112c7f_2f0e_483c_a3c9_70bc7c8c5dea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6c41eb87_1daa_4ab4_a24f_487effc9cf24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bf110fd2_b7c9_402d_bdaa_c8fb9bb22110() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_32ca1e4a_ec43_4da3_90b4_d13281645197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_68620d02_503c_4145_a3b0_dcc0fc8fb911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e87da859_b909_49eb_977c_ab78f603d86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_56da5154_d646_4e2c_aa5b_2daa2663669c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_960147ca_18d7_4f8e_96fe_f9301d0f7cc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_1cc7bb49_960a_4b1f_9a06_e5e520d360e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7318e19b_6930_4c32_8fcb_e65cc418e1c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c8c9c676_7299_4bfa_8850_f5cb00818cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_476cbb75_d885_4e10_96aa_973202f7685d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_617352a9_fce3_490c_985d_1f0a08e300bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8fe2c646_baca_40ee_b783_3215ebe4bb2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ba217f67_eadf_4060_b567_ee078b8dd154() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_28c13986_079d_49b1_ba95_aed6e8abe581() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_19159faa_32b6_4d56_8d7e_7488337b85f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2bdab585_2cee_459c_a708_e4d872b5bd91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b36b6753_755d_47cd_b472_b6d49c67b166() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f462266d_f2e7_4644_83c7_ed8c5d0c3fac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_56da5154_d646_4e2c_aa5b_2daa2663669c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cee968d7_597e_49e7_85d1_750d04bb7c68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d1493453_c52e_432e_b7f7_eb295cf9423c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f90f85ac_4a26_4b8a_9e0e_830f6046881f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_42e9d229_375d_4306_89bd_d6180b1abbad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7a65b6a9_33d9_418b_a1d2_8915591b57ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bdf5c0a2_c3a6_44d4_adff_47d9bcf01858() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c4234177_ddea_44ca_8de7_63ddd7eaba9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ccd75a8b_6fbb_4485_868a_0ed0c19fc570() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_14382c43_b9b1_44aa_92fd_e2d8bf052f33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d40f004c_722a_4959_9fc8_125a6778b552() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b2200ec4_dd37_4f2b_92dc_09f2831ff1d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_da839160_a716_438e_98b9_74087f427bed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c6cf6f76_423f_4e55_b814_7658e3623cbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_96758fd1_3c7e_47cf_97e6_cecee735f6bb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5f3f3f9a_b7db_49e6_aefb_43f508ff1f8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_67e3fe88_de03_4471_b83f_f69ea22d2496() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f3801894_494c_4cf3_b4ed_18ef7fbce130() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_eb08a6ad_d83e_4cd0_b979_8c9b43409f47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ca54dc58_c04a_4398_8274_38605870fca3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0de5f100_f142_49e1_9476_4c3364a3fd58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f6922215_5c0c_4407_9a6a_07f78df613a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6c41eb87_1daa_4ab4_a24f_487effc9cf24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_773e3290_bc31_41b1_9613_0194f2728e2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_88b7c0bd_96fd_49fb_8950_54bbdbfb3955() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_34847a04_0930_433c_920f_ea3fb0d71599() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d273a64e_0e83_41c2_98d0_dfdc2ad8bab8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c9926bc7_b0b6_49d7_8026_459ea06433eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d8c3b788_d483_4d47_b123_e190e929a802() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9c390ca2_59f1_41d9_b45f_647517a7578b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_49af8968_b9ec_4990_9bb6_235514e7a633() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_97400d8a_fdfc_493c_a9ec_509a1b9632fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_930894ca_0454_48eb_a6b2_6ddf550fa4cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9bf8e74b_399f_468a_9fe9_949b43503748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ddc96844_2d1e_43df_987c_b4fb910a47c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0334db5e_68c7_45f4_833f_915b32c5a2cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_27c1f921_faef_44cb_8017_a73794108b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f3ce6c17_6f04_4243_b7c5_5ac407546999() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1026ac8b_c420_4bda_b850_6da2ca5e811b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_619c2930_9f66_4e7f_802f_9485975be402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f64c9cb6_ebd0_4963_a522_4c9710d18107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4d592097_c7d4_4da8_b004_a26b4cca3e61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3770a28f_49e5_4074_9191_5be0d7bd12b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_397c5131_d44c_421d_82ce_41f073d67a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_32ca1e4a_ec43_4da3_90b4_d13281645197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_24ff4838_1e03_43ab_93ba_1df273cfdd76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_76075cc7_97b4_4227_a992_043d3277fbaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_13de9847_f012_416b_b3d5_913de8ecfc7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cc759601_8076_4dae_8e91_9ae9341fad01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_2fb84282_b9c5_4fad_bdb8_11b9dd34aca2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_bb9108ac_ebfe_458b_aa9e_a9748525c004() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f72a210d_3b4d_42c4_ac28_08482df780d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f187775d_d354_4938_9e82_7c61328c2e03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c23a30a8_4b9d_4cb3_b89d_9042cfa17482() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0efa0968_79a4_4a4f_a0a0_3d7aa2d589fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2b664586_8576_40ae_9da8_594ce69716f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_92d29a86_3a6a_4e21_8d16_b5ba56e1e810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0c8a7c68_4ec4_40d1_9dc9_972749087685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6ec7aee2_7515_4eef_b19f_3ca29c95d3ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b6ec3c5a_06d4_4c6b_b3fd_e6434ed8bb85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ba1c5b0f_80f6_4870_ba6c_a2ea0f921d3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_78631fc2_e125_4026_87f6_a4900eec2d35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5a2451b0_6b54_4153_8c49_73a727fd9d53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6f9ad5a1_fdda_441f_a1ba_f6086f82a974() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2f294516_9ca3_465f_aab7_e84f3e11c503() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5fe2d2bb_cc9f_4824_b0fc_9858d50e8e0e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b46d2bf8_ba4c_4258_ba39_025ac1e46eb1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c9ea1ee3_2fbc_4213_96df_2fd046dee2ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f09b3463_27a7_4c6d_8724_c5a3f2e32cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a73b42f5_1f0e_4cb6_98fc_fd0115d6743c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_5157b0e7_5c37_466a_8427_328d3046b9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ad9dec16_d3c9_4731_8dc5_dee2b8f1a765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_75299203_d8ec_45fd_9d65_98fa20789412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_279d9e18_40ff_4fd3_9620_0d0b70e282bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_857a9de7_b0a1_4caf_b31a_dcde96b8d8b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a85c5abe_f532_4ac5_9e86_106be76e99e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0a726183_d170_4a2d_a10d_0b06f2ce4053() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_dc0b4f95_5ec2_4c8e_a94e_348f9b206903() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bb0ad54a_4522_45aa_a199_a3054e149119() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0e134aeb_8605_442e_a9ce_bf043a43c81b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_07145161_86c8_438e_a97b_1142af050e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4d3a4ecb_0e8e_4740_8875_796025637c5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e8b28da3_11bf_4121_a8d7_1a69c8c492cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b31b858a_5685_4517_8a10_db5e4f8dde47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_20c07e92_aa49_4bec_9c8c_a511edf603c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5f8b802f_062c_4c76_8517_9b46b7f012f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_19159faa_32b6_4d56_8d7e_7488337b85f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_38555b9e_8797_45b3_b3fd_87d89bec4da1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_be7ba40f_de0c_46d8_a157_ba733c3eb8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_8d74af62_a236_49a7_81ce_3597704dfe01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_216a4d49_c217_4f9a_a984_84a1f7bbaf3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_afecc466_176f_4604_bc47_957303a40ac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4690918e_c596_4405_80de_ef25cf0eb2b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1be72399_bc03_4d1f_8c12_27f584a3038f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4859f171_7ea1_43f2_83f6_74fd5a24eac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c05ed265_5543_442d_b3dc_4f9bf16e99db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e4a779bb_53b0_4792_94c7_dabea65d6c7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5f3f3f9a_b7db_49e6_aefb_43f508ff1f8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_968e5ff2_1645_4115_b44d_2b4f18f6b875() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5f4e1fa8_6723_4713_a258_71a4d4bdeccb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d93a6b7e_025f_4c89_b301_8b5c79387a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ca2b5c9c_43e0_4eb0_afe8_d1868508fb83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_763df214_be9c_4a01_8f98_198266809fbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6fe31620_b3c7_4fb6_93ae_18f3f08e07b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5b24e576_a8c9_427f_aaee_09efa40e72dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cc8bd1ee_220d_4959_ad08_7cc4d2698e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_288ee5fa_2143_47a5_8d7f_cf7d7be1e2e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e885c4c4_86da_413b_891c_c06834c988a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0de5f100_f142_49e1_9476_4c3364a3fd58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0915085f_2ac6_4b7c_a03d_3153be2e738f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_83daa340_3c4f_4295_89bd_ee65dbce5d1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2d170e57_18b8_455e_bab4_fbabe087e20a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0ed4e724_3af5_4fc9_b65c_5d7fb5d0ce01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c4189ee6_cc2c_4cf9_95aa_ef1477dd9032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7f2c7355_252f_4ae7_a27b_c453357e2ae4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3a7410bf_29d0_4619_88b8_6b0669a66765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_6644ea3a_59f8_46d6_9bd9_6e1c71426910() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a55ab954_ed2b_4c8b_bb8d_189269c24c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d8dcd83a_7bb0_46fb_a883_364409f6ff72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4992d0e2_4483_4d63_bee6_c61f48caa9ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_01daed2a_23b1_499a_b705_5921e6b87d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b4f5c254_a77d_404a_96ad_30e323a7a9bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fa990ef3_fc79_4af2_bb2c_4e0d1dedab8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4a65e8db_24d8_47a6_9254_5704eb785fa8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0182cbf2_e5f2_411a_a5f6_380563812e69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_090c8983_9999_4240_a204_da923c24fe08() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d273a64e_0e83_41c2_98d0_dfdc2ad8bab8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6eebc876_8b2d_48ae_aba0_758361a409e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_30beac97_7803_4da4_bf69_0e37f9feec91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cec70e86_8d2a_4ca3_8317_68bfbb56894c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b81aed14_e043_4b39_b507_14a869c76b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_174a84ba_5f68_45b0_9d84_38b3575d7d0b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2f646bcd_9fb3_4093_9049_f1740b605420() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_92744e7e_c3e2_414d_b930_2d0d765ac789() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_34847a04_0930_433c_920f_ea3fb0d71599() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6b8c380b_6ab4_4863_9012_8a5e02946711() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5cda23af_36b1_4597_aced_7e0e514b43a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a97c6473_18b7_4216_ab35_c37ada968197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3944016a_7e56_4f7c_9b1f_0c882c66c541() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9cc92481_af05_4cbe_9a43_1486dcbc880d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_31fff2a5_e84e_47e6_afb7_6a35a66992e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1ec97dde_1b1e_468e_86fc_e46187dbf13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f6bbd26b_ba87_4c71_8375_8acb37743d8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_36e7a877_59ed_4f73_9534_6824ab5f5297() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_844acbbe_17c1_47cc_be1c_c9d2a43bd9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_07145161_86c8_438e_a97b_1142af050e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8ab95dae_db58_4d6a_a2fc_6a072a52a8e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_77f7d997_713a_45c0_bade_5e7aa5ed12c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0a627390_6365_4467_8626_500f1874ad03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7bf88e82_3e70_48f3_85fe_4eef35eb7c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_36033106_2f46_4260_ad1c_03a5520d4947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0c8a7c68_4ec4_40d1_9dc9_972749087685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6f697b70_670d_40e7_9468_5c1c453ea22f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_897e7efe_33f0_4881_9493_2a189e99cc4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9b53b0fc_c9e9_43ae_ac2b_bc740907cb24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_60e48cc8_9216_4b05_8da0_88779b42bbc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_129ede65_dd3e_4b25_b189_2c95279ce610() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e1f96444_b43a_4bda_b27b_de2b15402ed2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e01f5a1f_4bca_4ea9_adbb_5eadf8991b0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_cd7804d2_dffd_497a_b845_f8fe59eeda81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_77bad787_453a_4ba3_bcda_75156c64be4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3a85be31_69e1_4628_b68f_062f88e6a9bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_06938022_06b9_4be0_9470_c454eb5b3d7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_1a1c53fb_ae1c_453c_bdf8_1a0cca96ee6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_308fad1b_0112_4514_9871_545732d0e5d0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_dba89110_4c34_43ef_be35_1eafbb821cf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bfaa431f_fff4_484a_858c_04d8aebc036a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_594aff1f_ccaf_4de6_b340_24d579e2b144() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f61f94e8_882f_4af0_938c_4748292a886d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_97400d8a_fdfc_493c_a9ec_509a1b9632fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_17b5a9b1_7ba8_4221_b589_a55bd1f7f543() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_037ca5d3_7abb_4323_9d99_89ec73e5d229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5a53267b_b35a_4e36_8d3f_b04bbeebd3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8ebe2756_2aab_4658_b8cb_e32542a30794() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e71a78d9_6746_41f7_9a76_2121770e42ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_47cae136_54d2_4361_8ac1_ab1a834e021d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_013ea1d5_617f_44b4_99fd_87be1c55ffbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1f3f023c_03a6_489c_b07b_3fcf7f0618b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4e8f30df_752f_439e_befa_a6c0338f0687() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5e139813_980e_403a_98fa_fdb2578bb139() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e60e531a_8a5c_419b_af72_009a5df4ce25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_59be8ecb_cbec_412f_bf6a_8a7310faca29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d5383aea_5b3c_4a33_a7ec_8780a59ebddb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a5274842_877a_43c5_9e8b_9fd42f72bd4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_19bf1445_5581_4d23_8a67_abdfa6fbed06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f46f00d6_c59e_4722_a85b_e4e2c303a86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e7bc7abd_dead_4474_9b2b_fc52a91d30f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e8cbb386_a17f_47b2_9f6f_83f270e29455() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b11f0a88_08dd_4143_b40f_12b4ac993dcd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_186bedb0_34cb_40cb_8f06_221f1c02cc63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3bb32a82_e88a_423f_8752_d5bede16ce18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_26ec5711_28da_486c_9c50_219ff7cc0450() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_fa990ef3_fc79_4af2_bb2c_4e0d1dedab8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4295d8a2_a0a3_4d94_9c3b_d683fc28bc06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d3eae0eb_2f96_4eee_bdda_d6415912aebc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5696a735_18a9_43cb_98cb_6f022e3786a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3b53bf4e_ecab_499a_90d3_9200f26c20c7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f61e5e7a_ab2c_440a_9c81_49209b5d2586() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3944016a_7e56_4f7c_9b1f_0c882c66c541() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_a253b76f_2c77_4ea3_bf15_25a59f12c1aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_968e5ff2_1645_4115_b44d_2b4f18f6b875() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a9f7d01a_1de8_4666_98f4_69a4a3e361a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1202bb40_7fc4_4c9e_ad42_f53d735c88ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_efbef808_23a2_419f_9cf1_0c09fcdc4b1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2da6f0d6_9c61_456d_b0ce_eead74b5dfff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_372bdf54_6e55_4022_ae83_a9ee9fbd0a78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b3d6d61e_3a30_4377_98ac_4f758fc3f647() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f855d8a4_2502_4ef7_b458_2a4bd7b6fa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f2ad3cd8_243e_4529_b52c_702f1803766b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d5fc8054_b07e_4aee_ac45_610361a77c52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e8b57719_9b00_4143_ae6e_2161c0087e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f53f1f82_3808_482e_9a9d_6fbeccdb1b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e33b6eb5_f3bd_4cf3_90cd_90ee5f59c96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b76f81c5_4161_4471_a3c2_e33feaaeaf52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_043eb383_4413_4c7d_86af_cb3e2fca439f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_493eaa96_38e5_4f01_b8ef_047f076e1dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_47c13555_7891_42e5_b3a9_d0d75686e049() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_712741bc_a35d_4d4e_8538_ed682dbb3c3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0caa00d1_463b_4a6e_870c_17ea4fb46939() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5c41eae0_e34a_472c_9d99_0c550eb25690() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_12527554_9999_44f3_a177_eae88d8f4b31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f03b5b1a_5f00_4ef0_83f0_c0012f7db61c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_035cdcf6_122f_4479_9cdf_1ff527286b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_411587a2_aa72_4864_a871_312abd9e3cba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1503155d_ac46_4240_a605_9f935c4d4949() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3048826f_d193_4d26_9c42_71955f6dcbf5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0ebc817b_57d3_49fe_af5b_a7900a58a72f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9123309f_2b1f_44e1_a3b8_b901103ff8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_04677b08_4fb2_45b4_8f8d_e4ceab8b7b58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c25072f3_7250_4577_94a1_89aef61fe8df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_502e7975_eb4f_4930_89b7_0b9b7c6350c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6a4a886f_6578_403c_93f1_84c4672eba25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_feaf1a9a_487b_444b_95fa_58ecf7988e96() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e604462b_37a5_4a46_8d0b_17e74c6d6a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_6623ad6d_62d5_4614_be4c_e4de4183c07f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f9b4128f_623c_43e7_a54c_7436bc7c9ed0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1d66842e_93d4_475c_8ca0_406af05c9649() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_341e3dbe_08cf_4eba_a4dd_0ef3f9c50959() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c4234177_ddea_44ca_8de7_63ddd7eaba9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4a65e8db_24d8_47a6_9254_5704eb785fa8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_054160e4_733b_4d82_b02d_ffafbe56fead() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_20fa7093_470f_4e24_a176_e3f6829f9c00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_97d592e7_754b_45e6_b7a0_21d4e1b2de17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ff6a0a67_53b4_4557_9b11_eb5a1e67b2fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_783ccf5c_b82a_4cea_832a_615ce2452094() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f09b3463_27a7_4c6d_8724_c5a3f2e32cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9013a0a6_d582_4695_b1c9_35e90c6ed73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_83daa340_3c4f_4295_89bd_ee65dbce5d1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_783ccf5c_b82a_4cea_832a_615ce2452094() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cec70e86_8d2a_4ca3_8317_68bfbb56894c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6dfd85e1_f92b_43dd_b273_b0b2d9b4b7ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_efd98c7c_3d2b_4777_927a_dd6f3703fa83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_76075cc7_97b4_4227_a992_043d3277fbaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e85619d8_16cf_4e07_95d8_9009216a92d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0280d40a_d7bc_43a8_958e_3eaeb30f826f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_de5f33a1_e34f_4da5_9a55_ee37f35b086d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d638c72b_1e03_4cf8_ba16_956ae7cade9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0d06e089_cfcb_4146_808d_381509d71a82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5f2ae41c_19ee_4d55_b31f_3bcfb0f51489() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c6c16ad8_c80a_4668_971b_575943b80ced() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e281ef91_f065_4664_8744_9b890dae9c2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d30b4668_4fd3_4ba9_8d3b_0cf8a96cfca8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_71a7034f_ad7c_48a4_8c19_efd469d07dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9f55e98b_5266_445c_a075_24f23b4c3003() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_20fa7093_470f_4e24_a176_e3f6829f9c00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_15f9249c_abdd_4e87_b627_4a674126ea75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d418e39f_f8e4_4383_bd08_f65e1f63258a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_216a4d49_c217_4f9a_a984_84a1f7bbaf3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_420c4423_eba6_481f_a57a_033a44079ce3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b68c1ef8_3077_4153_b353_55c17488cfad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d30b4668_4fd3_4ba9_8d3b_0cf8a96cfca8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_61028804_9cb1_4ab6_a016_c4890cc834da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_98c4b2d8_e78e_4cb6_9da7_d8875a3e07fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_df391b51_f84c_48ab_939e_a2a42517d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b76f81c5_4161_4471_a3c2_e33feaaeaf52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fb6499cc_e84b_4e32_a26c_5eecfe7e449d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b7318be5_a3ce_499a_aa8d_ca54a9052b11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ec77f40f_1415_4266_aa7c_fe4f3b257060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8510befa_3411_4840_b134_d09162f3d1e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_dd0957dc_e522_4e43_a81f_b3aa5d9ba682() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ae93c031_4bc1_42ad_9b77_5e034b08fd66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b6643769_fd22_4144_9d7c_f2590a568f09() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f157031d_a927_418c_9801_2f717688f827() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7d2d09de_ef3c_4564_87cb_895952dc1ea9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_968e5ff2_1645_4115_b44d_2b4f18f6b875() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1c330a38_c064_437a_9d2d_fae5b1a54d20() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_482c2051_7c8b_4dd8_ad57_e59f6fd00cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1fcb1f5a_c441_4719_82e7_0721859068b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b41a0927_56e0_4b0c_8162_f78481d04292() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c31c2038_a6ed_4314_b077_360f57631e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0ebc817b_57d3_49fe_af5b_a7900a58a72f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e27ae4c0_e5b1_4df7_8613_117ec091e021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fc732082_6d3d_4d34_911d_e46127fe2656() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_859082a5_7531_4f30_b10c_8f025ba183fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_18ba48ca_ceb3_4418_864f_dace66c4deda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_870dc8cb_92ad_4955_b58e_76b9bc87fde4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ad938b5c_5d05_4bd7_b33d_e5bc833456a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b464ff5c_08bb_44aa_a15f_2b5f2229cc23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_28c13986_079d_49b1_ba95_aed6e8abe581() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d5505315_9663_4443_a270_b8cd7ccc961b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6d8cebe7_7632_43f1_97fe_21483cf4fa57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0d4da408_3cd2_448f_9bce_1db7ace344da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1109a239_5947_4f39_9bd4_c79f0f72a55c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b013dd23_51e7_4488_8ef6_b73ef1fd3e80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5b629202_3a60_41ea_89d4_c2b7e2a355ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e4479473_9f59_4368_8f7e_0689d3c1a59c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a9db90c2_2084_44db_9f57_1bb142403fd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f369ba0b_9961_4f3c_970b_8bafdc9fd6f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_59590d27_9ea9_44d5_ad25_e2071a38655a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_4111e63b_6ab7_4ea8_abc1_8768264f749c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d355950b_d9be_4216_bed6_47f5099b7af5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_07d2382e_7e07_4eff_8b2d_e1821d5d0a3c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_837148fc_9491_4240_819f_441dac599a8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1263b015_425b_44ff_a975_34fe961af031() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_99b863ee_c518_40a7_a560_3b893a9a9567() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f00b01f1_495b_4d5e_9d6d_5892a20f2b89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1cc7bb49_960a_4b1f_9a06_e5e520d360e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d31ce131_6ac0_4ed4_803f_c87577fd4f17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c993c20b_c8fe_423b_94e3_a11f5deadc16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e27ae4c0_e5b1_4df7_8613_117ec091e021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_79553e77_5385_4650_a551_3c71ada6ed98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f2616ad1_81fc_4f13_afdf_817c416647bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_406fc22e_9088_4b3d_8395_ff1fda9be614() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b92bddc5_934f_474b_a9d0_5b440fef2ef3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bb9108ac_ebfe_458b_aa9e_a9748525c004() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6162a2ad_fc6b_4f37_878d_784d5a5c9f28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bc4ab49b_0601_4e21_a880_22c0a3e50ce5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b81aed14_e043_4b39_b507_14a869c76b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3c06aabf_813d_4702_a795_fdb2eaec82fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_95a01bd5_ecbe_41a6_bd5b_6714dd84edc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_07994110_eab1_4ff5_9cc6_2f3e285e46c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9132f087_5382_4cc7_97ff_06afec628fdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_2426b724_8802_4f8f_a3e5_ccc191976668() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f418603a_7d00_4a59_bfb0_78027c4663ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e99d933e_dbfc_4186_a5fb_d01a48bbfd13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1ad5074b_88f3_41a3_957d_a3ef28b6a99d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a51a14b7_3e4e_44fd_a7f8_00a81cb52c6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5e94f1cc_3078_4df9_b41c_4bb789fe1dff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a253b76f_2c77_4ea3_bf15_25a59f12c1aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0c62e169_fe74_45f5_bceb_b815778458ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0023d758_b10c_435e_b4e6_69abe5a943f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_6bef330b_f453_4e05_89ea_5959bc908fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ab38e9f2_16f1_4ae2_ace1_4bd50a35ca02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_94e61289_5c99_40b4_8e86_bce683d238ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_0c62e169_fe74_45f5_bceb_b815778458ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cb4fdc98_8ff5_4899_8349_c6c5d6b4bd36() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_3bd85280_801d_4d3b_bc72_9ab2a5b91468() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1941b723_c509_4bda_8c44_7792c5e80745() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_331f7f64_351a_491d_a5a5_9c10507d083a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_77597bec_75ef_451d_ab1d_94d18ad9332a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4e0d9afd_8d66_44ea_85b5_f94b65b936ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_79553e77_5385_4650_a551_3c71ada6ed98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_035cdcf6_122f_4479_9cdf_1ff527286b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_14992d0a_121d_4ee7_aac6_99248c2af879() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6aa6d66d_1d99_461d_b61b_2f00d7bb25f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_11ae9eff_9488_4c4f_8ab3_ea17446c6c06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_884e2140_a6ae_44c0_ad21_a911cc587620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_067a73d4_5525_4381_9688_b72a304c054f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c1fa22c4_12d7_41a8_bdd5_32301d9bc213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c25bb9b6_a280_4e18_95b9_7eb98d4e40fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5e94f1cc_3078_4df9_b41c_4bb789fe1dff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_17e3161e_e269_41c8_a881_e19c78a26c63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f2ec5dee_cfd4_4e8c_a46f_bfc9e556e43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b049245f_4edc_428d_bc4f_04b023368bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d4d85f3f_93d9_4b81_9ffc_70f4637b31ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f7474e93_2c43_4add_b301_cef140010b40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2d170e57_18b8_455e_bab4_fbabe087e20a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_bbe8cdb4_d38b_45d6_aef8_f3f9f0dd1682() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d1d59cad_5211_4481_8518_f1b0ea15503b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_27e5a8e7_ce52_4b47_a536_2cd363b7b4e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c1f00d4e_4e3e_462b_9d63_e051bba73279() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_30b97351_0551_44cf_978a_76520fdeb8cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e1022359_5a75_4059_b56a_d0e56c6c0624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_18ba48ca_ceb3_4418_864f_dace66c4deda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4f750753_a2f8_4503_9272_caca33cb3835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f1c2c52f_3296_40c8_a363_0bdd1b49f795() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5f2ae41c_19ee_4d55_b31f_3bcfb0f51489() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bab21046_b0eb_4233_9735_9d2cc0eae706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e8cbb386_a17f_47b2_9f6f_83f270e29455() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b9243b37_17ed_40d6_8242_15cbd378cc17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d09ad164_ccf1_4fd7_b13f_24a7e22d60a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_569e4181_3ab3_47ea_8476_160dce8960d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6f697b70_670d_40e7_9468_5c1c453ea22f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d9ac7716_18dc_48bb_9a70_e9725a6eb996() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_edc00cae_b2a3_44e4_ab1a_57da12292e39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f84c022b_67de_49cd_9f6c_01bd5749895d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_209530a3_f380_48a2_84c1_5ec6d4a10965() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_47d3d8e4_edd8_48eb_b966_f7d9e3cc6c3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_58d6fee2_529b_48a0_bd6a_373ca8c281f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_eaf8d209_6cb8_4633_9182_d31e40ae72ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a79fdd1d_2e02_4e29_a68f_33da15dc40ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_ca3ef9e9_d3aa_4ec4_bccc_8543f51790d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_14992d0a_121d_4ee7_aac6_99248c2af879() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0b020b7e_e275_4d20_b6d8_9125997ef2a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_96a31b87_6dbd_466f_bcb3_5fcf77bbff29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d9ac7716_18dc_48bb_9a70_e9725a6eb996() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5f3ccbbb_ab54_4f43_8a31_8fad3d8e933f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e98c7290_42ea_465e_85f5_f32168a0e98e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_16abab32_6e31_44c9_b3e1_b8d404772e50() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4295d8a2_a0a3_4d94_9c3b_d683fc28bc06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e8cd0df8_dda9_407b_8708_92baedc47a3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b5df5cbf_092c_49dc_aa19_7d01a8f367ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b227a9d8_feed_470d_8c3d_0d276d3f2e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5ea127b1_3edf_4fd2_8432_63177e689a39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0ddbdfcd_5123_43d4_8552_0d337030663f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4e16bb6e_0d62_4d67_9174_f9e4f9cde3f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_327811e1_3a2b_45af_8225_c5cc17620a81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7a84bb9c_e9f0_4eb4_87c0_ec8c28a07376() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_ca9acb25_9421_47a1_bd9f_72aa4c23073a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e19cb88e_32d9_4618_89db_5585efc56498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_3688d2d3_2cb3_4a87_8062_4c4e7f9863ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_86ab6a0f_99eb_43e5_8c2b_807e948dfd60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_1c892525_7960_4643_b088_705e00262007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e33b6eb5_f3bd_4cf3_90cd_90ee5f59c96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_358739ea_aa07_4299_b6c8_fa188004b44c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5696a735_18a9_43cb_98cb_6f022e3786a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bccc0175_c942_4b78_997c_62b1cd4a0dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_20531674_1a4f_45ed_944c_719e4ed9a6db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6b839c71_69b5_4484_85a6_8249f4b73551() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e33b6eb5_f3bd_4cf3_90cd_90ee5f59c96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_9102e3d8_9dce_40fa_b484_11e7868ea84b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_eeced3cd_7e38_47db_befc_8ae1f8e2d400() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_29e90f18_825c_4a1b_9ca5_7e5014ad1308() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_41f96a3f_f215_4bad_b483_9d3d75e1db12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e45fbff7_a0d4_46cf_b12f_fdbd8394cdca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_79fa659c_0c71_45c6_aca4_cd8e7ebf3967() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2f646bcd_9fb3_4093_9049_f1740b605420() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e877df89_22b3_431d_a34f_44700be5237d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_aa28fef2_92be_4ac0_a201_e95fc218a19b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a843e849_ac24_4c8e_b757_e9904325af64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6dfd85e1_f92b_43dd_b273_b0b2d9b4b7ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8fae3310_3c77_42bd_9e99_ebaa396a1621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_03b66409_b1a1_43f9_952d_5bcf82d63a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8d9d167f_c1f4_4d6b_893b_36fe125a641a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_776f4498_57d5_4a8e_9db1_0add0ec8cfc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1c9b4fc2_c722_46d8_9f90_fe9c263508d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_99794316_abf3_4829_9979_afda1abc156d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fba299c4_b2ac_49e9_a7cb_ccb3838605d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7fd1879f_4a3a_402c_b6f6_f93cd5714439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f6fcbf94_7967_4e0b_a3eb_01c7569376cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7f1539f7_71c2_4cad_aacb_052deb2bb33f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cd7804d2_dffd_497a_b845_f8fe59eeda81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d16910d0_fe53_4907_8be3_c2764872ad70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0fd0fc34_2510_4255_b52a_139776c88cc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_35196c56_0140_4661_ac4d_fb3786f726ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_77c62676_b562_4077_9f31_2869628a4e6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3533f1cd_5f1e_40d7_b6a2_a8ee6164e1b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fdd9391c_8452_4126_a7df_3efb3cfe47ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_80f245bd_538e_4a11_aa4f_c6dff001da8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c5e1e3e3_bb71_442b_97e1_dafdc4f88c1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ff314a7b_a9dd_48f7_a54a_744551127b60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_15166ec6_8047_4c78_9d7f_2afda2687e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1be72399_bc03_4d1f_8c12_27f584a3038f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1aabcdad_afd0_43e3_a822_718cd1198a7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8de24d28_716f_4f9b_9138_c07ac4ca2947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ee97a465_090d_48e8_917e_e08b4ca2485a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_11bfefd2_9db0_4af1_a70f_7118520c5b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9c218489_d418_4473_b2c5_73e2fad8abb8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c992ba17_4962_42ed_9d07_20e6127d818f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_88402215_6f23_4d68_8de7_d13283a303dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b76f81c5_4161_4471_a3c2_e33feaaeaf52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_20c07e92_aa49_4bec_9c8c_a511edf603c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8aa7fa3f_83cd_4d89_bfe7_bfdcedc77428() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_82d80b69_074b_4d74_a180_aa3ac9a22f5a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_71a0bbe1_b094_49eb_9640_6f2d6e2885c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_308fad1b_0112_4514_9871_545732d0e5d0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_96758fd1_3c7e_47cf_97e6_cecee735f6bb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_231c0056_4985_4a15_908e_ad76858eee3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_35249559_9326_4c96_bd1a_8a1c9f7308e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e281ef91_f065_4664_8744_9b890dae9c2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_369e60a0_af82_4d0a_86f7_55ba600b1925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_97a65ee2_94a6_42e9_b552_764779f519da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5d69e473_920a_4c89_853b_65ed286e091d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_852dd5bf_138b_4318_8f5f_a0050659e3f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e170d5e9_2af8_436e_b53b_8e7d23040ada() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9013a0a6_d582_4695_b1c9_35e90c6ed73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_53d71208_f00c_4142_aeb8_38afa4891b93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1397a06e_d440_4d2a_9763_251174b880cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cd63ab28_50e3_4f21_a06f_6382af40d566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fff5fc4a_ea2e_4c8a_9180_da8cfb7061e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f94c1f45_5230_47fb_a05c_2166257d2147() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5fe2d2bb_cc9f_4824_b0fc_9858d50e8e0e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_11bfefd2_9db0_4af1_a70f_7118520c5b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_502e7975_eb4f_4930_89b7_0b9b7c6350c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_04bd1bdb_dd31_459d_a95d_d001ce9781ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_afe8e6b4_d557_4cea_b4e6_6398c40db84c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_be427e26_a24e_4d0e_a651_bbbdcdcef432() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ea28a4cd_f4bd_4487_9a69_e38a819e6e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_5f3ccbbb_ab54_4f43_8a31_8fad3d8e933f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b9199286_65dc_44ae_a835_54488626a6ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_317a9483_f6ec_44bc_ac46_9a0714e83d5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d7c34757_8473_44d0_a34a_f37cfdfa3249() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_70bbaaa4_6c60_4eba_a5db_14b81e319baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e861a9c8_d352_4044_ba99_c5199317b697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_906fe9dd_b933_46f4_8427_fcf0c3c5f755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b1f24f98_9179_49fa_a25e_6c7c84091ca1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_559c1fcd_3154_48b9_a1dc_f9e6f37f3771() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_051f74d3_b144_4f02_bf50_2e7c3c8c5f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f9b4128f_623c_43e7_a54c_7436bc7c9ed0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_95d773e9_5e29_4683_b573_acf7c14da1cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5078faf3_65e9_411a_a828_a13a6358384c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0a818c23_a0e1_48d1_a8a2_ff467c2fae95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e590c4c6_de11_4da0_80d2_f19af0815a18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_309b0f9a_a4d2_4547_bf46_cc2daafc0e5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_152fdaed_1509_445f_9780_341493f5aaab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_86d1ad5e_cc56_46d0_86d5_7a9f805c14ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d3f58846_9478_4ae3_8c80_4d1adb50b902() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5a53267b_b35a_4e36_8d3f_b04bbeebd3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5ee02244_7a10_48e7_8462_68c66410d9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_10676a95_61a2_44fe_9314_963600d4d8dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1ddd4939_3c04_4f8c_aa87_75e0c3fe8660() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3e74925d_641a_4f75_8c78_2ffcb3997616() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_773e3290_bc31_41b1_9613_0194f2728e2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0bde64da_3232_4c64_b790_49751acaeee7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4e92d703_4bca_481b_9230_c22792995cc7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c1a0ad1d_7aaa_4a83_8950_9607546289db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_74ef5886_3db2_4cda_87e3_c397828d6613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b7bb9021_ea67_41b6_8ac1_d3b40c0298ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2d9bf204_0846_4728_8a68_af588d56a2c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3a1ac45d_c83b_48e9_b74f_f627f79fac03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_75a7d86a_7f78_4603_90e9_5d8c0fbf9e11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5bee1966_5e60_47e0_848a_7905dd591c7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_059c9122_c206_4480_b305_52ad4d1e568a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e604462b_37a5_4a46_8d0b_17e74c6d6a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7fd45f81_1269_4b98_b332_d7c5271dbc0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_fa990ef3_fc79_4af2_bb2c_4e0d1dedab8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f33ab305_b833_4d3b_9ea5_90b99987262f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_74f4dc62_5d95_4315_b36c_d759d182c181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_26f33b0f_0228_4338_999a_5195e138199a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_36e7a877_59ed_4f73_9534_6824ab5f5297() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ae93c031_4bc1_42ad_9b77_5e034b08fd66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1d66842e_93d4_475c_8ca0_406af05c9649() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d052cca5_f9a5_403c_a5f2_d1dd7e8d903b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2da6f0d6_9c61_456d_b0ce_eead74b5dfff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_adf347f4_c3e7_48d9_b104_7bf6d8446f53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_52a2a986_b76e_4783_9785_29d56cb7c452() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_27c1f921_faef_44cb_8017_a73794108b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cb684d6c_f621_4afe_909f_916f5253ef33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cff84526_a922_4736_8461_5af1ca488b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7af20def_9342_4aac_b6d7_b2f7db1a1884() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_59be8ecb_cbec_412f_bf6a_8a7310faca29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_155fd60a_fa44_486f_acb2_3f0fa86927b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ce9d2271_283b_4be6_b84f_1faaed0e968f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_537221d0_40fa_4626_9eb1_170d54cb45dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_139b6088_e76f_4f09_adc1_22009859e72d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_cc8bd1ee_220d_4959_ad08_7cc4d2698e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_837148fc_9491_4240_819f_441dac599a8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_34831057_edd8_454b_a62b_0cf101905b76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1e71e19d_a256_47c3_b974_ee3ac3567a5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a613100e_763a_4706_9897_f2baebe010d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e4df0806_8004_409d_8522_e47c7de018cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5fd6d602_1e80_4200_a4e7_86fc7303a207() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_81e4d4d4_3e2e_43a3_849a_30554f84fe98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9fab06f0_d3c8_4ca3_9853_1b26b564befa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c7dfa0c3_8db2_495f_a5db_4d2edf2842b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_944d49a8_02b1_48a1_9b18_fe2cc022ed53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_051f74d3_b144_4f02_bf50_2e7c3c8c5f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_46318ffc_e207_4052_8175_4accf7d38b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_183075f1_61b3_4d78_b46d_0aa53156a193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2f2798ef_f2b9_4772_b35a_74397854eb77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_99cddae5_d688_4272_bd5f_b84f2fa15b10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_603118ad_7f1e_429e_b190_a57cd3cd9c1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c4b517fc_a496_41cb_b425_a49f07235a41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7c73c158_ea87_4543_bcb8_88fa5b0a2e10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e8320f90_7d06_4fcf_9127_fe995f264947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_852dd5bf_138b_4318_8f5f_a0050659e3f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_207f6472_fca5_4bc6_983a_b6a6d4bfce69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1ce0146f_3fe1_4611_8673_0e71d8f8c389() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_906fe9dd_b933_46f4_8427_fcf0c3c5f755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_17392b4d_f207_47de_9da7_8528b4deb0e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_adcd89e6_99bb_42a6_a539_3d504508d0ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f8f4df55_837d_4d96_9088_842886efb575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_78101e8c_7184_4c83_ae62_408b34b43f72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b1f24f98_9179_49fa_a25e_6c7c84091ca1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_473b0d9f_8fb4_469f_bfd9_1f0cc4a17626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ebe40ab3_b9a0_4864_9d11_ff89eaabae78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5e3b272f_fa9d_43ff_a1bb_da593b9ca90d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_ea6d834e_c25f_4d0d_9560_c6399c59d010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3a1ac45d_c83b_48e9_b74f_f627f79fac03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b17300a7_02a9_45b8_aa3a_fabe80514afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c8c9c676_7299_4bfa_8850_f5cb00818cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6d33978c_32d9_4732_bceb_19935664b243() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1d921567_2c1e_4fcb_b868_e9c06dadd7d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d8dcd83a_7bb0_46fb_a883_364409f6ff72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3580e7b5_17ea_4286_92ff_195e213323e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5c9a1566_b7db_40a9_b13e_669b7ae44c03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_893fb587_d247_4eb1_b160_e4f546a7b6b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_902ff0c7_8c3c_49fe_92d2_cf026e8d6c58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c54a7d11_55ab_4d97_8ae4_43186b469c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_54fe99eb_2403_4857_87ca_633fad6f907e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_508bc443_be3d_4a01_8b05_2255086c5baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_41d5bb15_7ac2_42ff_8a5e_56b309208350() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_86be6dc6_65fd_4468_a60a_e3e47711a13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7a84bb9c_e9f0_4eb4_87c0_ec8c28a07376() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_559c1fcd_3154_48b9_a1dc_f9e6f37f3771() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_eb8e8991_8992_4225_b5b7_c06def7bec18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f3d338af_1cb0_4e73_a69b_c92fd67543b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_96e72c4e_8fbe_4fc5_b64b_52be64623984() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5f8b802f_062c_4c76_8517_9b46b7f012f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_eeced3cd_7e38_47db_befc_8ae1f8e2d400() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_57bd2904_9fbf_4ca3_afd3_62c6d53caa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_df40f16d_b8f3_4958_b609_b121a6998439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c57d4bde_8ff5_4158_921b_352f5edd5598() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e34c92e6_6ca6_4954_9eea_707666ef2dbd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5aa89345_cc9d_4dc2_b311_a6a8bb5d793b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_7f1539f7_71c2_4cad_aacb_052deb2bb33f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_df5b9228_2696_4e83_a8d6_4ac73fd9f293() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a71540fc_8aee_45c6_b28c_d7200ba0726e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c74d4c71_ed19_40f7_be34_fdcccd5b420f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bccc0175_c942_4b78_997c_62b1cd4a0dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_309b0f9a_a4d2_4547_bf46_cc2daafc0e5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_956eaebc_77ff_42a5_a59b_6631b95feec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bd315b8b_e503_4e21_b890_acc9c6c2a332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_53a31fe1_53df_499e_b9a2_7e3a073fea42() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_04f52b54_c600_4a0b_9e27_2ac4f08e7378() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f6aff357_476e_495f_9fd0_216cdbb2ff04() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_dda3c9c9_f045_4712_8539_42db7896205c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c992ba17_4962_42ed_9d07_20e6127d818f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5f2ae41c_19ee_4d55_b31f_3bcfb0f51489() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_20ca20b1_be92_4e73_b5fe_0a99b9d61492() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_dc1ffd2d_9073_4e07_8b58_fd9021a3b42e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_186bedb0_34cb_40cb_8f06_221f1c02cc63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d047fc3b_fd72_4a3d_b515_15dcb89b9e4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_870dc8cb_92ad_4955_b58e_76b9bc87fde4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c6cf6f76_423f_4e55_b814_7658e3623cbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3580e7b5_17ea_4286_92ff_195e213323e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_209530a3_f380_48a2_84c1_5ec6d4a10965() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bb58dc4a_3ea9_4bb7_82be_6d42ceded1fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1f3f023c_03a6_489c_b07b_3fcf7f0618b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3e74925d_641a_4f75_8c78_2ffcb3997616() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_859082a5_7531_4f30_b10c_8f025ba183fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_838acb3a_0aaf_4d0b_8743_e64613f327cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9a094b3f_0ca4_4f27_9f33_a0f1134dadf9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f64c9cb6_ebd0_4963_a522_4c9710d18107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_5696a735_18a9_43cb_98cb_6f022e3786a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1fcd229d_a37d_4f6a_b02f_fd276ae780c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6aa6d66d_1d99_461d_b61b_2f00d7bb25f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cc759601_8076_4dae_8e91_9ae9341fad01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_12527554_9999_44f3_a177_eae88d8f4b31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cfb99399_033c_460c_bdba_ee419269a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0956fdf9_6a1c_4977_878c_ff09e1d9164e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_dba89110_4c34_43ef_be35_1eafbb821cf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f6aff357_476e_495f_9fd0_216cdbb2ff04() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_369894d0_172d_4f2f_970d_964e34bae181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cb50fbbc_46b6_4186_98f4_51bf54b9219f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e2440eae_32ee_4b3b_8139_c05c906ab00c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0bde64da_3232_4c64_b790_49751acaeee7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ec77f40f_1415_4266_aa7c_fe4f3b257060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9ddbec57_e125_406a_803c_cd81a0126df1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3df4f4e4_d5fa_4146_ad86_e93e7d550a6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f011d5fb_aa07_48b0_9cd1_af0ecca41dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e6f09294_9cfb_4923_a0bd_203b6960f0a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_3aa4a0d8_a95d_4eb8_aa03_0420de531ec6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_28409518_f84c_434b_b27c_f6d60e999868() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_467d1497_ef09_4cf8_9d4a_2e42ee656624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5fe2d2bb_cc9f_4824_b0fc_9858d50e8e0e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5e307478_a7df_4414_b169_6c0c62dda5f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9bd0bdea_4e18_47be_a6f2_5a5c0aa7996d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_43e777a3_64eb_4c3a_a73c_3256aa5a63d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a3cf341a_a9a6_4de3_b69e_38d274b14fc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3cdc3c22_9d91_436c_8204_f90abb946706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_aa28fef2_92be_4ac0_a201_e95fc218a19b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8477295f_5e47_4367_8f2f_919d8d8af3e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4e8f30df_752f_439e_befa_a6c0338f0687() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_47692e4a_b11e_4af4_83c4_b4bed57de911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_54fe99eb_2403_4857_87ca_633fad6f907e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_90b67a1d_e9dd_4940_a901_1bb527fd8cce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_2a17ae40_b5d8_453d_8c41_11f92d89db3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_ed793831_560c_47ff_8b5c_d644581d76e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b1f24f98_9179_49fa_a25e_6c7c84091ca1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5c1473e0_c333_4d24_bb90_1046368e7fe1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_476c5912_66dc_4aad_930d_a029e59e8828() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c57d4bde_8ff5_4158_921b_352f5edd5598() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_56d2d96a_f882_4b84_9860_f46d3b00bdf7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e8320f90_7d06_4fcf_9127_fe995f264947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_71a0bbe1_b094_49eb_9640_6f2d6e2885c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_77597bec_75ef_451d_ab1d_94d18ad9332a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_85f7a122_2b55_4b74_a7d9_f9014e02b781() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_129ede65_dd3e_4b25_b189_2c95279ce610() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f3fa43d3_3421_4156_a9d5_61cfe3ca7f82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4cda2c99_29fa_4aba_ba14_1ebf7fe59969() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_fdd9391c_8452_4126_a7df_3efb3cfe47ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7931051c_bbf0_437e_8703_b16041fb6779() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_efbef808_23a2_419f_9cf1_0c09fcdc4b1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_776cd8d1_e285_49b9_9990_8dd13e35085b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_04f52b54_c600_4a0b_9e27_2ac4f08e7378() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b3d6d61e_3a30_4377_98ac_4f758fc3f647() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_63527cff_58d2_40cd_a85c_e5f2206a18fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c1a0ad1d_7aaa_4a83_8950_9607546289db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4ea33365_4145_4765_82e4_ceebfaaff96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0f31f959_6a22_483e_82a3_07a9c9d8c5b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_768ccb95_8e63_4503_b460_80bf946339d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_353d9793_a612_4c0b_ac42_21b26fb52848() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0a627390_6365_4467_8626_500f1874ad03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2e1e5bf6_7af8_4b41_ac0b_8bf416d75685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_14afa445_7117_458d_b311_990d6e6ae756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f45092d9_cf90_4996_b38d_069a7ed8534e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6fd099b1_7fe3_44aa_9a6d_865ed72d2237() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_bccc0175_c942_4b78_997c_62b1cd4a0dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_71a7034f_ad7c_48a4_8c19_efd469d07dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7b8fd12d_a160_4f8f_ab50_2b534a046413() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8fae3310_3c77_42bd_9e99_ebaa396a1621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_752d2c97_2c2b_4068_90ff_1746d41eaef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_989df6fd_07e7_4b9c_b493_768e3d24cc03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_7a84bb9c_e9f0_4eb4_87c0_ec8c28a07376() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7b8fd12d_a160_4f8f_ab50_2b534a046413() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_174a84ba_5f68_45b0_9d84_38b3575d7d0b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_eb4d0fde_56be_4727_81f4_efc642596141() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_888f0e9e_cd95_459c_b30a_c9a220d1f2e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_889a9697_b401_441b_bb58_e8b190370501() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2b12da1c_6c29_439d_b2eb_8c73fcdb509a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ac01f334_489e_49bc_894a_fa25edd8ef3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_8dc57733_cd59_4b4a_b85a_7cd150b12a6d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_2f4c8238_cefd_4d65_b5a1_5b32aaa090a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c126f5c7_efcc_4997_971f_d58e4eaa438d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ea6d834e_c25f_4d0d_9560_c6399c59d010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_af0d8ce6_ce4b_4cd2_80f6_80bab56478f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f5a83bc0_c8ab_494a_82ba_f6673deeddaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4e92d703_4bca_481b_9230_c22792995cc7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b6ec3c5a_06d4_4c6b_b3fd_e6434ed8bb85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_54eacfbc_94c7_4704_83cf_32f232933c9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_73323ad7_6ad0_4d30_9f8b_2ea176dc8500() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b415ad0f_6906_469a_971a_8a35734beda8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e537b67a_9a8e_484c_aca0_5b0a8b3a8cb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ccb38191_4b54_4e23_ba4f_e0902b1bacf0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1d921567_2c1e_4fcb_b868_e9c06dadd7d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b8ccbd73_7acb_415f_abde_3e2e9a23dbdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_66c25bf0_227b_4ed3_806e_d20209521601() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_19c69545_f1ca_4d3e_89e5_75a216902a9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2dca65df_215d_49a7_a4a0_8aa28545f847() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f627fcab_268e_4fb5_9d60_190c0dcc52f4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ee234a98_2600_4606_8117_d0b09b53316b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6720d446_3ff2_4541_8f9f_5edd17223cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_eeced3cd_7e38_47db_befc_8ae1f8e2d400() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1503155d_ac46_4240_a605_9f935c4d4949() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4dd952ee_ba10_4cfe_82dc_320df8758a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7a425cee_f8e9_4d1b_8009_5245ce36bb31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d4537622_86e9_4684_834e_fa06927b46f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b55614d0_9d11_4cfa_b021_a737ece939da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_850c6745_004d_4835_bcc5_5f6016eecc55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_11bfefd2_9db0_4af1_a70f_7118520c5b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ed793831_560c_47ff_8b5c_d644581d76e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6ae33b21_b4e9_4c03_88d6_35d7cc8bde26() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1be72399_bc03_4d1f_8c12_27f584a3038f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2bdab585_2cee_459c_a708_e4d872b5bd91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0c8a7c68_4ec4_40d1_9dc9_972749087685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_84c9b48b_484b_40a1_9266_2fca3b54c173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_36e7a877_59ed_4f73_9534_6824ab5f5297() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_54eacfbc_94c7_4704_83cf_32f232933c9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_476cbb75_d885_4e10_96aa_973202f7685d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_96a31b87_6dbd_466f_bcb3_5fcf77bbff29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_776f4498_57d5_4a8e_9db1_0add0ec8cfc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b6643769_fd22_4144_9d7c_f2590a568f09() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_cc759601_8076_4dae_8e91_9ae9341fad01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_72ee2213_1804_4af5_84e1_f9e5efa5eb71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_42e9d229_375d_4306_89bd_d6180b1abbad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c7e9d0c2_c013_426c_9646_c690a60e4a70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7aee86fe_bc37_4d55_b027_c7b748e3ac74() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b775ffbb_eea3_4c89_9665_c3fdfef72498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1a1c53fb_ae1c_453c_bdf8_1a0cca96ee6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_52f77a55_6d26_4fad_9a9b_bccf78bf53aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a51a14b7_3e4e_44fd_a7f8_00a81cb52c6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2a87427d_498b_46fc_911f_e0edcde83ea1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_67dbce46_19d3_48ce_9b5b_7e3a27efdaf6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1202bb40_7fc4_4c9e_ad42_f53d735c88ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6d61ca5c_49af_420a_842b_f69cbe6d5351() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6439eea6_3e10_4fb1_88bd_b536b7029012() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a807cdfc_7618_4724_bf38_3a7799957127() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e4e30e93_58be_48f2_8cbd_56e20d4d6d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d56122e9_63f9_4197_8474_4c9e4b996fea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5202199d_1983_4caa_9288_6d7bf28ede84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b464ff5c_08bb_44aa_a15f_2b5f2229cc23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9e19197e_2cab_4014_8d71_429026303d38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b049245f_4edc_428d_bc4f_04b023368bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_04bd1bdb_dd31_459d_a95d_d001ce9781ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_912bc225_ebde_48cd_846c_ab3e903223ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b9fa3c39_7a59_49b5_8b5c_bef3affacb92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_adf347f4_c3e7_48d9_b104_7bf6d8446f53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ba1c5b0f_80f6_4870_ba6c_a2ea0f921d3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_04677b08_4fb2_45b4_8f8d_e4ceab8b7b58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c6cf6f76_423f_4e55_b814_7658e3623cbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3043bcb4_364d_40cd_9f39_be2317e8449c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f26d649c_4083_4346_8537_34c54606d352() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fb6499cc_e84b_4e32_a26c_5eecfe7e449d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_36ee7891_38ec_495a_97e1_b59cc9e3ad61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a51738e8_8ff7_4126_b187_4f54855e3d07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4cdd735b_28eb_4345_903d_3595b2594046() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_762081c7_71ba_4857_bddd_1ab5607e3459() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8be5dd20_2762_400d_aa63_e5e0d54529d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e4df0806_8004_409d_8522_e47c7de018cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_41f96a3f_f215_4bad_b483_9d3d75e1db12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_021770b4_737b_4b4c_9345_16c0f969cf0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8b87fe58_f430_4a0c_b1cd_de5c19751dd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_406fc22e_9088_4b3d_8395_ff1fda9be614() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8d250a84_2ce7_47c4_8504_836b864ce35f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1ce0146f_3fe1_4611_8673_0e71d8f8c389() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b6643769_fd22_4144_9d7c_f2590a568f09() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c9ea1ee3_2fbc_4213_96df_2fd046dee2ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5781a7c2_c5b6_40a3_906b_4ef5d0c75fc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f011d5fb_aa07_48b0_9cd1_af0ecca41dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_dc76ee2e_a868_4043_bdaf_27848cd83e13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_82d80b69_074b_4d74_a180_aa3ac9a22f5a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b304ca62_3625_4d30_8f2b_0934c8ec6007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5a61ad07_1bd6_4994_b10e_bf7bf617de8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5aa89345_cc9d_4dc2_b311_a6a8bb5d793b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_02b2c1b2_5636_4b6a_ba2e_4deb0cff6cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_61028804_9cb1_4ab6_a016_c4890cc834da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1d3345b9_e249_4f3e_a3b5_56474c6fcf6b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b46d2bf8_ba4c_4258_ba39_025ac1e46eb1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3d363009_0e39_496c_a531_33f1621d3c2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_56c69a57_f7a2_4ad8_a152_cf882b12da81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fba49c7e_065b_4cea_9bfc_f93722e786d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_353d9793_a612_4c0b_ac42_21b26fb52848() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f3fa43d3_3421_4156_a9d5_61cfe3ca7f82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bbec2e79_00ba_487a_982b_36f6982072c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0ddbdfcd_5123_43d4_8552_0d337030663f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cbbb7f67_ae7c_43ce_9dfd_98814fee75fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_508bc443_be3d_4a01_8b05_2255086c5baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d6ee4fe1_639f_48f6_a4fa_fda54f6aa5ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b775ffbb_eea3_4c89_9665_c3fdfef72498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_60fbb24f_18b4_4955_b2b1_34af2cc7d7a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6d911c03_a151_487b_985d_81055a9cd145() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bfd55b99_f54a_442f_99ed_b97875dcaf7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_45076c5d_ffb2_406e_9172_4db36107ef19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_59590d27_9ea9_44d5_ad25_e2071a38655a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1ddbc9b8_c279_462e_9540_3e6b194602cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_36ee7891_38ec_495a_97e1_b59cc9e3ad61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_deb29c8a_fbb9_4e87_9f95_4191a41fa7e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_9a673136_183d_4e19_9dcf_89a75a6901c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_90b42e37_26d5_45ac_9b7b_d83727a37091() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_166520be_8ecb_4d86_b53f_0626a08c2442() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cb684d6c_f621_4afe_909f_916f5253ef33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f09b3463_27a7_4c6d_8724_c5a3f2e32cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fb7eb574_281c_4e4e_965d_72a89b0a9306() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5b636626_176f_494c_960c_2aeec6e8c9d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8f6a9f67_0bce_4651_9a02_a7a05fc53beb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4f626321_6ff3_4653_8108_50e98aba4bf1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_df968c45_8ec5_4db6_8e54_8011f3e72b2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_56d2d96a_f882_4b84_9860_f46d3b00bdf7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_79887937_3b75_48a8_bbc6_844389c81975() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_adcd89e6_99bb_42a6_a539_3d504508d0ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f1c2c52f_3296_40c8_a363_0bdd1b49f795() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f03b5b1a_5f00_4ef0_83f0_c0012f7db61c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_23cc3949_d600_4010_9257_8e0601397137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2bd3b8cd_4a44_49c7_8e3a_2251035b70a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_044b8ed3_30a5_428c_ac24_b46fffabb859() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f46f00d6_c59e_4722_a85b_e4e2c303a86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3e74925d_641a_4f75_8c78_2ffcb3997616() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_abadeee0_762d_46d9_97cd_13a55432c0da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_eb2e12e1_c896_4a74_9752_b9eea4582464() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_28f11549_6f7f_4b45_bb7f_b51b0e65c9ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_9398b375_3c43_4d45_aa4e_ebfb0533e9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9599ba02_82d6_4346_a876_c227a78ffc3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_532a10b0_cec4_4763_ac4a_b261b1b62b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d8884e2f_647c_4554_affd_b3a3b4b2087a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e590c4c6_de11_4da0_80d2_f19af0815a18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_00e25ee7_df89_4130_b4d0_734d8b8387db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ee275eae_8c09_47f0_8b88_f147e8c07f6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_679e86e7_cdad_4ea7_960d_bc14440f3a2e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4657e7a6_48e8_478d_8167_92da1cc5bee6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6b839c71_69b5_4484_85a6_8249f4b73551() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f340ac67_cd16_4047_b2ab_8ff63c411e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_99df2b99_293d_4234_b27b_30d7cfb3a968() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_df57a0cf_d4a5_4091_94bb_fe0633be8d6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6ae33b21_b4e9_4c03_88d6_35d7cc8bde26() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0d1e376d_5ad4_43d7_9e0c_843f05532ba8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f3850f03_165e_4d66_8a95_419b3033d801() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_312977d7_73af_441e_bd3a_c5b9c03b2995() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0b739275_02f0_494d_8cc4_7438460799e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_2c09e5c2_89cf_44ed_b026_2e6db2bb15f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d1e6a867_619d_45dc_81b6_f3f5f8fa01c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b5ec3c24_c897_423c_9e32_e883407e380d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_caee20d3_dd72_40c5_9116_07af8c8c30e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_059c9122_c206_4480_b305_52ad4d1e568a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_207f6472_fca5_4bc6_983a_b6a6d4bfce69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d83709bd_613e_46fa_b0f9_2294263105fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_23cabc4e_563f_44c9_89a4_b3221fdb6e1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_06405b8e_7fe7_466b_bf3b_40ff5c3a6263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_186bedb0_34cb_40cb_8f06_221f1c02cc63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_41f96a3f_f215_4bad_b483_9d3d75e1db12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1d921567_2c1e_4fcb_b868_e9c06dadd7d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_17e3161e_e269_41c8_a881_e19c78a26c63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_dae921a4_aef1_48f6_844c_a6ded0c3a021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4690918e_c596_4405_80de_ef25cf0eb2b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_34152633_e620_4b86_8c8d_ed05e5830a30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_166520be_8ecb_4d86_b53f_0626a08c2442() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_67d8d6bc_24fd_4303_9958_5e3913700460() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4d84cb57_23f4_4fd5_904e_2d9cc1bf1c77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9102e3d8_9dce_40fa_b484_11e7868ea84b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b9de911b_d08b_4d3c_b914_c922f28110d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e861a9c8_d352_4044_ba99_c5199317b697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_15aba3b8_faf7_4d1d_9490_b70b291af662() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8e2a441a_9bb0_4bae_abdf_c1dfaadf10b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_adf347f4_c3e7_48d9_b104_7bf6d8446f53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1cd7c96e_afbb_4965_8e60_426f80f4803f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2ce0f22d_d3f4_426c_88fd_319bac62731e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5b629202_3a60_41ea_89d4_c2b7e2a355ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_88402215_6f23_4d68_8de7_d13283a303dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_14382c43_b9b1_44aa_92fd_e2d8bf052f33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_25c21292_520c_4dbc_875d_6c2d4848059b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ab38e9f2_16f1_4ae2_ace1_4bd50a35ca02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5f099385_04ca_41ff_bc6e_4a0b051d5824() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2d9bf204_0846_4728_8a68_af588d56a2c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_caaf0ce7_3934_4e1f_96d9_0f5f8ead05ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3de2730f_1b4a_42ff_b3ef_9a43265acc49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_327811e1_3a2b_45af_8225_c5cc17620a81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_20a1001d_277b_4670_b15c_d4a370bb63f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_590d5623_4df0_4615_bcb3_cdf401d089fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_38b59086_0c7c_47c3_8af2_395941d0e84d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b584cd90_67cd_4160_90ab_dbfa4bb4e38d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b7daf45b_923a_4877_a331_19f23495c9a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_853ce822_49af_4acd_a17a_4eb9fccbe810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_331f7f64_351a_491d_a5a5_9c10507d083a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b584cd90_67cd_4160_90ab_dbfa4bb4e38d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c9ea1ee3_2fbc_4213_96df_2fd046dee2ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_31b1f795_b60d_4155_8803_05922ff69613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ae9c7754_68e0_4925_bad1_b2b8d43fec1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_857a9de7_b0a1_4caf_b31a_dcde96b8d8b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ea28a4cd_f4bd_4487_9a69_e38a819e6e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f90db12c_06c6_4dbd_ae69_afdf96f69b14() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7252ce4e_6fae_4894_8acf_8ceac7dd73f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_39404c94_7903_4a27_a397_e2aaa87ebcb2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b51dfa66_eee9_48f5_86c1_6e20885ffb3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_bc4ab49b_0601_4e21_a880_22c0a3e50ce5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1449e29c_9f58_4edd_8552_1a692625c9ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9013a0a6_d582_4695_b1c9_35e90c6ed73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f857a5f7_8519_4a83_827d_9f2b816d002e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8492da1e_dc07_4d30_aaac_d03d44929691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5f099385_04ca_41ff_bc6e_4a0b051d5824() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c68aaf08_12c5_4f24_99da_26c69e2e2c8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2160d417_0be3_419b_975a_65b7832bf5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a56d4207_36db_4346_8e63_d05b27745931() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_191a58ac_584a_427f_91be_79b5da0c542a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f9aa0cc3_77b7_49bf_824c_c80c5cec8d71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3aa4a0d8_a95d_4eb8_aa03_0420de531ec6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c0829858_1dbb_4441_992c_d4c2d7eba871() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_49f435f1_9a5d_4190_9851_969891b30736() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f1d2af93_6d70_4330_905a_ed536e36743d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c29e8ca6_1731_4c05_8780_194287bf2735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f64c9cb6_ebd0_4963_a522_4c9710d18107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d861fea6_5b9a_4c61_87c3_268fee419451() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2267bd43_5b1b_4e37_9989_818e70f0f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4b600242_6994_4929_a1dc_bf035db62a40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_90490bc1_5755_4419_87cf_38277424680a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e6668c10_a3e7_44fd_8f86_5b9a80d55a0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f1fb57c2_bf89_4651_8957_a0100a5f746a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_58a81e7b_aab8_4bde_9dbc_1ea6fed606b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_89f2f8ac_2eb2_476a_bfb1_32d17ca1de85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d8884e2f_647c_4554_affd_b3a3b4b2087a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_49af8968_b9ec_4990_9bb6_235514e7a633() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fa639bd1_ae8b_4dc1_bd1a_96d81e46da0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8e8b4672_715b_4a7d_afab_ee9942726535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f9aa0cc3_77b7_49bf_824c_c80c5cec8d71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_88e7fb96_7d57_4ada_9ede_fed19f3273e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_cee968d7_597e_49e7_85d1_750d04bb7c68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_752d2c97_2c2b_4068_90ff_1746d41eaef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_776f4498_57d5_4a8e_9db1_0add0ec8cfc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9a0e23ea_85c8_4de4_bef1_c7102c099819() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_65c65ee3_fb68_4e84_a28e_8789ff13e3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1026ac8b_c420_4bda_b850_6da2ca5e811b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2e1e5bf6_7af8_4b41_ac0b_8bf416d75685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_97400d8a_fdfc_493c_a9ec_509a1b9632fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ee275eae_8c09_47f0_8b88_f147e8c07f6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_48628e34_531f_483e_b5ed_385f5217b923() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6b100c66_d328_45b8_99bb_50c341be8b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_87e4e8e3_baeb_4501_ad60_6a69ad586c3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9985de5a_70cd_449b_9925_ad41d39c710e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6ed42b3f_3d49_4524_87bf_7f7a4e47baf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_19bf1445_5581_4d23_8a67_abdfa6fbed06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c07a70eb_a070_46f6_a707_8e66cdc571fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_536861b4_159b_4b4a_9fc3_d4e421e41447() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bfb1e452_9fc2_4bf5_b022_056ae3282bae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5cda23af_36b1_4597_aced_7e0e514b43a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1edf4c22_4659_4acf_97aa_92d8c74fc401() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_eeced3cd_7e38_47db_befc_8ae1f8e2d400() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9cc92481_af05_4cbe_9a43_1486dcbc880d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_72ba1603_7291_4e4e_b19a_2fc10ccabece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3b5de9e4_af92_41ed_9442_893609075436() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f5cf659d_1e97_4dc0_b1c5_8080378b5354() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_135cf8e3_3710_47a1_982e_98f4205d55e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f6958a5d_e8d4_4a34_be99_bc2f34789ffe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1d57b98c_249d_4d04_bcd1_3f4cddd13527() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cd7804d2_dffd_497a_b845_f8fe59eeda81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_888f0e9e_cd95_459c_b30a_c9a220d1f2e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_508bc443_be3d_4a01_8b05_2255086c5baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_216a4d49_c217_4f9a_a984_84a1f7bbaf3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a58f8da5_ec99_4374_882c_85e2b081e60f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3df53c03_814a_4697_92f6_c7304fdbfd4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c07a70eb_a070_46f6_a707_8e66cdc571fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bb5eb97c_de5a_4499_800e_5b732050afc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1d3345b9_e249_4f3e_a3b5_56474c6fcf6b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ec77f40f_1415_4266_aa7c_fe4f3b257060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d1e6a867_619d_45dc_81b6_f3f5f8fa01c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_17f11aac_9fa5_4b45_88d8_45abfd2195be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_07994110_eab1_4ff5_9cc6_2f3e285e46c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2326342f_d981_4249_8917_81c6971c40e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e4df0806_8004_409d_8522_e47c7de018cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9fab06f0_d3c8_4ca3_9853_1b26b564befa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_514f0370_4aea_4da0_ad32_7b69567fc0c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7d2d09de_ef3c_4564_87cb_895952dc1ea9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f157031d_a927_418c_9801_2f717688f827() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b1410c7d_e423_4d66_955a_ad0d1057dc47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c37adbe0_87ab_4f00_aeaf_e17aaa9662ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_7c7378ae_5efb_41fe_ad56_867f8c7eaaee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e2c98959_eeb5_4f8c_8ccb_ff214b0120b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_75905ef1_177f_4199_bb8c_36561676f6dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_efd98c7c_3d2b_4777_927a_dd6f3703fa83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b31b858a_5685_4517_8a10_db5e4f8dde47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e6668c10_a3e7_44fd_8f86_5b9a80d55a0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_85440e13_530b_4b02_bfd6_e24930316463() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_20fa7093_470f_4e24_a176_e3f6829f9c00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cdc487bb_a5e4_49f2_91f4_12467fa87b47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_288ee5fa_2143_47a5_8d7f_cf7d7be1e2e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b3d3190f_ee3c_4626_8c7a_71b57cf59270() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f7e62e76_756f_41e2_933a_ae84ab01d925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_426aad42_fdf7_4e45_b76e_7a4c9d211ad9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8125673a_5b91_46a8_9550_f388b11e697f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_feb814e5_d0c5_4776_a9cc_22ff0a67d46d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f6f09421_6a5b_4047_baf4_1397188a1ca9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_897e7efe_33f0_4881_9493_2a189e99cc4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6644ea3a_59f8_46d6_9bd9_6e1c71426910() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e4a779bb_53b0_4792_94c7_dabea65d6c7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b5ec3c24_c897_423c_9e32_e883407e380d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_317a9483_f6ec_44bc_ac46_9a0714e83d5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8ebe2756_2aab_4658_b8cb_e32542a30794() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_902ff0c7_8c3c_49fe_92d2_cf026e8d6c58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c74d4c71_ed19_40f7_be34_fdcccd5b420f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7eaf6c04_d2e1_4efd_9cfe_71254ec5ffed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b94d4181_a53a_4eaa_9d74_cf3e1eac622f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ede41b02_7ad7_4092_b44d_0b4c40bc64c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_38e44b78_d107_46bd_9816_f74240dbbe55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4333ea56_ee3d_4b6b_b9aa_49658a2d90a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_18971e1d_253f_4b42_ae7f_7ce2da6729a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e6f09294_9cfb_4923_a0bd_203b6960f0a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b1afa205_4c47_4eb3_a540_f0d2589e90ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d78e52f9_44ae_45a7_994d_15b0e9649ae5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fac00f35_8dc7_4ea8_bc00_916d4f0b32ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b4c55071_d0da_425e_9a8f_e0d165a9934e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2dca65df_215d_49a7_a4a0_8aa28545f847() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2609348b_1fd0_4662_9467_36ce54be2572() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_de98c634_292d_4e4a_a9be_9cbdb1453ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0956fdf9_6a1c_4977_878c_ff09e1d9164e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_45684653_c8df_4591_8ec5_df8190d76175() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_044b8ed3_30a5_428c_ac24_b46fffabb859() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a6bafd0a_b479_4f71_b431_d5703e3e50b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e1e8cdeb_3d02_48a8_8da8_470ef9f1c571() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_129ede65_dd3e_4b25_b189_2c95279ce610() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2f87392d_edee_46ba_a65e_f365bc303b92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_052b4dba_e3ca_4e00_b4d5_6be9817f6b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8b3784a2_ec2e_4c7f_bc8c_c4c517f82184() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2bd3b8cd_4a44_49c7_8e3a_2251035b70a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7c7378ae_5efb_41fe_ad56_867f8c7eaaee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_88b7c0bd_96fd_49fb_8950_54bbdbfb3955() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_aec493bd_1061_4737_b9dc_5a3ac2d28c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_adccc442_ad7d_4c64_a5b5_23bacc7577f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_d7446950_3285_474d_a270_978789408412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4d592097_c7d4_4da8_b004_a26b4cca3e61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7d487dcf_8861_4a4d_8c89_950f5929a6b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_3d3df9fe_0021_43d5_b94b_4dbad3123b5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e9ff98b8_ec05_4350_86a9_fa13aa65f5d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_12527554_9999_44f3_a177_eae88d8f4b31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f16b00ec_60da_4bdc_b1be_dd86df39e52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c12c4499_f0fc_456e_93f0_fe00243b5e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_decd4ff8_1f22_48ab_8226_55dbef62ec31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_341e3dbe_08cf_4eba_a4dd_0ef3f9c50959() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_59590d27_9ea9_44d5_ad25_e2071a38655a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_2c09e5c2_89cf_44ed_b026_2e6db2bb15f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d6ce0deb_2c91_4752_b825_54171ba34825() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a0fb3330_ea61_4dff_a2b0_14444981b831() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f7973b05_5fb6_4dc4_84db_f24849dd5f7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5d69e473_920a_4c89_853b_65ed286e091d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7af265cb_4bae_4218_b9b9_4570657cc0f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2d45d5bc_274d_4a44_a0b8_d2d6064f1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9533448d_2fee_4767_86ef_8aea6b271ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8315c320_d54d_46e6_bbc8_56d3bd833794() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c1f00d4e_4e3e_462b_9d63_e051bba73279() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a97c6473_18b7_4216_ab35_c37ada968197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a5bf4aa5_654d_4ba3_b263_ef14423a5685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ae9c7754_68e0_4925_bad1_b2b8d43fec1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9132f087_5382_4cc7_97ff_06afec628fdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_48e56d99_2ec1_43da_9e88_ea4d483c7826() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2e1e5bf6_7af8_4b41_ac0b_8bf416d75685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0b020b7e_e275_4d20_b6d8_9125997ef2a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ce9b2eec_cbd0_43b9_a03c_6416dcc5337c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3301f7d5_623c_46ca_a795_243a2b0115d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_dc0b4f95_5ec2_4c8e_a94e_348f9b206903() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_891dd467_e561_47f3_a362_bfd8533fa19e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_46318ffc_e207_4052_8175_4accf7d38b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_17676952_3831_49ea_8e89_516b6c4f39e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_467d1497_ef09_4cf8_9d4a_2e42ee656624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7dfc86d5_53b8_4c37_b8ef_1b4b80453952() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a59e8992_85cf_4c11_b7bf_a0f2e37b64b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_74208003_764a_4b0b_9d1f_f89dcc0abb01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a77678ae_a790_43bd_b8fb_fa00a6124936() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_480cda45_1d9e_4766_84ea_cae975e39ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_39273f84_d873_4ea9_ab3a_bf51f2424a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_df5b9228_2696_4e83_a8d6_4ac73fd9f293() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7559a675_cf04_4529_b0dc_10f9fe98979b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7f2c7355_252f_4ae7_a27b_c453357e2ae4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_25da0985_6082_4dda_a8ef_9f298114257a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_efc4fdf5_01ab_462f_b789_f61b8656e61a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4333ea56_ee3d_4b6b_b9aa_49658a2d90a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a9db90c2_2084_44db_9f57_1bb142403fd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9d5c132b_232a_453e_b585_e1d40790796f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f2bec0ea_5c26_42c6_adfc_7e458eda5ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f7e62e76_756f_41e2_933a_ae84ab01d925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6bcd3631_fb4e_42ba_81b8_7c3b4adc9638() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bab21046_b0eb_4233_9735_9d2cc0eae706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e71a78d9_6746_41f7_9a76_2121770e42ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_78a23fb9_896f_479c_8aea_7a442b9cc078() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_12a59985_80fb_4acf_b7c4_39a45040d27c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c626dadc_461a_4b01_8fe8_7c9c08435417() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_87d3330b_a138_4bd0_af92_8169d36c1e27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_68f98558_29eb_40c2_b40f_1323f09db799() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_86ada2b9_4bc5_4837_8bcb_373188b41272() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6b8c380b_6ab4_4863_9012_8a5e02946711() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d752727a_8cf0_4a59_a15a_401ab6b1d2e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_78a23fb9_896f_479c_8aea_7a442b9cc078() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_32b99fef_645f_4f06_99d1_7aa29db8878e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_df40f16d_b8f3_4958_b609_b121a6998439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b56c8b1a_ef6e_4c5d_9982_9f53e6e64663() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6fd099b1_7fe3_44aa_9a6d_865ed72d2237() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_34831057_edd8_454b_a62b_0cf101905b76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_96e72c4e_8fbe_4fc5_b64b_52be64623984() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_af6bc2a4_7926_4038_921c_2144bce04a79() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_959d107a_14b8_479a_bb13_ee21daa7f74b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b8a683b5_e72b_41b5_99d4_93f43d95668b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0c01ea96_5a5c_4d38_af48_c8dac16ed3e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5e3b272f_fa9d_43ff_a1bb_da593b9ca90d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d56122e9_63f9_4197_8474_4c9e4b996fea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a8b27cb4_913d_4550_9fc2_dabfb1794d49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4d3a4ecb_0e8e_4740_8875_796025637c5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3df53c03_814a_4697_92f6_c7304fdbfd4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8f2b4cc4_ea90_42b0_bfd6_af26f150de03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5012de6d_3796_4140_8041_a849a0e3de8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2394df99_c649_455b_8783_a3dbb7fbfdd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c4b517fc_a496_41cb_b425_a49f07235a41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c7e9d0c2_c013_426c_9646_c690a60e4a70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_57eb73b0_393b_4f32_871b_a7237c99bde1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e7bc7abd_dead_4474_9b2b_fc52a91d30f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a59e8992_85cf_4c11_b7bf_a0f2e37b64b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ff454c50_8cf1_40f6_9ca8_543c0d294a9e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7af265cb_4bae_4218_b9b9_4570657cc0f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_067a73d4_5525_4381_9688_b72a304c054f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_db4bc96d_a230_4bf7_8dbe_19ab09c13579() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d5002e31_70a0_4c89_a0fb_e76360923f90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_473b0d9f_8fb4_469f_bfd9_1f0cc4a17626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b31b858a_5685_4517_8a10_db5e4f8dde47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_58d6fee2_529b_48a0_bd6a_373ca8c281f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2e4a099f_38cd_42d2_998a_f657e11516be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fcfcb8c0_5779_4e1b_af0d_efe6e456e620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5c8573e8_4537_4701_a812_58c8a001b783() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5ac7988e_ef2e_4978_a509_01fc3c287ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3b53bf4e_ecab_499a_90d3_9200f26c20c7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9ddbec57_e125_406a_803c_cd81a0126df1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0ef02c1d_79da_4829_87a2_44ee0dd57f75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1397a06e_d440_4d2a_9763_251174b880cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4ec961e0_cc20_4405_8045_6e44d80b007c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f90db12c_06c6_4dbd_ae69_afdf96f69b14() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_82cb1ce6_eda3_4755_9832_3ce52c8fa6e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4cb815b3_f05d_48f0_9b54_f345867131df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3df4f4e4_d5fa_4146_ad86_e93e7d550a6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1fcb1f5a_c441_4719_82e7_0721859068b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5f8b802f_062c_4c76_8517_9b46b7f012f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c698500e_0c49_4cc7_89ab_e23b4b9556b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b6eb9ed3_befa_4491_b84f_5c7a1ffbaeea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1aaebd79_ce87_4348_be86_71e170ef3561() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c1595a06_7ab8_41d3_bd47_457e6634464b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_90cf6754_6402_4df4_8280_1a5945e38e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_de98c634_292d_4e4a_a9be_9cbdb1453ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_46bb6df5_0f1f_454e_95a2_ad24a04694d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2be3d1f5_1000_44ea_9e36_116a311519e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0915085f_2ac6_4b7c_a03d_3153be2e738f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7fd33a47_9e3a_4436_bae1_764501d29429() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a1cf918f_7b27_4349_837d_bd3f92e40b28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a838f46b_be21_4a32_9406_eac35cee65bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b56c8b1a_ef6e_4c5d_9982_9f53e6e64663() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f7474e93_2c43_4add_b301_cef140010b40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_28e4b7d5_4042_4bbd_9382_81892b881756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_63c46383_c4a3_4d23_836f_6fcd6b3b61ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3580e7b5_17ea_4286_92ff_195e213323e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6604279a_b9ff_4735_869c_33117449833d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b39fba80_94ec_457f_b23e_3d72322f81c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f90f85ac_4a26_4b8a_9e0e_830f6046881f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1d921567_2c1e_4fcb_b868_e9c06dadd7d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_77e8c0f4_b3cb_4948_b366_fe0755a687dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3d3df9fe_0021_43d5_b94b_4dbad3123b5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_776cd8d1_e285_49b9_9990_8dd13e35085b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_eba31641_f2a9_4fb3_b226_e858090fc23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_995480a9_1d20_4f31_ae58_b784cde4a6ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1448abc6_740b_4016_95b3_9329fee0232f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_884e2140_a6ae_44c0_ad21_a911cc587620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_508bc443_be3d_4a01_8b05_2255086c5baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1427c1d6_782d_4b05_b52b_a3feffdaf731() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_007207d0_da65_4df0_b3f9_b90ed930723b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cc759601_8076_4dae_8e91_9ae9341fad01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_327811e1_3a2b_45af_8225_c5cc17620a81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ec77f40f_1415_4266_aa7c_fe4f3b257060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cc9840bb_aacd_4d43_954b_5f540cffc07e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_61028804_9cb1_4ab6_a016_c4890cc834da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9416b36d_ea1a_4860_9586_1b052549d0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0ab61eda_f597_4958_8a73_f544372185a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_857a9de7_b0a1_4caf_b31a_dcde96b8d8b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_61619bc6_8e34_4e25_b82a_bcd33adef856() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f5cf659d_1e97_4dc0_b1c5_8080378b5354() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_35249559_9326_4c96_bd1a_8a1c9f7308e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_40dd1577_3403_446d_a3b1_860f3e25bf55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_74ef5886_3db2_4cda_87e3_c397828d6613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9040e531_f962_4862_a4e3_76e5e79a35f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7de6c5c2_9aae_4b35_8cc2_c1fe954992b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_808e10b2_ee72_4970_af6d_4d9a08bc7cc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d8de463e_4b69_4b70_a397_9a058634b8d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b932c68f_e1fd_4b0f_9a20_7caf81ddc9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9a231d2b_3db7_44b4_9db3_39aea15512a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f7e62e76_756f_41e2_933a_ae84ab01d925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_51f8d673_45da_45fc_a41b_c5a8d0989200() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ce9d2271_283b_4be6_b84f_1faaed0e968f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_965d5374_8aee_45ee_8c97_05773fa09dbc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e4501375_af7b_4f9d_a919_73e4665ba5c6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bf56ed06_3dd0_4dfe_80d8_33bd5b397ab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bad24fb8_8769_4537_b52d_fe680bef5384() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a79fdd1d_2e02_4e29_a68f_33da15dc40ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bab21046_b0eb_4233_9735_9d2cc0eae706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_594aff1f_ccaf_4de6_b340_24d579e2b144() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3225a4d6_cad7_4aa4_add5_617c313c5840() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_31fff2a5_e84e_47e6_afb7_6a35a66992e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_40dd1577_3403_446d_a3b1_860f3e25bf55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_420c4423_eba6_481f_a57a_033a44079ce3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8ed2ec77_296a_4e5c_84fe_99b5dd3e401b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_304e93fc_d27b_47d3_9be4_ff609e508c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5b73bc30_75ff_4abb_84f9_15d5cbb87cc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_750e5d03_578a_4863_8d10_fc3283079309() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_845db240_3cfb_4ebc_a1dd_96d1da2c2092() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_78631fc2_e125_4026_87f6_a4900eec2d35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_01ef5233_485b_43a6_94f7_687626857894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_99b863ee_c518_40a7_a560_3b893a9a9567() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f23c2913_5f40_48ce_8772_4d4a6fec54ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ec39a0c9_2323_4471_909e_337347b1b7ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c76c47af_861c_4278_b69d_7d9b81bcd957() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_06405b8e_7fe7_466b_bf3b_40ff5c3a6263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_d8884e2f_647c_4554_affd_b3a3b4b2087a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d4537622_86e9_4684_834e_fa06927b46f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8b4bae11_cf31_405a_9a74_930284c3a3a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9bd0bdea_4e18_47be_a6f2_5a5c0aa7996d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_90490bc1_5755_4419_87cf_38277424680a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_309df7ac_411c_4f97_a435_b1e2be258194() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_843ac6ad_88cc_440e_bc3a_8a89fd5c5f57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_2f20bdf3_1752_444a_8b48_86396c4813ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_8fe2c646_baca_40ee_b783_3215ebe4bb2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_615502aa_230b_4370_ab92_dca0ccaa22a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_135a55cd_3659_4de7_bf7b_a477461f0f11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1e265d24_8438_44b5_b99f_247c45b488f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_57bd2904_9fbf_4ca3_afd3_62c6d53caa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1449e29c_9f58_4edd_8552_1a692625c9ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_808e10b2_ee72_4970_af6d_4d9a08bc7cc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_fb6499cc_e84b_4e32_a26c_5eecfe7e449d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9040e531_f962_4862_a4e3_76e5e79a35f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a2546def_01ff_43b5_a90b_5f7c7d2696b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d704e785_9d47_4ccb_a6f9_76bd2be5106d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2f2798ef_f2b9_4772_b35a_74397854eb77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_013ea1d5_617f_44b4_99fd_87be1c55ffbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f2f4133d_dff7_4721_b106_ab7748dd54e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7fa42576_a932_4645_a6e1_4de86b849410() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8209b9e5_83a3_4a26_b31a_eddcde6c903d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e2c8c77a_c36a_4c47_a999_f8e739d42e58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_043eb383_4413_4c7d_86af_cb3e2fca439f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bfa9ae79_b3a2_470e_84cd_7e5a4c32fc94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_97a65ee2_94a6_42e9_b552_764779f519da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6cd7fbf7_36bc_4595_9585_096498db3c8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8492da1e_dc07_4d30_aaac_d03d44929691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_73323ad7_6ad0_4d30_9f8b_2ea176dc8500() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4087f2dd_63cf_4c1b_a969_7ae4c8aa7e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8ef717ec_79c1_442c_a2c0_b93be262dfaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7841591a_fd9f_4dea_9928_c5b797e1f5ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_763df214_be9c_4a01_8f98_198266809fbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f340ac67_cd16_4047_b2ab_8ff63c411e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_45684653_c8df_4591_8ec5_df8190d76175() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1449e29c_9f58_4edd_8552_1a692625c9ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_845db240_3cfb_4ebc_a1dd_96d1da2c2092() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_818fff67_cdb9_4f61_96f4_b8a91f736032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_feaf1a9a_487b_444b_95fa_58ecf7988e96() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ba217f67_eadf_4060_b567_ee078b8dd154() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f33ab305_b833_4d3b_9ea5_90b99987262f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0e923cac_426f_4cdd_b43c_ef2782dccbe2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7f1539f7_71c2_4cad_aacb_052deb2bb33f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ddf3dcce_148c_4f7b_bc16_3ef2f33249e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_912bc225_ebde_48cd_846c_ab3e903223ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_68f98558_29eb_40c2_b40f_1323f09db799() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_838acb3a_0aaf_4d0b_8743_e64613f327cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e1f96444_b43a_4bda_b27b_de2b15402ed2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1c635c62_abd5_4b90_a13b_83b3a3c0b0ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_31b1f795_b60d_4155_8803_05922ff69613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_3f459302_0b9e_4c6b_83d6_b5bd0a17ff90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_850c6745_004d_4835_bcc5_5f6016eecc55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c126f5c7_efcc_4997_971f_d58e4eaa438d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e19cb88e_32d9_4618_89db_5585efc56498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_74ffd2a1_b9b2_40b6_a335_51a75f01a0bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_36ee7891_38ec_495a_97e1_b59cc9e3ad61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_757d2b3f_aeba_4db3_9a7e_efba9acb8d2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_78101e8c_7184_4c83_ae62_408b34b43f72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_caaf88b6_5705_427e_9eab_a51158e981b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_90490bc1_5755_4419_87cf_38277424680a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_73323ad7_6ad0_4d30_9f8b_2ea176dc8500() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_524a7012_bb1b_4258_8931_67467b82a253() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_14992d0a_121d_4ee7_aac6_99248c2af879() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_71112c7f_2f0e_483c_a3c9_70bc7c8c5dea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c709500a_cdcc_4977_9d86_ac6ac578029f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ba59dd74_936c_4159_b62a_55c975c0eb47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4333ea56_ee3d_4b6b_b9aa_49658a2d90a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_021770b4_737b_4b4c_9345_16c0f969cf0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_97400d8a_fdfc_493c_a9ec_509a1b9632fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4e0d9afd_8d66_44ea_85b5_f94b65b936ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_17f11aac_9fa5_4b45_88d8_45abfd2195be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_54181e4c_bd59_474a_8bab_a812bb9a5280() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f369ba0b_9961_4f3c_970b_8bafdc9fd6f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1a9bb200_f515_4049_8ad1_1111dd94f9b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f0120469_3428_4ad0_8568_a2fc5d38c5be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3533f1cd_5f1e_40d7_b6a2_a8ee6164e1b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_23cabc4e_563f_44c9_89a4_b3221fdb6e1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9533448d_2fee_4767_86ef_8aea6b271ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b55614d0_9d11_4cfa_b021_a737ece939da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_109f4d24_e22d_4a83_931b_536903b90cd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0741d2de_abad_49a9_b292_f15b6061ee8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_510e945e_d796_43c2_9430_1f65362467c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_524a7012_bb1b_4258_8931_67467b82a253() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_efc49b58_fd44_475e_9491_2bace5012ccc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_139b6088_e76f_4f09_adc1_22009859e72d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_34fd786b_962b_4989_84b0_1a88715d107e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6f259ef0_82c8_4a3d_9a54_e0492f3fd1f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_8525fbe3_2f09_4aeb_9f10_750af8c0778d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_fba49c7e_065b_4cea_9bfc_f93722e786d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5c178846_f02c_4303_965d_5e5ccb02039d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5c1473e0_c333_4d24_bb90_1046368e7fe1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7a093284_0578_4958_9ef3_27ee0650dea4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6ff062de_82ae_4c73_b81c_45fea18db66d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2f646bcd_9fb3_4093_9049_f1740b605420() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_78631fc2_e125_4026_87f6_a4900eec2d35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1aae327e_f8e8_4689_9a7b_4dfc24f2060b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_04111dba_38a1_409c_90ce_ccf200b12b2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_54181e4c_bd59_474a_8bab_a812bb9a5280() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_06980093_e894_402b_93fb_cbfc432852d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8f07f72e_f367_4265_a10b_7be7e14eed6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_46036afe_8af1_40e8_b036_259b8aea2af8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_8db69925_0565_48ad_8b01_2d0d610f4a72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f2616ad1_81fc_4f13_afdf_817c416647bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2f294516_9ca3_465f_aab7_e84f3e11c503() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ebe40ab3_b9a0_4864_9d11_ff89eaabae78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_da839160_a716_438e_98b9_74087f427bed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fba299c4_b2ac_49e9_a7cb_ccb3838605d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_21fa7f1c_2810_4ec7_9fd2_ebfde3d82b53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6ff14977_9f27_4c8d_aaab_19d7e302f4dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_331250db_e6f8_41e3_a1b6_5b0b82b31041() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ce9b2eec_cbd0_43b9_a03c_6416dcc5337c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cb50fbbc_46b6_4186_98f4_51bf54b9219f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_75a7d86a_7f78_4603_90e9_5d8c0fbf9e11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6d8cebe7_7632_43f1_97fe_21483cf4fa57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2c9f165d_8f63_4803_8577_01931ba783da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1a9bb200_f515_4049_8ad1_1111dd94f9b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1ec97dde_1b1e_468e_86fc_e46187dbf13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b2352be0_2d83_4feb_a650_f5d2f4e57d56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_58a81e7b_aab8_4bde_9dbc_1ea6fed606b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_21fa7f1c_2810_4ec7_9fd2_ebfde3d82b53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d30b6807_321e_4dcf_afc0_e5fcfb5bc00a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_caee20d3_dd72_40c5_9116_07af8c8c30e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bd7217a3_3b17_48ad_a6c0_39baff6b0657() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f94c1f45_5230_47fb_a05c_2166257d2147() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_9416b36d_ea1a_4860_9586_1b052549d0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1a1c53fb_ae1c_453c_bdf8_1a0cca96ee6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8d9d167f_c1f4_4d6b_893b_36fe125a641a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2f2798ef_f2b9_4772_b35a_74397854eb77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c25072f3_7250_4577_94a1_89aef61fe8df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_06980093_e894_402b_93fb_cbfc432852d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ae1944a7_a241_454b_9d4c_cc08a20255d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_79553e77_5385_4650_a551_3c71ada6ed98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_705da8d9_fe0a_4ab3_ac70_4ca8b5b7dbab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_155fd60a_fa44_486f_acb2_3f0fa86927b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8209b9e5_83a3_4a26_b31a_eddcde6c903d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_729d1a6c_edda_44e2_b923_89b45c9ca179() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d4d85f3f_93d9_4b81_9ffc_70f4637b31ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1263b015_425b_44ff_a975_34fe961af031() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_cc9840bb_aacd_4d43_954b_5f540cffc07e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5f3ccbbb_ab54_4f43_8a31_8fad3d8e933f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c6c16ad8_c80a_4668_971b_575943b80ced() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1202bb40_7fc4_4c9e_ad42_f53d735c88ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e21bfc8f_f584_4787_b41a_6cfd8f853448() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_564a5e29_b1ac_4ee3_aa88_2e5de69e9e60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_49f435f1_9a5d_4190_9851_969891b30736() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5e94f1cc_3078_4df9_b41c_4bb789fe1dff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1dde8c22_9c23_4895_99e2_a0534e2bde3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5e3b272f_fa9d_43ff_a1bb_da593b9ca90d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_23b82137_1379_4052_b6dc_8c1d95128ff1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_01daed2a_23b1_499a_b705_5921e6b87d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5db123d0_0ce8_4374_bc32_0656a7e31b3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_65c65ee3_fb68_4e84_a28e_8789ff13e3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fb6499cc_e84b_4e32_a26c_5eecfe7e449d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_013ea1d5_617f_44b4_99fd_87be1c55ffbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_95a01bd5_ecbe_41a6_bd5b_6714dd84edc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_370bc6a2_bdc8_4207_afe6_add8631331fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ef45541e_d303_4241_9ddd_1ede03a345e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_308fad1b_0112_4514_9871_545732d0e5d0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0ad501e3_8fc8_47c6_8112_2959fdfb28e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8fe2c646_baca_40ee_b783_3215ebe4bb2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_838acb3a_0aaf_4d0b_8743_e64613f327cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2609348b_1fd0_4662_9467_36ce54be2572() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4f291299_10ae_4226_a0a9_79aa6f55427d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c75d976e_5def_435c_8e3f_264853f81a3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e2440eae_32ee_4b3b_8139_c05c906ab00c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2c9f165d_8f63_4803_8577_01931ba783da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5543f808_fa97_4070_8e01_789de3dc4e0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3580e7b5_17ea_4286_92ff_195e213323e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d4600a47_e600_4992_ba49_e27860e10083() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f90f85ac_4a26_4b8a_9e0e_830f6046881f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_032900fb_f504_4665_b0c9_e852c83ff25a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_244af958_60e5_4a7a_ba13_87031711893f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3274b618_980a_4b19_bf36_7ea8e8de121f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_56c69a57_f7a2_4ad8_a152_cf882b12da81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b1f7ae12_5bdb_4971_9d55_7d357fcc2e35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bebbd571_6cdf_414e_afde_07944c8e8872() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_99df2b99_293d_4234_b27b_30d7cfb3a968() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f049f7c2_a174_4f96_926a_83eaab07c263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_56c16a8e_e993_4c14_aac5_69b760be9be7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_006564b7_92fe_45b3_9a12_89b513218ad8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7fa42576_a932_4645_a6e1_4de86b849410() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_67324c69_fefb_4852_96ec_87f2fafb1767() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b32353cf_a72f_4e76_9ab6_9c79efd3674a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ed2b3511_5803_472d_9001_33c01a509ca4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c4c43c80_4501_42cd_8d92_8a51c86165d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4ea33365_4145_4765_82e4_ceebfaaff96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_75299203_d8ec_45fd_9d65_98fa20789412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_18971e1d_253f_4b42_ae7f_7ce2da6729a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d6362bbb_c45b_48b8_9201_bb24b55e267c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9398b375_3c43_4d45_aa4e_ebfb0533e9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a71540fc_8aee_45c6_b28c_d7200ba0726e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0feca5bc_e841_4064_afd2_f59b1b38cd85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_36411eac_8d22_4efd_b273_d6d4a2142894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_502e7975_eb4f_4930_89b7_0b9b7c6350c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_968e5ff2_1645_4115_b44d_2b4f18f6b875() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_dda3c9c9_f045_4712_8539_42db7896205c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_32b99fef_645f_4f06_99d1_7aa29db8878e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2d9bf204_0846_4728_8a68_af588d56a2c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8aa7fa3f_83cd_4d89_bfe7_bfdcedc77428() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6d911c03_a151_487b_985d_81055a9cd145() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f6fcbf94_7967_4e0b_a3eb_01c7569376cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fc732082_6d3d_4d34_911d_e46127fe2656() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6101fe33_1821_494a_ac59_a1f726a3d52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c2f01d0b_d3ce_44e7_91f6_a51b748123fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ebe40ab3_b9a0_4864_9d11_ff89eaabae78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6c41eb87_1daa_4ab4_a24f_487effc9cf24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_06554558_90e9_4fd6_bb4d_c1caf305b2dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_47692e4a_b11e_4af4_83c4_b4bed57de911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a5b62b48_9c31_45f7_8238_d233ee38258c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_39d7810a_7ca5_4667_8928_14b45095fc82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d09ad164_ccf1_4fd7_b13f_24a7e22d60a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9e294aae_5223_4484_bed5_b29af85b097b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5f908914_9bfa_4f5e_92ad_89e4d7cacc42() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d5377c00_3e7d_470c_9a72_cee3dda8a276() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_ca2b5c9c_43e0_4eb0_afe8_d1868508fb83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_17676952_3831_49ea_8e89_516b6c4f39e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_056214c9_5734_48fa_a170_524e37000e85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fa01a8d0_3c23_4af4_bc43_c868b88267f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4cb815b3_f05d_48f0_9b54_f345867131df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_411587a2_aa72_4864_a871_312abd9e3cba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_763df214_be9c_4a01_8f98_198266809fbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_067a73d4_5525_4381_9688_b72a304c054f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_64498bd9_c1f4_47b4_b339_11863a55195a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6aa75ee1_a139_49f4_8b6d_3b116542d4cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b5eac88f_04bf_4790_a47d_783d8b8fa57e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e2c98959_eeb5_4f8c_8ccb_ff214b0120b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_522d62dc_bfe2_4891_860f_6c36483e7772() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e3ff4543_1ef8_4502_8f34_3253c7b467c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_224206a0_eedc_48fe_a6e5_f73e419ad183() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_1d66842e_93d4_475c_8ca0_406af05c9649() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b415ad0f_6906_469a_971a_8a35734beda8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_3c89a5f6_da79_4175_9b0e_95f78c683f94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bdd8f061_b905_41e1_bee5_b84a78a7a4c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_eb4d0fde_56be_4727_81f4_efc642596141() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_34847a04_0930_433c_920f_ea3fb0d71599() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c8c9c676_7299_4bfa_8850_f5cb00818cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_03612763_5740_4d8c_a351_2970f859d4b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_24ff4838_1e03_43ab_93ba_1df273cfdd76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9af9967c_93ee_4283_965e_b140d0d2556c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6ec7aee2_7515_4eef_b19f_3ca29c95d3ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_66e54364_3047_4d32_a8f8_6482c24c834d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6439eea6_3e10_4fb1_88bd_b536b7029012() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f94c1f45_5230_47fb_a05c_2166257d2147() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8a009dc3_96a2_458e_ab47_f3c08768b94b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5b73bc30_75ff_4abb_84f9_15d5cbb87cc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7af20def_9342_4aac_b6d7_b2f7db1a1884() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5db123d0_0ce8_4374_bc32_0656a7e31b3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_69e97de1_51ad_4204_8a9c_6886fa84c250() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_99df2b99_293d_4234_b27b_30d7cfb3a968() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c23a4b41_c833_4c99_845e_dfc047045f7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3770a28f_49e5_4074_9191_5be0d7bd12b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e283b54f_e42e_41ca_8888_08383aa04ecd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_3ae4a2a1_764b_4631_9df5_67e7126bea6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_6720d446_3ff2_4541_8f9f_5edd17223cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1945e604_bcf8_47c9_a783_483b2cb4cffc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_57b9149d_1dd2_43bc_ae0e_81232d1e976a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1deca706_fa97_4c2f_bd4b_8f1fd6de1df8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8eaf8a0f_4a92_48bf_8645_ad90823464d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_90b67a1d_e9dd_4940_a901_1bb527fd8cce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ff454c50_8cf1_40f6_9ca8_543c0d294a9e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_9d437de3_0b03_4e8f_a6bf_72f0a5410178() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_60e48cc8_9216_4b05_8da0_88779b42bbc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b94d4181_a53a_4eaa_9d74_cf3e1eac622f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fa990ef3_fc79_4af2_bb2c_4e0d1dedab8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f94c1f45_5230_47fb_a05c_2166257d2147() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_2e685dfa_8307_4f56_b5a2_0d2fb46f654f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8e804c5c_4e5d_4364_9ce6_7cff69c2b8d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bdb227d3_74a3_464e_8582_aeaa4f0b8f55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_732dac41_ebf7_4233_afe0_aa381bdefa8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_53d5b3b7_2015_4ad3_b5ef_1d9e2f003905() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_906fe9dd_b933_46f4_8427_fcf0c3c5f755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d78e52f9_44ae_45a7_994d_15b0e9649ae5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_951ec70e_0267_433a_8343_2b6952f611aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b68c1ef8_3077_4153_b353_55c17488cfad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0f31f959_6a22_483e_82a3_07a9c9d8c5b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_41f96a3f_f215_4bad_b483_9d3d75e1db12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_13de9847_f012_416b_b3d5_913de8ecfc7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_34152633_e620_4b86_8c8d_ed05e5830a30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e34c92e6_6ca6_4954_9eea_707666ef2dbd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_675402dc_b404_4354_a57b_80abff1eeb39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e45fbff7_a0d4_46cf_b12f_fdbd8394cdca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2da6f0d6_9c61_456d_b0ce_eead74b5dfff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c1595a06_7ab8_41d3_bd47_457e6634464b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c1a0ad1d_7aaa_4a83_8950_9607546289db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0023d758_b10c_435e_b4e6_69abe5a943f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6aa6d66d_1d99_461d_b61b_2f00d7bb25f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_03f51d70_0c8b_4f04_b572_d50f9e37899b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_135a55cd_3659_4de7_bf7b_a477461f0f11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_a1cf918f_7b27_4349_837d_bd3f92e40b28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bf56ed06_3dd0_4dfe_80d8_33bd5b397ab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_d4d85f3f_93d9_4b81_9ffc_70f4637b31ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_66587cfd_e1dc_497a_9e81_0f71d4e1771c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_537221d0_40fa_4626_9eb1_170d54cb45dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9e483280_5460_4afa_8d20_f795d40f47d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f6fcbf94_7967_4e0b_a3eb_01c7569376cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_09043cdf_5731_4335_a8d1_42c5721a48d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7b15e7ae_3964_438b_84ca_1cd606670ae0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c78fee96_73e0_4db9_a3bf_d6857dbad62a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bfaa431f_fff4_484a_858c_04d8aebc036a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d1d2112a_f7b1_4fd3_8150_58b393f5a54a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_20531674_1a4f_45ed_944c_719e4ed9a6db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_cc759601_8076_4dae_8e91_9ae9341fad01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f02bb53f_d4b4_46d5_b429_ff7cb390495d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d3eae0eb_2f96_4eee_bdda_d6415912aebc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c626dadc_461a_4b01_8fe8_7c9c08435417() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_223517f5_1076_4f41_8f8a_9f6fd2697bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_944d49a8_02b1_48a1_9b18_fe2cc022ed53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e1c53e7c_f314_4c4e_991d_cda53d5cf808() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5e94f1cc_3078_4df9_b41c_4bb789fe1dff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9af9967c_93ee_4283_965e_b140d0d2556c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_20531674_1a4f_45ed_944c_719e4ed9a6db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b584cd90_67cd_4160_90ab_dbfa4bb4e38d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a5b62b48_9c31_45f7_8238_d233ee38258c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_57eb73b0_393b_4f32_871b_a7237c99bde1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b2803c23_3132_4a82_a11b_eecaac907e12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_752d2c97_2c2b_4068_90ff_1746d41eaef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6703009e_7a8a_49d2_88cc_7116394c5d17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_eb66dc25_7611_4e70_9db3_fde5abbd0fc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_00cd38b2_1287_4399_b525_a6af4e962fda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3df4f4e4_d5fa_4146_ad86_e93e7d550a6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e0f38c4b_1e4c_4e0b_a062_729f36235388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6a02e0b5_5b54_48f7_8a7f_1f09bcab15a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2f98032f_7f96_4e3d_958e_c05f688aa5a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_add2fe1e_8170_44ee_a299_c7889fff0c4f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_d6ca4d25_5e54_43a9_9437_79d63275f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9fab06f0_d3c8_4ca3_9853_1b26b564befa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b5bd1b2c_706b_482b_9a5e_b4d9e37820e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0e923cac_426f_4cdd_b43c_ef2782dccbe2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e1c06184_3b1e_422d_9a45_ed7eb6dd6f86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1e265d24_8438_44b5_b99f_247c45b488f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8ce477b9_5406_4a3b_a431_7a9f6f03d51e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3a7410bf_29d0_4619_88b8_6b0669a66765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f9a8bd4b_8884_45f3_9988_d2d32931f3bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_59f145b7_68ab_4938_b2b8_307a43e3ce41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_39404c94_7903_4a27_a397_e2aaa87ebcb2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fec22be3_01c9_4f48_b954_c8de3af6838c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_26f33b0f_0228_4338_999a_5195e138199a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e537b67a_9a8e_484c_aca0_5b0a8b3a8cb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_42653d31_cad8_4f4f_8967_8df6222ceff5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7b577615_0e7d_4243_a105_1ea2572bd540() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_267e8666_03bf_4c97_a841_fba23e5f3040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_62198a5f_3d75_421b_9546_aba8b1c58542() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3688d2d3_2cb3_4a87_8062_4c4e7f9863ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_6c925021_cc26_47ab_a4c7_e04f0132078f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_42e9d229_375d_4306_89bd_d6180b1abbad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ad3d53d3_b4ed_468b_b210_cec7229d81f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bfaa431f_fff4_484a_858c_04d8aebc036a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_807db54d_a24f_40d2_aad6_73b390954cb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1f3f023c_03a6_489c_b07b_3fcf7f0618b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_032900fb_f504_4665_b0c9_e852c83ff25a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4e0d9afd_8d66_44ea_85b5_f94b65b936ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2f2798ef_f2b9_4772_b35a_74397854eb77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3d1e0f67_e0ab_434f_94d4_b05285ed6340() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a80d97ea_cd59_492e_8d36_fd1ca60f7071() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_3dbccc5e_5041_4443_b6f4_b4a487a8dd73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_311806a2_22e6_4c1d_9453_45716fb6b95d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_183075f1_61b3_4d78_b46d_0aa53156a193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_42e9d229_375d_4306_89bd_d6180b1abbad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_044b8ed3_30a5_428c_ac24_b46fffabb859() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2cf1e92e_3a7b_4f97_9ce7_aa7d96c447ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5cc33b70_1fe8_4f73_a06b_7ebf1696d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8e2a441a_9bb0_4bae_abdf_c1dfaadf10b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0feca5bc_e841_4064_afd2_f59b1b38cd85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_ad9dec16_d3c9_4731_8dc5_dee2b8f1a765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3a7662c9_8b17_4ba8_9498_2dd824635c33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c0294b23_a968_498a_8d21_b312b94b9596() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ae9c7754_68e0_4925_bad1_b2b8d43fec1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f462266d_f2e7_4644_83c7_ed8c5d0c3fac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0477ab11_0f6d_4536_9a94_fcc2c0849885() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_90490bc1_5755_4419_87cf_38277424680a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7fa42576_a932_4645_a6e1_4de86b849410() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_52f77a55_6d26_4fad_9a9b_bccf78bf53aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cff84526_a922_4736_8461_5af1ca488b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7aee86fe_bc37_4d55_b027_c7b748e3ac74() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6644ea3a_59f8_46d6_9bd9_6e1c71426910() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_fa01a8d0_3c23_4af4_bc43_c868b88267f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7132fad9_02ac_40b1_9255_0a0efa1a3555() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_39273f84_d873_4ea9_ab3a_bf51f2424a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_15385204_0ee7_44a5_8a10_17989398c9fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f3d338af_1cb0_4e73_a69b_c92fd67543b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_07753571_1f05_4f43_b77c_38ba10cb2748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_79c0e0b7_f49f_4a85_8d5c_cb2cfc183c55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_60fbb24f_18b4_4955_b2b1_34af2cc7d7a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f3e57c6b_d605_4916_96d9_10fff44e5d55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c5cd0afa_b98a_4ff1_85cb_910813c64a83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5cb9611d_55aa_43d1_9424_7185c7d6982e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_64674a25_bd7d_4132_b34b_a7a7e6d075f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ed793831_560c_47ff_8b5c_d644581d76e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_bfa9ae79_b3a2_470e_84cd_7e5a4c32fc94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_203274bb_247f_4451_b6f7_1a71272cb6bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_8aa7fa3f_83cd_4d89_bfe7_bfdcedc77428() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c9f64a04_4e7c_4351_8fe8_74eb29fc6372() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a73b42f5_1f0e_4cb6_98fc_fd0115d6743c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bb9108ac_ebfe_458b_aa9e_a9748525c004() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0ad501e3_8fc8_47c6_8112_2959fdfb28e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_27e5a8e7_ce52_4b47_a536_2cd363b7b4e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0d4da408_3cd2_448f_9bce_1db7ace344da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_71a7034f_ad7c_48a4_8c19_efd469d07dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b837ba88_0c9a_4a4c_abe9_d3955d9f7670() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f84c022b_67de_49cd_9f6c_01bd5749895d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2bd3b0c3_534d_4d43_b13f_149f091df9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_17c7d914_2f0d_46da_97e3_34de2bae69a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_12a59985_80fb_4acf_b7c4_39a45040d27c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0fd24478_b972_43fc_a9d6_cf8a6827cdb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_fb9a89e5_7b24_4ec6_8bfb_cfad7cf35158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e3bdd459_83e7_41a9_82c6_bac51deca864() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f61f94e8_882f_4af0_938c_4748292a886d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a54c37a3_00d6_400e_bb6a_c05e4a89cb4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e7bc7abd_dead_4474_9b2b_fc52a91d30f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9a231d2b_3db7_44b4_9db3_39aea15512a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5b629202_3a60_41ea_89d4_c2b7e2a355ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_73b6983c_2543_402f_8bb8_23d927a2b607() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_593c5d68_00bc_4524_8c99_d93ae5ea8cbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e8b28da3_11bf_4121_a8d7_1a69c8c492cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_36e90961_0428_40c6_98a4_133c09896639() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_fba49c7e_065b_4cea_9bfc_f93722e786d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1a3836ca_9c47_4fba_aa74_84ce38699987() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_09fe211c_1033_4315_b8d0_8f0bb870ed27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_d224ba2e_e119_4dc7_a61f_6b4010c8c2f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f4f79686_df17_4539_bb22_c4f71cfbdd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_90b67a1d_e9dd_4940_a901_1bb527fd8cce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b7196086_2e96_4916_a5b3_d8ff5e293e86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_279d9e18_40ff_4fd3_9620_0d0b70e282bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e877df89_22b3_431d_a34f_44700be5237d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_abadeee0_762d_46d9_97cd_13a55432c0da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_353d9793_a612_4c0b_ac42_21b26fb52848() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_32c232a4_3d23_49ba_9d27_db4f64d071ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_bc4ab49b_0601_4e21_a880_22c0a3e50ce5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f737ed78_86a5_44ba_b19e_d589cefb9c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e5fec7d7_46df_4575_a8e6_ce6e714d88ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_de98c634_292d_4e4a_a9be_9cbdb1453ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0fddb5c9_edd7_43fd_8e75_ade95fac77c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_82687b28_053e_4cbb_bd8e_d466d0a0fb41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1d57b98c_249d_4d04_bcd1_3f4cddd13527() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_db4bc96d_a230_4bf7_8dbe_19ab09c13579() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_88350769_108f_46a3_abc8_dbc742ddc1ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_532a10b0_cec4_4763_ac4a_b261b1b62b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_408775cd_ec84_4fdd_bb73_bf3479985454() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4dbc9c60_79e2_46eb_aef1_fe9f60ccb4a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7a425cee_f8e9_4d1b_8009_5245ce36bb31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_99cddae5_d688_4272_bd5f_b84f2fa15b10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8dc57733_cd59_4b4a_b85a_7cd150b12a6d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bfaa431f_fff4_484a_858c_04d8aebc036a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b41a0927_56e0_4b0c_8162_f78481d04292() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6e182204_2325_4779_a1b6_6d9688e3aa13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_090c8983_9999_4240_a204_da923c24fe08() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9ddbec57_e125_406a_803c_cd81a0126df1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8fe2c646_baca_40ee_b783_3215ebe4bb2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_daf44f99_9943_41e4_92b0_c249918a7d15() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7af20def_9342_4aac_b6d7_b2f7db1a1884() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_98d49fc6_b3cc_43b8_9585_9bc08a22359c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b7bb9021_ea67_41b6_8ac1_d3b40c0298ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_43e777a3_64eb_4c3a_a73c_3256aa5a63d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_be7ba40f_de0c_46d8_a157_ba733c3eb8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9fab06f0_d3c8_4ca3_9853_1b26b564befa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a253b76f_2c77_4ea3_bf15_25a59f12c1aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_af0d8ce6_ce4b_4cd2_80f6_80bab56478f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d047fc3b_fd72_4a3d_b515_15dcb89b9e4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7af265cb_4bae_4218_b9b9_4570657cc0f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_054160e4_733b_4d82_b02d_ffafbe56fead() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e8b28da3_11bf_4121_a8d7_1a69c8c492cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1941b723_c509_4bda_8c44_7792c5e80745() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3df4f4e4_d5fa_4146_ad86_e93e7d550a6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2426b724_8802_4f8f_a3e5_ccc191976668() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_72d29a71_3e8a_4c9d_91bd_a4d9d50e632a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a9f7d01a_1de8_4666_98f4_69a4a3e361a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0c8a7c68_4ec4_40d1_9dc9_972749087685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_72da67b9_087a_4858_9b2d_50c5d879dfa1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_75ea0576_3de5_4934_97ec_9d6d26cf9eba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_290ee94d_4596_48f9_bc3e_222d6724d6dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6c1d2392_ebc4_4aa4_a5b2_79bfff8ac61b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8ac97d62_10ef_48e6_b151_60ae21058c94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4111e63b_6ab7_4ea8_abc1_8768264f749c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8ab95dae_db58_4d6a_a2fc_6a072a52a8e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_82d80b69_074b_4d74_a180_aa3ac9a22f5a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ffb6fda3_2d5a_46b8_9838_3c544f92ef9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6b8c380b_6ab4_4863_9012_8a5e02946711() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e98c7290_42ea_465e_85f5_f32168a0e98e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_53d71208_f00c_4142_aeb8_38afa4891b93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8ac97d62_10ef_48e6_b151_60ae21058c94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e3a6cf9a_730a_4d0e_8711_01110907dcc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_807db54d_a24f_40d2_aad6_73b390954cb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_efc49b58_fd44_475e_9491_2bace5012ccc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0a627390_6365_4467_8626_500f1874ad03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_98b824f3_c9dc_418f_87da_369ec771253f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_62198a5f_3d75_421b_9546_aba8b1c58542() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b32353cf_a72f_4e76_9ab6_9c79efd3674a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1263b015_425b_44ff_a975_34fe961af031() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_594aff1f_ccaf_4de6_b340_24d579e2b144() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ee4ee609_caae_4a91_8da6_5d407b82bbc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_d9b86c6a_b186_401d_88ac_5646e300aa05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5e0521c3_1ceb_4dae_8922_84d5f762607e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d8e61d3e_435f_4f57_8ef5_749920cb68b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c7d189c4_4fd3_4911_8d2d_44fa165fe888() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_75ea0576_3de5_4934_97ec_9d6d26cf9eba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ab38e9f2_16f1_4ae2_ace1_4bd50a35ca02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_00cd38b2_1287_4399_b525_a6af4e962fda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c68577a7_5e82_448b_931a_af85ee2949cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1cc7bb49_960a_4b1f_9a06_e5e520d360e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3309557d_8568_4c20_9deb_e46e610469f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b9fa3c39_7a59_49b5_8b5c_bef3affacb92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_1be72399_bc03_4d1f_8c12_27f584a3038f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_df57a0cf_d4a5_4091_94bb_fe0633be8d6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e7df0a4c_84cc_4865_a1bb_5c9a58087204() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6d888c8e_f050_49d0_bd71_1c88e40a55e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_31b1f795_b60d_4155_8803_05922ff69613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_19395eaa_de8e_4028_9cf9_1881c6ae5082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_73b6983c_2543_402f_8bb8_23d927a2b607() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d7b045da_d9f7_4e91_953d_af3a33e6dab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3b53bf4e_ecab_499a_90d3_9200f26c20c7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_13296526_4606_4635_a47d_35a9a4f1b042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d56122e9_63f9_4197_8474_4c9e4b996fea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d9b86c6a_b186_401d_88ac_5646e300aa05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_482c2051_7c8b_4dd8_ad57_e59f6fd00cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_56d2d96a_f882_4b84_9860_f46d3b00bdf7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_64674a25_bd7d_4132_b34b_a7a7e6d075f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_fc732082_6d3d_4d34_911d_e46127fe2656() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b31b858a_5685_4517_8a10_db5e4f8dde47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2e4b4c82_82ae_4204_92c2_4a5e0c228be1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_180d2dd0_f405_442e_967f_a91c3a14973e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_8ac97d62_10ef_48e6_b151_60ae21058c94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ae93c031_4bc1_42ad_9b77_5e034b08fd66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_17f11aac_9fa5_4b45_88d8_45abfd2195be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b7318be5_a3ce_499a_aa8d_ca54a9052b11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9bf8e74b_399f_468a_9fe9_949b43503748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_decd4ff8_1f22_48ab_8226_55dbef62ec31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9bf8e74b_399f_468a_9fe9_949b43503748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6101fe33_1821_494a_ac59_a1f726a3d52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5fcfbb0a_0926_4f1a_b57a_b7425492b4a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e8b57719_9b00_4143_ae6e_2161c0087e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_951ec70e_0267_433a_8343_2b6952f611aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_abadeee0_762d_46d9_97cd_13a55432c0da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cd4873ca_8f3f_42ae_b629_998788034f6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fbff4394_6578_49c9_a71a_808c42b4d5a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e8cd0df8_dda9_407b_8708_92baedc47a3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3bbf6a67_5d8a_4a4f_9c0c_03318d2b1747() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_837148fc_9491_4240_819f_441dac599a8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_99794316_abf3_4829_9979_afda1abc156d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_88b7c0bd_96fd_49fb_8950_54bbdbfb3955() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9a3637ec_7610_422e_b27d_6dcb5106c849() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_207f6472_fca5_4bc6_983a_b6a6d4bfce69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3a7662c9_8b17_4ba8_9498_2dd824635c33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_39404c94_7903_4a27_a397_e2aaa87ebcb2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_2bf58553_9e53_41ed_82c7_a0f6752cfeec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e28074bd_1d9f_4219_95e2_64c0b6d16b5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ca3ef9e9_d3aa_4ec4_bccc_8543f51790d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6ff062de_82ae_4c73_b81c_45fea18db66d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d30b4668_4fd3_4ba9_8d3b_0cf8a96cfca8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_39273f84_d873_4ea9_ab3a_bf51f2424a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fec22be3_01c9_4f48_b954_c8de3af6838c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_959d107a_14b8_479a_bb13_ee21daa7f74b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_eb2e12e1_c896_4a74_9752_b9eea4582464() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_13296526_4606_4635_a47d_35a9a4f1b042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5fddd0a1_495e_45fc_9b38_1924b33f1e95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6b87ef8f_3e18_47d6_84eb_963a77ad326b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_99b863ee_c518_40a7_a560_3b893a9a9567() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_77e8c0f4_b3cb_4948_b366_fe0755a687dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_174a84ba_5f68_45b0_9d84_38b3575d7d0b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bf21c91c_cef0_41f7_b6c5_1dd7e7fc611e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bc06718b_85fe_4c08_b043_59b704ce3d64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a613100e_763a_4706_9897_f2baebe010d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_426aad42_fdf7_4e45_b76e_7a4c9d211ad9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_cc0bca4a_f917_41ec_889a_abe3cc642961() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_bd7217a3_3b17_48ad_a6c0_39baff6b0657() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_095c31c0_2037_4562_a2f2_e2ed5aa038e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_16abab32_6e31_44c9_b3e1_b8d404772e50() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e45fbff7_a0d4_46cf_b12f_fdbd8394cdca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b415ad0f_6906_469a_971a_8a35734beda8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_23cc3949_d600_4010_9257_8e0601397137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9a673136_183d_4e19_9dcf_89a75a6901c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_00e25ee7_df89_4130_b4d0_734d8b8387db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_78ef4f19_90ae_4f06_b94a_093eb38b74d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_48628e34_531f_483e_b5ed_385f5217b923() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_288ee5fa_2143_47a5_8d7f_cf7d7be1e2e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_155fd60a_fa44_486f_acb2_3f0fa86927b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_63f0e6c7_5b08_43ad_ba94_0fde4b80cf85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6101fe33_1821_494a_ac59_a1f726a3d52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f2ad3cd8_243e_4529_b52c_702f1803766b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f3850f03_165e_4d66_8a95_419b3033d801() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_63034043_97d5_4c57_b61a_afa41faefcec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8ed2ec77_296a_4e5c_84fe_99b5dd3e401b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_aeb59689_b707_4be6_919c_92312e29b0fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5650e95c_4c05_4860_aed8_463b30cf1704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fff5fc4a_ea2e_4c8a_9180_da8cfb7061e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_db3f6134_4f1b_40c3_b41b_9e01f756f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_66c5b2eb_b0aa_4f39_b805_192696ade28e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_decd4ff8_1f22_48ab_8226_55dbef62ec31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2d140101_281a_4dd5_9f23_c52dc81e9158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_caaf0ce7_3934_4e1f_96d9_0f5f8ead05ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3329eabb_a99e_43b5_9d50_089c0f130832() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_75299203_d8ec_45fd_9d65_98fa20789412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_aac74a22_a912_48de_8ef6_dcf5559d5e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e1c53e7c_f314_4c4e_991d_cda53d5cf808() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4bf58963_ef25_490f_b4b5_f4cbacd3b2be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_968e5ff2_1645_4115_b44d_2b4f18f6b875() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a206878d_2302_4002_9680_959dd742eeef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b9199286_65dc_44ae_a835_54488626a6ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_96d79ab6_39ca_47dd_8027_8f72e8853c47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8b87fe58_f430_4a0c_b1cd_de5c19751dd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9135a7a4_d524_4af6_8a1e_d92455eb4a76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0585d13e_2b19_44b3_859f_85a7730e49e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_40dd1577_3403_446d_a3b1_860f3e25bf55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_07994110_eab1_4ff5_9cc6_2f3e285e46c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e5b72dcd_2315_4aa2_ad7f_5f27d2d2783e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_11bfefd2_9db0_4af1_a70f_7118520c5b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_750e5d03_578a_4863_8d10_fc3283079309() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_3a57ec2f_ce0a_4e8d_9069_630d327567d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_9132f087_5382_4cc7_97ff_06afec628fdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_97400d8a_fdfc_493c_a9ec_509a1b9632fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f9b4128f_623c_43e7_a54c_7436bc7c9ed0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7fa42576_a932_4645_a6e1_4de86b849410() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_68620d02_503c_4145_a3b0_dcc0fc8fb911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a020ab23_5ce4_4e69_90e6_8a01fffe57c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_712741bc_a35d_4d4e_8538_ed682dbb3c3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ba997a85_964e_4fd8_a8c5_7a81e85f63b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_64674a25_bd7d_4132_b34b_a7a7e6d075f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_62198a5f_3d75_421b_9546_aba8b1c58542() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f857a5f7_8519_4a83_827d_9f2b816d002e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a1cf918f_7b27_4349_837d_bd3f92e40b28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9ddbec57_e125_406a_803c_cd81a0126df1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_63491030_e5fe_49a9_b796_a99808f3f060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_51f8d673_45da_45fc_a41b_c5a8d0989200() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f02bb53f_d4b4_46d5_b429_ff7cb390495d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d7446950_3285_474d_a270_978789408412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_d895572a_8f7c_4baf_a0c2_977b04e24d77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_2e4b4c82_82ae_4204_92c2_4a5e0c228be1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7fd45f81_1269_4b98_b332_d7c5271dbc0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7b7f1feb_6142_40ca_9c4d_348de7690eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_19c69545_f1ca_4d3e_89e5_75a216902a9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_51f8d673_45da_45fc_a41b_c5a8d0989200() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0b062058_684f_470e_a7b0_09f59c2ff93f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_46bb6df5_0f1f_454e_95a2_ad24a04694d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5cc33b70_1fe8_4f73_a06b_7ebf1696d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_369e60a0_af82_4d0a_86f7_55ba600b1925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_cfb96e3d_9380_44a5_a634_fc57fe9cc86b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_8adefca8_7981_4b19_8ddf_d7fb06fc31b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2b664586_8576_40ae_9da8_594ce69716f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0741d2de_abad_49a9_b292_f15b6061ee8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bdb227d3_74a3_464e_8582_aeaa4f0b8f55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c68aaf08_12c5_4f24_99da_26c69e2e2c8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_522d62dc_bfe2_4891_860f_6c36483e7772() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_06d90366_23f3_4fe0_99a9_12804f89945a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_956eaebc_77ff_42a5_a59b_6631b95feec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5012de6d_3796_4140_8041_a849a0e3de8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5cda23af_36b1_4597_aced_7e0e514b43a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0741d2de_abad_49a9_b292_f15b6061ee8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_96d79ab6_39ca_47dd_8027_8f72e8853c47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_052b4dba_e3ca_4e00_b4d5_6be9817f6b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1a3836ca_9c47_4fba_aa74_84ce38699987() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bcfda23e_5ad3_4c58_9354_cf4d72843225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_4dbc9c60_79e2_46eb_aef1_fe9f60ccb4a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9a094b3f_0ca4_4f27_9f33_a0f1134dadf9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_dae921a4_aef1_48f6_844c_a6ded0c3a021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4b39de92_0f70_4b28_81e3_04208d98c462() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_edab01a6_caf4_4cdf_865a_a5655f0c6a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_77c62676_b562_4077_9f31_2869628a4e6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_27e5a8e7_ce52_4b47_a536_2cd363b7b4e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e01f5a1f_4bca_4ea9_adbb_5eadf8991b0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_25f9dd09_24b6_4636_b217_8049165370f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b55614d0_9d11_4cfa_b021_a737ece939da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_98c4b2d8_e78e_4cb6_9da7_d8875a3e07fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a2bd35eb_e1cb_4123_8e59_3031e1313171() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_20913b8f_584b_475a_ade3_4912547d1bc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5744b908_2309_4527_9014_e30bf2fe329d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d87bebf7_7a81_403e_aba2_b81bc6574425() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f737ed78_86a5_44ba_b19e_d589cefb9c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a2910c15_9bc3_495e_955b_a42303cde52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3f3398ad_420d_41ad_a999_ba7e79eb5244() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8b3784a2_ec2e_4c7f_bc8c_c4c517f82184() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_53d71208_f00c_4142_aeb8_38afa4891b93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8ccdf212_a716_4053_b957_444b9a984be2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d6ce0deb_2c91_4752_b825_54171ba34825() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_61028804_9cb1_4ab6_a016_c4890cc834da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a5b62b48_9c31_45f7_8238_d233ee38258c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_06269574_26e7_4e24_b41c_195e989e8c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e28074bd_1d9f_4219_95e2_64c0b6d16b5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_13296526_4606_4635_a47d_35a9a4f1b042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a2910c15_9bc3_495e_955b_a42303cde52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_efd98c7c_3d2b_4777_927a_dd6f3703fa83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6a4a886f_6578_403c_93f1_84c4672eba25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_02b2c1b2_5636_4b6a_ba2e_4deb0cff6cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_af0a704a_8ee0_4d41_b01a_1749cdd59b07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_369e60a0_af82_4d0a_86f7_55ba600b1925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3b5de9e4_af92_41ed_9442_893609075436() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a28b75ba_c563_42c9_af0b_18171ca42691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_78a23fb9_896f_479c_8aea_7a442b9cc078() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_93ab52e0_22a6_4cbe_b868_a0a5bcb4c010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c993c20b_c8fe_423b_94e3_a11f5deadc16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8e8b4672_715b_4a7d_afab_ee9942726535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9a0e23ea_85c8_4de4_bef1_c7102c099819() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6bcd3631_fb4e_42ba_81b8_7c3b4adc9638() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f7c05bc7_7fa0_4459_9953_95be409debaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f5998728_2e99_4fb1_a0d8_73e4fe29b107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9e835908_49d1_442d_ab49_72330617fd7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_54181e4c_bd59_474a_8bab_a812bb9a5280() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ad9dec16_d3c9_4731_8dc5_dee2b8f1a765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9985de5a_70cd_449b_9925_ad41d39c710e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ba217f67_eadf_4060_b567_ee078b8dd154() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e1f96444_b43a_4bda_b27b_de2b15402ed2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e0f38c4b_1e4c_4e0b_a062_729f36235388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_14afa445_7117_458d_b311_990d6e6ae756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c0294b23_a968_498a_8d21_b312b94b9596() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_bb0ad54a_4522_45aa_a199_a3054e149119() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_037ca5d3_7abb_4323_9d99_89ec73e5d229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bcc26970_59bd_4ef3_95d0_9d90c5e76956() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_60b4fdba_7541_4140_92d6_4d17402d4dd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_956eaebc_77ff_42a5_a59b_6631b95feec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_857a9de7_b0a1_4caf_b31a_dcde96b8d8b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7841591a_fd9f_4dea_9928_c5b797e1f5ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_060a2819_6e41_48ae_a317_f1a7ed7bb0f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6d3ae927_3c41_427e_bc4a_7b85ef2e4e28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_fb9a89e5_7b24_4ec6_8bfb_cfad7cf35158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_cfb96e3d_9380_44a5_a634_fc57fe9cc86b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f94c1f45_5230_47fb_a05c_2166257d2147() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a5d8fef2_8fc9_4431_a0ed_ae9b98d796d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e088a530_6896_4fd0_82ac_5390573aa1dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_95c51af9_65a3_4bb8_9b7f_298c72d00553() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d56122e9_63f9_4197_8474_4c9e4b996fea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8525fbe3_2f09_4aeb_9f10_750af8c0778d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ade2dcbb_50dd_47b4_9a10_ae4fe9f9f475() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_eaf8d209_6cb8_4633_9182_d31e40ae72ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_729d1a6c_edda_44e2_b923_89b45c9ca179() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8d1234d3_1a88_4e6d_baf5_cd560ea9a213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_290ee586_c2e7_4809_8a2d_b0b592bc780c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4f750753_a2f8_4503_9272_caca33cb3835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8525fbe3_2f09_4aeb_9f10_750af8c0778d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cb50fbbc_46b6_4186_98f4_51bf54b9219f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5e3b272f_fa9d_43ff_a1bb_da593b9ca90d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e47b7f3d_d9c0_4c7f_b196_8da79b59c672() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5f3f3f9a_b7db_49e6_aefb_43f508ff1f8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_14afa445_7117_458d_b311_990d6e6ae756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d7ae68b0_5b97_44a0_b543_98ff72eb9a35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8fd35ce5_7933_421a_a8b3_6550e24cb7e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ff2367de_102f_406d_a914_389db5fd9535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4d84cb57_23f4_4fd5_904e_2d9cc1bf1c77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6a4a886f_6578_403c_93f1_84c4672eba25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_309b0f9a_a4d2_4547_bf46_cc2daafc0e5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6d911c03_a151_487b_985d_81055a9cd145() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_aac74a22_a912_48de_8ef6_dcf5559d5e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1c9b4fc2_c722_46d8_9f90_fe9c263508d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2fb84282_b9c5_4fad_bdb8_11b9dd34aca2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b3d3190f_ee3c_4626_8c7a_71b57cf59270() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fa01a8d0_3c23_4af4_bc43_c868b88267f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_98c4b2d8_e78e_4cb6_9da7_d8875a3e07fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_ee4ee609_caae_4a91_8da6_5d407b82bbc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8ae50af9_3f9a_4fd1_8a5d_c754d72c3dfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6c1d2392_ebc4_4aa4_a5b2_79bfff8ac61b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b932c68f_e1fd_4b0f_9a20_7caf81ddc9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_569e4181_3ab3_47ea_8476_160dce8960d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_17676952_3831_49ea_8e89_516b6c4f39e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_df391b51_f84c_48ab_939e_a2a42517d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c54a7d11_55ab_4d97_8ae4_43186b469c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_82687b28_053e_4cbb_bd8e_d466d0a0fb41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_267e8666_03bf_4c97_a841_fba23e5f3040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_3225a4d6_cad7_4aa4_add5_617c313c5840() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0ebc817b_57d3_49fe_af5b_a7900a58a72f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_96d79ab6_39ca_47dd_8027_8f72e8853c47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0aab9ae5_d51d_4a40_adf1_5bae976eb1f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_315c8bf0_9613_4733_8be6_15041013c286() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e5fec7d7_46df_4575_a8e6_ce6e714d88ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a59e8992_85cf_4c11_b7bf_a0f2e37b64b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9c361c82_823a_4bc1_b544_4f96962cd073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1a1c53fb_ae1c_453c_bdf8_1a0cca96ee6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9fab06f0_d3c8_4ca3_9853_1b26b564befa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ae93c031_4bc1_42ad_9b77_5e034b08fd66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4d84cb57_23f4_4fd5_904e_2d9cc1bf1c77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1edf4c22_4659_4acf_97aa_92d8c74fc401() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_af6bc2a4_7926_4038_921c_2144bce04a79() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f33ab305_b833_4d3b_9ea5_90b99987262f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_23cabc4e_563f_44c9_89a4_b3221fdb6e1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_38555b9e_8797_45b3_b3fd_87d89bec4da1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_763df214_be9c_4a01_8f98_198266809fbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2da30666_56a5_433c_924b_7ff410f448b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_623015c7_9db2_4461_bb79_dc9d654b5b9a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ea28a4cd_f4bd_4487_9a69_e38a819e6e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_372bdf54_6e55_4022_ae83_a9ee9fbd0a78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bfae48c2_ba42_4e1b_b136_6fc24e38fe11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f6f09421_6a5b_4047_baf4_1397188a1ca9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_370bc6a2_bdc8_4207_afe6_add8631331fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_54fe99eb_2403_4857_87ca_633fad6f907e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b11f0a88_08dd_4143_b40f_12b4ac993dcd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3ee170eb_1b3d_4115_83d4_49b504e91229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_93ab52e0_22a6_4cbe_b868_a0a5bcb4c010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1f9791dd_a7b1_4cd8_9bb9_1a854d99c7bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_14afa445_7117_458d_b311_990d6e6ae756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d0edd4a8_1e80_4fde_9b4b_d889a1bff04c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_95dae14d_e161_4b77_8df8_e27e4c02658f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6ed42b3f_3d49_4524_87bf_7f7a4e47baf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5543f808_fa97_4070_8e01_789de3dc4e0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_dc717223_ea69_4938_8e7c_0239f698bc19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_18971e1d_253f_4b42_ae7f_7ce2da6729a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_00770ee1_e2a5_4d37_8f53_064568593d48() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3b5de9e4_af92_41ed_9442_893609075436() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_46036afe_8af1_40e8_b036_259b8aea2af8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4c659fb7_13f5_4e50_9734_c92ae5c3c737() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_309df7ac_411c_4f97_a435_b1e2be258194() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2201305e_54ac_4882_b4c9_6738b74739e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_63c680eb_f510_4feb_9380_bbd9133ea758() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e01f5a1f_4bca_4ea9_adbb_5eadf8991b0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_38b59086_0c7c_47c3_8af2_395941d0e84d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5ac7988e_ef2e_4978_a509_01fc3c287ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2a17ae40_b5d8_453d_8c41_11f92d89db3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_df1ac9c6_86f0_4104_9354_68a1049dd643() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fcfcb8c0_5779_4e1b_af0d_efe6e456e620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_590d5623_4df0_4615_bcb3_cdf401d089fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3c06aabf_813d_4702_a795_fdb2eaec82fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b31b858a_5685_4517_8a10_db5e4f8dde47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bf56ed06_3dd0_4dfe_80d8_33bd5b397ab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_44db7931_24ba_486c_9ed6_ae1a5ff0de64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_199bfcdf_b38f_46ca_a1b0_df0831511058() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bfcff9f0_0d21_4402_af88_fa4ea3f9a78b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c54e8b14_6838_471f_b4b3_5e22f9cff441() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5fde443b_64b9_4b2a_a610_69f3a6ad2006() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_85c5a287_7416_4cbc_a082_412b2c34876c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_afecc466_176f_4604_bc47_957303a40ac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6c1d2392_ebc4_4aa4_a5b2_79bfff8ac61b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8ebe2756_2aab_4658_b8cb_e32542a30794() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4c090651_3256_46ef_a9e7_db98dc0c2fcf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d7ae68b0_5b97_44a0_b543_98ff72eb9a35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f049f7c2_a174_4f96_926a_83eaab07c263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_837148fc_9491_4240_819f_441dac599a8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0321342d_bb13_4852_8ddd_d8c833f1c718() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_375b0a74_743c_43a4_b056_b30ec26c0833() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_88402215_6f23_4d68_8de7_d13283a303dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_ef45541e_d303_4241_9ddd_1ede03a345e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c814dc33_e699_4b3b_b236_701ef8ee3bcb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_96d79ab6_39ca_47dd_8027_8f72e8853c47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3f3398ad_420d_41ad_a999_ba7e79eb5244() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f7240e90_e5d0_4d87_b2c8_af39b6905312() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ee234a98_2600_4606_8117_d0b09b53316b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_72aeec1c_931c_4eee_9dda_2ad8094c3947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e3bdd459_83e7_41a9_82c6_bac51deca864() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6ae33b21_b4e9_4c03_88d6_35d7cc8bde26() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6fe31620_b3c7_4fb6_93ae_18f3f08e07b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8183c81c_43e6_4aec_90af_50f08a358870() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f5998728_2e99_4fb1_a0d8_73e4fe29b107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c64d6cc5_dfba_408f_9d79_56addd2b5667() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d8de463e_4b69_4b70_a397_9a058634b8d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1945e604_bcf8_47c9_a783_483b2cb4cffc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ad9dec16_d3c9_4731_8dc5_dee2b8f1a765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8209b9e5_83a3_4a26_b31a_eddcde6c903d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_768ccb95_8e63_4503_b460_80bf946339d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8ce477b9_5406_4a3b_a431_7a9f6f03d51e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_34fd786b_962b_4989_84b0_1a88715d107e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ea28a4cd_f4bd_4487_9a69_e38a819e6e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_46a8feae_517a_4b60_95f3_27f1502efd54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fa88c368_d0aa_4801_82db_b8d118a36d29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_69a157a0_054f_4246_81db_16a8bf7fb65d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4b647afc_5fa7_4fa7_9f02_e02d9db892c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_857a9de7_b0a1_4caf_b31a_dcde96b8d8b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f02bb53f_d4b4_46d5_b429_ff7cb390495d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_10dbec00_7f29_4695_8482_781fe9d8462d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e7df0a4c_84cc_4865_a1bb_5c9a58087204() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_290ee586_c2e7_4809_8a2d_b0b592bc780c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b304ca62_3625_4d30_8f2b_0934c8ec6007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_32ca1e4a_ec43_4da3_90b4_d13281645197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bebbd571_6cdf_414e_afde_07944c8e8872() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_808e10b2_ee72_4970_af6d_4d9a08bc7cc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ab6e58ae_4bd3_42af_a269_64f4d87e3402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_52a2a986_b76e_4783_9785_29d56cb7c452() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6e55b432_1bd1_4db5_bd04_7edec8ca550c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f84c022b_67de_49cd_9f6c_01bd5749895d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_15166ec6_8047_4c78_9d7f_2afda2687e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_da9051db_99e6_4b72_b877_63cc38e66950() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_db4bc96d_a230_4bf7_8dbe_19ab09c13579() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ce67a044_2962_4576_9f28_69d9a13044c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b41a0927_56e0_4b0c_8162_f78481d04292() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cd4873ca_8f3f_42ae_b629_998788034f6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_69f5e7be_6221_42f6_b97f_0d7c3a5ccfd5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ac01f334_489e_49bc_894a_fa25edd8ef3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_acf2bc4c_cc90_400a_ae3e_c5dafaf03b68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_23cabc4e_563f_44c9_89a4_b3221fdb6e1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_92d29a86_3a6a_4e21_8d16_b5ba56e1e810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_370335e6_1795_4d75_a7e2_3cbe3260a43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_536861b4_159b_4b4a_9fc3_d4e421e41447() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4a04f9ee_75c4_4b64_b56d_9b7e1002498c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e7d6d9fa_5eaf_45eb_a932_a9f39e3f949b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f2ec5dee_cfd4_4e8c_a46f_bfc9e556e43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2b12da1c_6c29_439d_b2eb_8c73fcdb509a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_d19d2d4e_e813_4a73_8479_490843bd8040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1202bb40_7fc4_4c9e_ad42_f53d735c88ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5c9a1566_b7db_40a9_b13e_669b7ae44c03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7a06bd60_212e_4a68_91fc_7f275ae59c56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ad9dec16_d3c9_4731_8dc5_dee2b8f1a765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_47cae136_54d2_4361_8ac1_ab1a834e021d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_fcc3b482_40be_4540_8197_c33155c871cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b51dfa66_eee9_48f5_86c1_6e20885ffb3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_06938022_06b9_4be0_9470_c454eb5b3d7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0c8a7c68_4ec4_40d1_9dc9_972749087685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_732dac41_ebf7_4233_afe0_aa381bdefa8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_481b1d47_bb73_4cd0_9dbf_39472bfc08a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ff2367de_102f_406d_a914_389db5fd9535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_fcfcb8c0_5779_4e1b_af0d_efe6e456e620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3c425c26_7a3a_4433_ac52_01a9dac329f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0d06e089_cfcb_4146_808d_381509d71a82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5781a7c2_c5b6_40a3_906b_4ef5d0c75fc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_603118ad_7f1e_429e_b190_a57cd3cd9c1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f45b0b22_247e_4918_9216_2c4dfaab5019() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9a3637ec_7610_422e_b27d_6dcb5106c849() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a58f8da5_ec99_4374_882c_85e2b081e60f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_044b8ed3_30a5_428c_ac24_b46fffabb859() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_558df44c_ad2b_40db_b182_bff76277000e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_3a85be31_69e1_4628_b68f_062f88e6a9bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_306b27fa_9986_44e6_9578_31d5f6a2bf9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6c2c32d0_efd0_4484_b5ef_05bf47d7f39f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0bde64da_3232_4c64_b790_49751acaeee7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b4c55071_d0da_425e_9a8f_e0d165a9934e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3d3df9fe_0021_43d5_b94b_4dbad3123b5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_80c8e26a_ae7e_4ee5_90a5_1c487037e2f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_694cc508_8533_4370_9aab_fa1a89228467() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_72ba1603_7291_4e4e_b19a_2fc10ccabece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_98d49fc6_b3cc_43b8_9585_9bc08a22359c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3c06aabf_813d_4702_a795_fdb2eaec82fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5fd57764_dec7_43bc_902a_5b5896f033e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f737ed78_86a5_44ba_b19e_d589cefb9c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_1448abc6_740b_4016_95b3_9329fee0232f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_bdaecf8f_4ee6_41b0_9efb_ce684fce5fff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f855d8a4_2502_4ef7_b458_2a4bd7b6fa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5c8573e8_4537_4701_a812_58c8a001b783() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5cda23af_36b1_4597_aced_7e0e514b43a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a2546def_01ff_43b5_a90b_5f7c7d2696b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_60950d2d_9a48_4725_bd69_42559df4170f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9ef771b0_de8c_414c_9890_478f7aa76d92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d9b86c6a_b186_401d_88ac_5646e300aa05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7a093284_0578_4958_9ef3_27ee0650dea4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a51a14b7_3e4e_44fd_a7f8_00a81cb52c6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1a1c53fb_ae1c_453c_bdf8_1a0cca96ee6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a5d8b8f8_5ab8_460b_8d9c_266645d921c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bb9108ac_ebfe_458b_aa9e_a9748525c004() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_849103f7_c9fe_416d_8af4_85c87ac0c72b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_2bd3b0c3_534d_4d43_b13f_149f091df9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8125673a_5b91_46a8_9550_f388b11e697f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c626dadc_461a_4b01_8fe8_7c9c08435417() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c0294b23_a968_498a_8d21_b312b94b9596() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2288e6ea_dc4d_4da4_9c8a_04b0df767c93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f340ac67_cd16_4047_b2ab_8ff63c411e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2201305e_54ac_4882_b4c9_6738b74739e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b1410c7d_e423_4d66_955a_ad0d1057dc47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_aeb59689_b707_4be6_919c_92312e29b0fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1a3836ca_9c47_4fba_aa74_84ce38699987() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_da839160_a716_438e_98b9_74087f427bed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1427c1d6_782d_4b05_b52b_a3feffdaf731() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4cb815b3_f05d_48f0_9b54_f345867131df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_ff72de95_9fd1_4e28_8090_e5ec991916a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_01e25675_51fe_47fd_875d_e96271c36e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4ef414d7_fddc_451d_a29d_423d88f5a138() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_dae921a4_aef1_48f6_844c_a6ded0c3a021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e8b28da3_11bf_4121_a8d7_1a69c8c492cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a1aa45a6_90b9_4513_8e4f_c8af874af8e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2cf1e92e_3a7b_4f97_9ce7_aa7d96c447ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8492da1e_dc07_4d30_aaac_d03d44929691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ba1c5b0f_80f6_4870_ba6c_a2ea0f921d3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_035cdcf6_122f_4479_9cdf_1ff527286b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0724312a_b2d5_4d2c_b448_6e5f41191310() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2fbb9e47_b91e_475d_9107_8dfe0e24d669() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_adcd89e6_99bb_42a6_a539_3d504508d0ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_bcc26970_59bd_4ef3_95d0_9d90c5e76956() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4c090651_3256_46ef_a9e7_db98dc0c2fcf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2a1c767b_cfcf_493d_8bd7_c0caafb2d1de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_34152633_e620_4b86_8c8d_ed05e5830a30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6d3ae927_3c41_427e_bc4a_7b85ef2e4e28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_90b67a1d_e9dd_4940_a901_1bb527fd8cce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_99b863ee_c518_40a7_a560_3b893a9a9567() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ea28a4cd_f4bd_4487_9a69_e38a819e6e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b9de911b_d08b_4d3c_b914_c922f28110d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8a009dc3_96a2_458e_ab47_f3c08768b94b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d052cca5_f9a5_403c_a5f2_d1dd7e8d903b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_53a31fe1_53df_499e_b9a2_7e3a073fea42() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7fc7f2dc_82fd_48f8_bb5e_56f3478586bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6aa6d66d_1d99_461d_b61b_2f00d7bb25f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_191a58ac_584a_427f_91be_79b5da0c542a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2832bdb7_d979_4ad0_a753_dbbb06825b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_304e93fc_d27b_47d3_9be4_ff609e508c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c814dc33_e699_4b3b_b236_701ef8ee3bcb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_70bbaaa4_6c60_4eba_a5db_14b81e319baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_61619bc6_8e34_4e25_b82a_bcd33adef856() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7318e19b_6930_4c32_8fcb_e65cc418e1c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a5d8fef2_8fc9_4431_a0ed_ae9b98d796d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5ac7988e_ef2e_4978_a509_01fc3c287ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6d33978c_32d9_4732_bceb_19935664b243() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0a726183_d170_4a2d_a10d_0b06f2ce4053() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ca74aad6_4a0c_476d_93ba_6190ac143a73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b1f7ae12_5bdb_4971_9d55_7d357fcc2e35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_369e60a0_af82_4d0a_86f7_55ba600b1925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_80f245bd_538e_4a11_aa4f_c6dff001da8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2cf1e92e_3a7b_4f97_9ce7_aa7d96c447ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_08f041d9_5483_4302_a80a_e3854c1c4626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_15166ec6_8047_4c78_9d7f_2afda2687e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a1cf918f_7b27_4349_837d_bd3f92e40b28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a5d8b8f8_5ab8_460b_8d9c_266645d921c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c23a30a8_4b9d_4cb3_b89d_9042cfa17482() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fba299c4_b2ac_49e9_a7cb_ccb3838605d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_05b266fc_d660_4273_8c10_bb351c677df7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f45b0b22_247e_4918_9216_2c4dfaab5019() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_06405b8e_7fe7_466b_bf3b_40ff5c3a6263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b837ba88_0c9a_4a4c_abe9_d3955d9f7670() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1aaebd79_ce87_4348_be86_71e170ef3561() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c1595a06_7ab8_41d3_bd47_457e6634464b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3fffa344_a071_4344_87e1_deb6fc3b73df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_93552028_4073_4eee_8078_c223f7b7a621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2b4d7e66_74cd_4ae3_b652_a48115d4c381() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_995480a9_1d20_4f31_ae58_b784cde4a6ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_06d90366_23f3_4fe0_99a9_12804f89945a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d7b045da_d9f7_4e91_953d_af3a33e6dab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b26e001e_3f06_40ca_ad6d_3f99d5d06f12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8fd6496e_d983_41e8_86df_469abc9b15c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_34fd786b_962b_4989_84b0_1a88715d107e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f5998728_2e99_4fb1_a0d8_73e4fe29b107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ff454c50_8cf1_40f6_9ca8_543c0d294a9e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bcc26970_59bd_4ef3_95d0_9d90c5e76956() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e45fbff7_a0d4_46cf_b12f_fdbd8394cdca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1d3345b9_e249_4f3e_a3b5_56474c6fcf6b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_74d3af00_43c6_4091_9cfc_3c9d6bcb6835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d6362bbb_c45b_48b8_9201_bb24b55e267c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_31646a5e_4f64_4620_a22b_abe2278b73af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_90b67a1d_e9dd_4940_a901_1bb527fd8cce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9a673136_183d_4e19_9dcf_89a75a6901c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b26e001e_3f06_40ca_ad6d_3f99d5d06f12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_491b3d0c_2fb4_47bd_8ba3_1136df96358a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6d888c8e_f050_49d0_bd71_1c88e40a55e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ae1944a7_a241_454b_9d4c_cc08a20255d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_59be8ecb_cbec_412f_bf6a_8a7310faca29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d14ab80b_6c45_49d2_aa9a_533efa6d8cfb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4657e7a6_48e8_478d_8167_92da1cc5bee6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f6f09421_6a5b_4047_baf4_1397188a1ca9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d895572a_8f7c_4baf_a0c2_977b04e24d77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_72da67b9_087a_4858_9b2d_50c5d879dfa1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_79fa659c_0c71_45c6_aca4_cd8e7ebf3967() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_75905ef1_177f_4199_bb8c_36561676f6dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_292627bf_09aa_4fa0_98f0_89c127b4d642() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6f9ad5a1_fdda_441f_a1ba_f6086f82a974() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b227a9d8_feed_470d_8c3d_0d276d3f2e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_61619bc6_8e34_4e25_b82a_bcd33adef856() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_da703dd0_de97_4a37_8d9f_36eeafdd8cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_886118d3_3a18_4d27_8af5_323dfa75476d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b056b70f_34ab_48d7_9ea6_1fcb99d24484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cd63ab28_50e3_4f21_a06f_6382af40d566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d355950b_d9be_4216_bed6_47f5099b7af5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_feaf1a9a_487b_444b_95fa_58ecf7988e96() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_26048655_72ce_41be_8b15_e4bf348433f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_a51738e8_8ff7_4126_b187_4f54855e3d07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4dd952ee_ba10_4cfe_82dc_320df8758a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_203274bb_247f_4451_b6f7_1a71272cb6bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7132fad9_02ac_40b1_9255_0a0efa1a3555() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_03b66409_b1a1_43f9_952d_5bcf82d63a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6834c735_74ff_4f19_9141_b72bd4f3d7ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3bd85280_801d_4d3b_bc72_9ab2a5b91468() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d9b86c6a_b186_401d_88ac_5646e300aa05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7893d1de_f8b9_4be2_b04b_fb73201c6589() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_00e25ee7_df89_4130_b4d0_734d8b8387db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_caaf88b6_5705_427e_9eab_a51158e981b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fcc3b482_40be_4540_8197_c33155c871cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7647c534_b93e_4316_98db_fd4e1f4cdc5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e7bc7abd_dead_4474_9b2b_fc52a91d30f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_202c0a5f_50ff_4f13_8aba_f34dbf03c88b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_65c65ee3_fb68_4e84_a28e_8789ff13e3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_93552028_4073_4eee_8078_c223f7b7a621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_6ff062de_82ae_4c73_b81c_45fea18db66d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_0b062058_684f_470e_a7b0_09f59c2ff93f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2288e6ea_dc4d_4da4_9c8a_04b0df767c93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_acdbbf25_0f40_444c_b8c9_e695392d82f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d6ee4fe1_639f_48f6_a4fa_fda54f6aa5ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_eeced3cd_7e38_47db_befc_8ae1f8e2d400() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e01177a7_5449_4f01_99ad_4331d8d18c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c451a034_a863_421d_9e83_2ce4678e167e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d5377c00_3e7d_470c_9a72_cee3dda8a276() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e21bfc8f_f584_4787_b41a_6cfd8f853448() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_28f11549_6f7f_4b45_bb7f_b51b0e65c9ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a5bf4aa5_654d_4ba3_b263_ef14423a5685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7a65b6a9_33d9_418b_a1d2_8915591b57ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2c9bfbde_a620_4033_be8f_894bdab1251d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_15aba3b8_faf7_4d1d_9490_b70b291af662() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_74ffd2a1_b9b2_40b6_a335_51a75f01a0bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_870dc8cb_92ad_4955_b58e_76b9bc87fde4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_edc00cae_b2a3_44e4_ab1a_57da12292e39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cc0f70a3_dbdc_4dc2_a1ba_d353fe1a6173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_808e10b2_ee72_4970_af6d_4d9a08bc7cc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a0eafbc1_7c87_4153_bfa1_5217c88b5546() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a6071f27_0faa_44c1_a543_c9fff15dc0d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d752727a_8cf0_4a59_a15a_401ab6b1d2e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3329eabb_a99e_43b5_9d50_089c0f130832() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3047c64b_5602_4c47_9ba2_2f57df36b75a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_de98c634_292d_4e4a_a9be_9cbdb1453ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4c659fb7_13f5_4e50_9734_c92ae5c3c737() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_74ef5886_3db2_4cda_87e3_c397828d6613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2a87427d_498b_46fc_911f_e0edcde83ea1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5650e95c_4c05_4860_aed8_463b30cf1704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b584cd90_67cd_4160_90ab_dbfa4bb4e38d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_47692e4a_b11e_4af4_83c4_b4bed57de911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_617352a9_fce3_490c_985d_1f0a08e300bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3bbf6a67_5d8a_4a4f_9c0c_03318d2b1747() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_63c680eb_f510_4feb_9380_bbd9133ea758() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f2f4133d_dff7_4721_b106_ab7748dd54e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a55ab954_ed2b_4c8b_bb8d_189269c24c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_a8b27cb4_913d_4550_9fc2_dabfb1794d49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4992d0e2_4483_4d63_bee6_c61f48caa9ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_01ed684b_0d68_4bab_8c60_bbb1130462ab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_17676952_3831_49ea_8e89_516b6c4f39e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3329eabb_a99e_43b5_9d50_089c0f130832() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a31fde65_1936_4a78_ae43_5037eaf66661() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f2d8dbbb_8c31_4de0_afd2_508d6eabcaea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ab6e58ae_4bd3_42af_a269_64f4d87e3402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_99df2b99_293d_4234_b27b_30d7cfb3a968() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_34152633_e620_4b86_8c8d_ed05e5830a30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b4a7563d_dcaa_4eb0_b88f_a806a24550cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_feb814e5_d0c5_4776_a9cc_22ff0a67d46d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5f3ccbbb_ab54_4f43_8a31_8fad3d8e933f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9074651c_72fb_47e8_a9f8_d7b8e007a409() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5a2451b0_6b54_4153_8c49_73a727fd9d53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5e8cf068_7b38_426e_8638_ea9a72ac407d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_d7ae68b0_5b97_44a0_b543_98ff72eb9a35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5c1473e0_c333_4d24_bb90_1046368e7fe1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ede41b02_7ad7_4092_b44d_0b4c40bc64c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_28f11549_6f7f_4b45_bb7f_b51b0e65c9ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e87da859_b909_49eb_977c_ab78f603d86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7647c534_b93e_4316_98db_fd4e1f4cdc5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_fdaf3392_34e1_4463_aefb_80d33bb68e4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_57eb73b0_393b_4f32_871b_a7237c99bde1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_28409518_f84c_434b_b27c_f6d60e999868() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_98849b06_dc44_477d_8c0d_7285e8c5df02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_24ff4838_1e03_43ab_93ba_1df273cfdd76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_d0edd4a8_1e80_4fde_9b4b_d889a1bff04c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_61619bc6_8e34_4e25_b82a_bcd33adef856() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c4189ee6_cc2c_4cf9_95aa_ef1477dd9032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5f11e901_f42f_43d3_883d_34cb7f4ce9f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a5bf4aa5_654d_4ba3_b263_ef14423a5685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_331250db_e6f8_41e3_a1b6_5b0b82b31041() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f9aa0cc3_77b7_49bf_824c_c80c5cec8d71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d56122e9_63f9_4197_8474_4c9e4b996fea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_5040b327_01c7_4a44_a9e5_98184c146baa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5d69e473_920a_4c89_853b_65ed286e091d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_09f5344d_62e8_462f_b99c_08efb964fe41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c1ec123f_0f0e_4425_a81f_8ddae93d361c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7e98b08f_1db4_47b2_b8ef_0db04f663b52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6bef330b_f453_4e05_89ea_5959bc908fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0186b02e_1193_4c85_910b_c020cb41367f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_809af517_ac01_4279_aa38_a5e585bf05ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a2ce0981_0c79_4bbf_bc6f_a506728e3223() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e1e8cdeb_3d02_48a8_8da8_470ef9f1c571() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a020ab23_5ce4_4e69_90e6_8a01fffe57c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ade2dcbb_50dd_47b4_9a10_ae4fe9f9f475() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e694a6d2_6ba7_4408_9e91_05ce3345169c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_04bd1bdb_dd31_459d_a95d_d001ce9781ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_86d1ad5e_cc56_46d0_86d5_7a9f805c14ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9af9967c_93ee_4283_965e_b140d0d2556c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d5377c00_3e7d_470c_9a72_cee3dda8a276() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e7df0a4c_84cc_4865_a1bb_5c9a58087204() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6bfd7e19_5fa2_40b6_b628_3e090b7291f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1a3836ca_9c47_4fba_aa74_84ce38699987() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_9a7e3ef2_5199_4161_9432_fb2f3f0424af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_86ab6a0f_99eb_43e5_8c2b_807e948dfd60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6a02e0b5_5b54_48f7_8a7f_1f09bcab15a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_25c21292_520c_4dbc_875d_6c2d4848059b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_7f1539f7_71c2_4cad_aacb_052deb2bb33f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7fc7f2dc_82fd_48f8_bb5e_56f3478586bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c23a4b41_c833_4c99_845e_dfc047045f7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8282fa9f_6971_4f0c_a8c3_eb8a39428eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_94e61289_5c99_40b4_8e86_bce683d238ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d8c3b788_d483_4d47_b123_e190e929a802() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2bd3b8cd_4a44_49c7_8e3a_2251035b70a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b17300a7_02a9_45b8_aa3a_fabe80514afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b4772359_1078_4888_ba83_d1f253b1f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b4a7563d_dcaa_4eb0_b88f_a806a24550cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5ea127b1_3edf_4fd2_8432_63177e689a39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_893fb587_d247_4eb1_b160_e4f546a7b6b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c5cd0afa_b98a_4ff1_85cb_910813c64a83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a8b27cb4_913d_4550_9fc2_dabfb1794d49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_98d49fc6_b3cc_43b8_9585_9bc08a22359c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f2d8dbbb_8c31_4de0_afd2_508d6eabcaea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d224ba2e_e119_4dc7_a61f_6b4010c8c2f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3944016a_7e56_4f7c_9b1f_0c882c66c541() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5cb9611d_55aa_43d1_9424_7185c7d6982e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_67324c69_fefb_4852_96ec_87f2fafb1767() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3cdc3c22_9d91_436c_8204_f90abb946706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_bd73a1d1_34eb_40d0_aadb_21caf1e222d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b056b70f_34ab_48d7_9ea6_1fcb99d24484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_48628e34_531f_483e_b5ed_385f5217b923() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_07d2382e_7e07_4eff_8b2d_e1821d5d0a3c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a79fdd1d_2e02_4e29_a68f_33da15dc40ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_34831057_edd8_454b_a62b_0cf101905b76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e877df89_22b3_431d_a34f_44700be5237d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ca3ef9e9_d3aa_4ec4_bccc_8543f51790d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_eba31641_f2a9_4fb3_b226_e858090fc23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f68925d3_3ef0_41aa_99c9_0e8d528e304b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ff72de95_9fd1_4e28_8090_e5ec991916a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_3580e7b5_17ea_4286_92ff_195e213323e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b76f81c5_4161_4471_a3c2_e33feaaeaf52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f27df727_d098_4d3d_8809_ed944ea933b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bdaecf8f_4ee6_41b0_9efb_ce684fce5fff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f97be7f1_e384_46bb_b3a4_1637eeffc69a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e4df0806_8004_409d_8522_e47c7de018cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6b8c380b_6ab4_4863_9012_8a5e02946711() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4295d8a2_a0a3_4d94_9c3b_d683fc28bc06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_821490fc_c276_470f_9f06_8e99a4a94168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d40f004c_722a_4959_9fc8_125a6778b552() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4b600242_6994_4929_a1dc_bf035db62a40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_20531674_1a4f_45ed_944c_719e4ed9a6db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9533448d_2fee_4767_86ef_8aea6b271ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_25835e55_3c19_4b34_bf9a_f4007eb48f00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_64674a25_bd7d_4132_b34b_a7a7e6d075f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fb9a89e5_7b24_4ec6_8bfb_cfad7cf35158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_61619bc6_8e34_4e25_b82a_bcd33adef856() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3043bcb4_364d_40cd_9f39_be2317e8449c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d3eae0eb_2f96_4eee_bdda_d6415912aebc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d6ce0deb_2c91_4752_b825_54171ba34825() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_bef6894d_6027_4a7e_b5a2_2fec3dcef1f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_6f9ad5a1_fdda_441f_a1ba_f6086f82a974() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_abd09ee9_899d_444f_a2ab_52d767211318() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_efbef808_23a2_419f_9cf1_0c09fcdc4b1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c814dc33_e699_4b3b_b236_701ef8ee3bcb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c78fee96_73e0_4db9_a3bf_d6857dbad62a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2bf58553_9e53_41ed_82c7_a0f6752cfeec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_6c1d2392_ebc4_4aa4_a5b2_79bfff8ac61b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_679e86e7_cdad_4ea7_960d_bc14440f3a2e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_31b1f795_b60d_4155_8803_05922ff69613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2267bd43_5b1b_4e37_9989_818e70f0f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_34152633_e620_4b86_8c8d_ed05e5830a30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9533448d_2fee_4767_86ef_8aea6b271ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bbec2e79_00ba_487a_982b_36f6982072c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_731aaaa0_aa7e_4355_9070_9b935d911066() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_4333ea56_ee3d_4b6b_b9aa_49658a2d90a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1ad5074b_88f3_41a3_957d_a3ef28b6a99d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f16b00ec_60da_4bdc_b1be_dd86df39e52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_77bae181_7139_44a1_b5aa_713274d429c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_930894ca_0454_48eb_a6b2_6ddf550fa4cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2b12da1c_6c29_439d_b2eb_8c73fcdb509a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_92465c43_2ddc_40c8_bd2d_9bb8d8341afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e2c8c77a_c36a_4c47_a999_f8e739d42e58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_86ab6a0f_99eb_43e5_8c2b_807e948dfd60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2160d417_0be3_419b_975a_65b7832bf5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2b12da1c_6c29_439d_b2eb_8c73fcdb509a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_174a84ba_5f68_45b0_9d84_38b3575d7d0b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0ddbdfcd_5123_43d4_8552_0d337030663f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_26f33b0f_0228_4338_999a_5195e138199a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0d4da408_3cd2_448f_9bce_1db7ace344da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_82cb1ce6_eda3_4755_9832_3ce52c8fa6e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_ec39a0c9_2323_4471_909e_337347b1b7ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fbff4394_6578_49c9_a71a_808c42b4d5a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6c925021_cc26_47ab_a4c7_e04f0132078f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b7196086_2e96_4916_a5b3_d8ff5e293e86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c23a30a8_4b9d_4cb3_b89d_9042cfa17482() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_327811e1_3a2b_45af_8225_c5cc17620a81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7d46a874_1f6d_4966_a958_23dba48b995b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bccc0175_c942_4b78_997c_62b1cd4a0dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_046186d2_0a9e_4a94_a8ee_30ef5e9e9991() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_56a90d79_5604_42ce_a3c3_f951c4cae047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_808e10b2_ee72_4970_af6d_4d9a08bc7cc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e885c4c4_86da_413b_891c_c06834c988a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_96e72c4e_8fbe_4fc5_b64b_52be64623984() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6703009e_7a8a_49d2_88cc_7116394c5d17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c5cd0afa_b98a_4ff1_85cb_910813c64a83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f342a60e_bf7e_4f66_ac6b_9124048f8dee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_cd63ab28_50e3_4f21_a06f_6382af40d566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3a1ac45d_c83b_48e9_b74f_f627f79fac03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_180d2dd0_f405_442e_967f_a91c3a14973e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f9b1b82d_3349_465e_bb61_9f4a578abe2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c5cd0afa_b98a_4ff1_85cb_910813c64a83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e1e8cdeb_3d02_48a8_8da8_470ef9f1c571() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_5ea127b1_3edf_4fd2_8432_63177e689a39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_abd09ee9_899d_444f_a2ab_52d767211318() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_763df214_be9c_4a01_8f98_198266809fbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_69f5e7be_6221_42f6_b97f_0d7c3a5ccfd5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_22a70d35_95a4_43ef_8255_3f4b3f5177a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e9f84464_a806_45a7_a14d_7b42978b3c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ad938b5c_5d05_4bd7_b33d_e5bc833456a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e8b28da3_11bf_4121_a8d7_1a69c8c492cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f45b0b22_247e_4918_9216_2c4dfaab5019() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e07f6abd_0585_448c_86ca_40c0f3c85407() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d418e39f_f8e4_4383_bd08_f65e1f63258a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_3329eabb_a99e_43b5_9d50_089c0f130832() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c299139a_8973_4505_bde2_844a952eda63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4b600242_6994_4929_a1dc_bf035db62a40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_81e4d4d4_3e2e_43a3_849a_30554f84fe98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b51dfa66_eee9_48f5_86c1_6e20885ffb3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_fff5fc4a_ea2e_4c8a_9180_da8cfb7061e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4d3a4ecb_0e8e_4740_8875_796025637c5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9132f087_5382_4cc7_97ff_06afec628fdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_308fad1b_0112_4514_9871_545732d0e5d0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0a627390_6365_4467_8626_500f1874ad03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_67e3fe88_de03_4471_b83f_f69ea22d2496() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_88b7c0bd_96fd_49fb_8950_54bbdbfb3955() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_26ec5711_28da_486c_9c50_219ff7cc0450() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8ccdf212_a716_4053_b957_444b9a984be2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_af007427_34b4_4193_b0fd_5e222e1aa421() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_47c13555_7891_42e5_b3a9_d0d75686e049() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_a6b2d822_4074_47c8_aa46_e5751e6e5367() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9bf8e74b_399f_468a_9fe9_949b43503748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3a7410bf_29d0_4619_88b8_6b0669a66765() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_15f9249c_abdd_4e87_b627_4a674126ea75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f00b01f1_495b_4d5e_9d6d_5892a20f2b89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_135a55cd_3659_4de7_bf7b_a477461f0f11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_efaa1305_3e74_4610_ac5b_f81526d90db2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_20913b8f_584b_475a_ade3_4912547d1bc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f90db12c_06c6_4dbd_ae69_afdf96f69b14() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a97c6473_18b7_4216_ab35_c37ada968197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_46318ffc_e207_4052_8175_4accf7d38b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_87e4e8e3_baeb_4501_ad60_6a69ad586c3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3c89a5f6_da79_4175_9b0e_95f78c683f94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_046186d2_0a9e_4a94_a8ee_30ef5e9e9991() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c55f0855_ca3d_4fb4_b02c_61fede0f6343() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f7240e90_e5d0_4d87_b2c8_af39b6905312() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_90cf6754_6402_4df4_8280_1a5945e38e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_3a7662c9_8b17_4ba8_9498_2dd824635c33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_04677b08_4fb2_45b4_8f8d_e4ceab8b7b58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_65c65ee3_fb68_4e84_a28e_8789ff13e3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9985de5a_70cd_449b_9925_ad41d39c710e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6a02e0b5_5b54_48f7_8a7f_1f09bcab15a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a6b2d822_4074_47c8_aa46_e5751e6e5367() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_7b577615_0e7d_4243_a105_1ea2572bd540() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6d294327_ae42_484a_a703_3d70ebb7b7fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_72911099_ae99_45ee_8716_1e801031ebd7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f00b01f1_495b_4d5e_9d6d_5892a20f2b89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d8de463e_4b69_4b70_a397_9a058634b8d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cd4873ca_8f3f_42ae_b629_998788034f6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_74f4dc62_5d95_4315_b36c_d759d182c181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_34152633_e620_4b86_8c8d_ed05e5830a30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6d61ca5c_49af_420a_842b_f69cbe6d5351() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6439eea6_3e10_4fb1_88bd_b536b7029012() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_06405b8e_7fe7_466b_bf3b_40ff5c3a6263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0520ea69_8105_4dec_b3de_77d6523cb5a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6c6cb5b7_4907_4516_92ad_7b29768c1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_54fd500d_e788_4238_84cc_94b08e188792() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_58d6fee2_529b_48a0_bd6a_373ca8c281f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8d74af62_a236_49a7_81ce_3597704dfe01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7475da91_311a_4edd_b72b_c13836bcf6d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_30b97351_0551_44cf_978a_76520fdeb8cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cd4873ca_8f3f_42ae_b629_998788034f6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a2bd35eb_e1cb_4123_8e59_3031e1313171() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f5a83bc0_c8ab_494a_82ba_f6673deeddaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_773e3290_bc31_41b1_9613_0194f2728e2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_07a5938c_c62f_4fd7_9904_33aea4c86099() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_751fcce6_d6c8_4838_9740_908b59b0c0e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d1d59cad_5211_4481_8518_f1b0ea15503b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b1afa205_4c47_4eb3_a540_f0d2589e90ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9416b36d_ea1a_4860_9586_1b052549d0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f1d77301_06ba_40d0_9850_3d85148def9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1e71e19d_a256_47c3_b974_ee3ac3567a5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_757d2b3f_aeba_4db3_9a7e_efba9acb8d2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1d57b98c_249d_4d04_bcd1_3f4cddd13527() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c1ec123f_0f0e_4425_a81f_8ddae93d361c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_03612763_5740_4d8c_a351_2970f859d4b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c68aaf08_12c5_4f24_99da_26c69e2e2c8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_88e7fb96_7d57_4ada_9ede_fed19f3273e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_77bad787_453a_4ba3_bcda_75156c64be4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_59f424cb_6bd8_4840_b9f0_f48466ba8d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e877df89_22b3_431d_a34f_44700be5237d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e604462b_37a5_4a46_8d0b_17e74c6d6a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8db69925_0565_48ad_8b01_2d0d610f4a72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_31b1f795_b60d_4155_8803_05922ff69613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f857a5f7_8519_4a83_827d_9f2b816d002e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a10f374d_aeaa_4bae_9885_2bbdb8d9d168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8c5306fe_2dea_49ea_8678_d65320e5c962() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4ebed85b_b770_44a8_a578_a1760250fb8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_5157b0e7_5c37_466a_8427_328d3046b9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_476cbb75_d885_4e10_96aa_973202f7685d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f94c1f45_5230_47fb_a05c_2166257d2147() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1fcb1f5a_c441_4719_82e7_0721859068b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4859f171_7ea1_43f2_83f6_74fd5a24eac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_995480a9_1d20_4f31_ae58_b784cde4a6ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1c558239_86db_44e1_9755_8121b9385755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7b7f1feb_6142_40ca_9c4d_348de7690eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_11bfefd2_9db0_4af1_a70f_7118520c5b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e4479473_9f59_4368_8f7e_0689d3c1a59c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_334cb070_eb9f_4c1c_8819_92a9cbd77b14() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3d302b84_0423_49ec_ab29_cbc423cdf549() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f369ba0b_9961_4f3c_970b_8bafdc9fd6f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e33b6eb5_f3bd_4cf3_90cd_90ee5f59c96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_84c9b48b_484b_40a1_9266_2fca3b54c173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c709500a_cdcc_4977_9d86_ac6ac578029f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_efd98c7c_3d2b_4777_927a_dd6f3703fa83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9135a7a4_d524_4af6_8a1e_d92455eb4a76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_10520ce8_474d_41fe_8eff_23fc15adef56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_97a65ee2_94a6_42e9_b552_764779f519da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_cd832202_b3b6_4bf3_a17b_60b06abfdc34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bd7217a3_3b17_48ad_a6c0_39baff6b0657() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_96ebb77a_9925_42a6_a38f_3889cb958042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e3a6cf9a_730a_4d0e_8711_01110907dcc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8ae50af9_3f9a_4fd1_8a5d_c754d72c3dfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_bdb227d3_74a3_464e_8582_aeaa4f0b8f55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_675402dc_b404_4354_a57b_80abff1eeb39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_82cabb35_66e8_4f2b_8c1e_82d132e56735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ef45541e_d303_4241_9ddd_1ede03a345e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3274b618_980a_4b19_bf36_7ea8e8de121f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6998c1f8_d7f1_4ae5_84ed_d629a7ec7ec9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_90b42e37_26d5_45ac_9b7b_d83727a37091() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_da839160_a716_438e_98b9_74087f427bed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e3907d6b_f302_492a_b8cb_c3eef367348f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7d487dcf_8861_4a4d_8c89_950f5929a6b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c05ed265_5543_442d_b3dc_4f9bf16e99db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c5cd0afa_b98a_4ff1_85cb_910813c64a83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_46036afe_8af1_40e8_b036_259b8aea2af8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_77c62676_b562_4077_9f31_2869628a4e6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_96ebb77a_9925_42a6_a38f_3889cb958042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9a094b3f_0ca4_4f27_9f33_a0f1134dadf9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_14241fd2_b741_484f_92f6_07dd53880c1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f3e57c6b_d605_4916_96d9_10fff44e5d55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_849103f7_c9fe_416d_8af4_85c87ac0c72b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b498d9b3_985e_4d9d_b29b_9c3045dc11ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2326342f_d981_4249_8917_81c6971c40e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_99a3dd4c_6f79_4e06_93a6_72cd24f81893() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_564a5e29_b1ac_4ee3_aa88_2e5de69e9e60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5aa89345_cc9d_4dc2_b311_a6a8bb5d793b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_45076c5d_ffb2_406e_9172_4db36107ef19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_8c42b47a_23e2_42ef_9c69_038e6a3b53a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e1022359_5a75_4059_b56a_d0e56c6c0624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_86d1ad5e_cc56_46d0_86d5_7a9f805c14ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_14382c43_b9b1_44aa_92fd_e2d8bf052f33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1dde8c22_9c23_4895_99e2_a0534e2bde3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8fbf3b60_c8fe_49c1_80b7_5562f73c7438() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bfd55b99_f54a_442f_99ed_b97875dcaf7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_df5b9228_2696_4e83_a8d6_4ac73fd9f293() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bd7217a3_3b17_48ad_a6c0_39baff6b0657() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f10fbd61_dd53_4a7e_9d0c_afc3111088fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b56c8b1a_ef6e_4c5d_9982_9f53e6e64663() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_666de809_03d5_453f_9fbe_dd4bfb8c0524() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0c01ea96_5a5c_4d38_af48_c8dac16ed3e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_be427e26_a24e_4d0e_a651_bbbdcdcef432() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7d46a874_1f6d_4966_a958_23dba48b995b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_95a01bd5_ecbe_41a6_bd5b_6714dd84edc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8fd35ce5_7933_421a_a8b3_6550e24cb7e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fa01a8d0_3c23_4af4_bc43_c868b88267f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4859f171_7ea1_43f2_83f6_74fd5a24eac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_06980093_e894_402b_93fb_cbfc432852d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f049f7c2_a174_4f96_926a_83eaab07c263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_410d3d6a_3142_4d6c_bb4b_ccec07654ab7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4087f2dd_63cf_4c1b_a969_7ae4c8aa7e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ff6a0a67_53b4_4557_9b11_eb5a1e67b2fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_5fde443b_64b9_4b2a_a610_69f3a6ad2006() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_77bad787_453a_4ba3_bcda_75156c64be4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_df57a0cf_d4a5_4091_94bb_fe0633be8d6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_66c5b2eb_b0aa_4f39_b805_192696ade28e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8ed2ec77_296a_4e5c_84fe_99b5dd3e401b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2ada1a99_15f7_4df0_8c77_30a4e124d98b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_852b511b_436a_4022_a581_c8361f358e31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_491b3d0c_2fb4_47bd_8ba3_1136df96358a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c5e1e3e3_bb71_442b_97e1_dafdc4f88c1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_03612763_5740_4d8c_a351_2970f859d4b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_71a7034f_ad7c_48a4_8c19_efd469d07dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_808e10b2_ee72_4970_af6d_4d9a08bc7cc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a00aa613_cf58_4c4f_ae70_90dbe4025f13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f1c2c52f_3296_40c8_a363_0bdd1b49f795() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_87d3330b_a138_4bd0_af92_8169d36c1e27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_bdd8f061_b905_41e1_bee5_b84a78a7a4c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9b53b0fc_c9e9_43ae_ac2b_bc740907cb24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_0ed7e1ce_d7bb_481a_8305_85e2ad5eb766() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1427c1d6_782d_4b05_b52b_a3feffdaf731() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c1a0ad1d_7aaa_4a83_8950_9607546289db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_25da0985_6082_4dda_a8ef_9f298114257a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c5e1e3e3_bb71_442b_97e1_dafdc4f88c1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6b839c71_69b5_4484_85a6_8249f4b73551() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c4234177_ddea_44ca_8de7_63ddd7eaba9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b5ec3c24_c897_423c_9e32_e883407e380d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a2546def_01ff_43b5_a90b_5f7c7d2696b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_712741bc_a35d_4d4e_8538_ed682dbb3c3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_75a7d86a_7f78_4603_90e9_5d8c0fbf9e11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9cc92481_af05_4cbe_9a43_1486dcbc880d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3ae4a2a1_764b_4631_9df5_67e7126bea6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c9c3c734_e4f8_4050_ab04_b065c2882c53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_75a7d86a_7f78_4603_90e9_5d8c0fbf9e11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6e55b432_1bd1_4db5_bd04_7edec8ca550c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_67324c69_fefb_4852_96ec_87f2fafb1767() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_dc76ee2e_a868_4043_bdaf_27848cd83e13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e8cbb386_a17f_47b2_9f6f_83f270e29455() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_17392b4d_f207_47de_9da7_8528b4deb0e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_45076c5d_ffb2_406e_9172_4db36107ef19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6d294327_ae42_484a_a703_3d70ebb7b7fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f53f1f82_3808_482e_9a9d_6fbeccdb1b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_fcc3b482_40be_4540_8197_c33155c871cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_28f11549_6f7f_4b45_bb7f_b51b0e65c9ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d5002e31_70a0_4c89_a0fb_e76360923f90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_95c51af9_65a3_4bb8_9b7f_298c72d00553() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_47692e4a_b11e_4af4_83c4_b4bed57de911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b94d4181_a53a_4eaa_9d74_cf3e1eac622f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cfb96e3d_9380_44a5_a634_fc57fe9cc86b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a5274842_877a_43c5_9e8b_9fd42f72bd4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_8f2b4cc4_ea90_42b0_bfd6_af26f150de03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1ad5074b_88f3_41a3_957d_a3ef28b6a99d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d8c3b788_d483_4d47_b123_e190e929a802() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4859f171_7ea1_43f2_83f6_74fd5a24eac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_27e5a8e7_ce52_4b47_a536_2cd363b7b4e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_902ff0c7_8c3c_49fe_92d2_cf026e8d6c58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3d1e0f67_e0ab_434f_94d4_b05285ed6340() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b5eac88f_04bf_4790_a47d_783d8b8fa57e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0efa0968_79a4_4a4f_a0a0_3d7aa2d589fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b2352be0_2d83_4feb_a650_f5d2f4e57d56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_69a157a0_054f_4246_81db_16a8bf7fb65d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_34152633_e620_4b86_8c8d_ed05e5830a30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9f1c5893_d8c5_4daf_9d6c_b4b96f56d998() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6c1d2392_ebc4_4aa4_a5b2_79bfff8ac61b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_74ffd2a1_b9b2_40b6_a335_51a75f01a0bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_42653d31_cad8_4f4f_8967_8df6222ceff5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ca2b5c9c_43e0_4eb0_afe8_d1868508fb83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5a2451b0_6b54_4153_8c49_73a727fd9d53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_773e3290_bc31_41b1_9613_0194f2728e2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bc06718b_85fe_4c08_b043_59b704ce3d64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c30aa0e0_3cb0_4cff_b1e9_0221d6cdf9a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e01f5a1f_4bca_4ea9_adbb_5eadf8991b0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1202bb40_7fc4_4c9e_ad42_f53d735c88ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e3907d6b_f302_492a_b8cb_c3eef367348f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_77597bec_75ef_451d_ab1d_94d18ad9332a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e19eae6b_dc78_45bd_95f6_86bbbd7ad5ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d4600a47_e600_4992_ba49_e27860e10083() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6eebc876_8b2d_48ae_aba0_758361a409e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3a57ec2f_ce0a_4e8d_9069_630d327567d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_bedbcf85_4de4_4116_a096_1748f1d46251() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5c41eae0_e34a_472c_9d99_0c550eb25690() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5202199d_1983_4caa_9288_6d7bf28ede84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e19cb88e_32d9_4618_89db_5585efc56498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8d643ba7_381c_4e1c_8bc5_ab3c9739953c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_244af958_60e5_4a7a_ba13_87031711893f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e85619d8_16cf_4e07_95d8_9009216a92d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_33895557_3680_4c91_95ca_7cfe4accf8fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5a2451b0_6b54_4153_8c49_73a727fd9d53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_93ab52e0_22a6_4cbe_b868_a0a5bcb4c010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5f11e901_f42f_43d3_883d_34cb7f4ce9f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_38b59086_0c7c_47c3_8af2_395941d0e84d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8209b9e5_83a3_4a26_b31a_eddcde6c903d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_845c2314_8a5a_4602_b967_0eb3df844a97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2e4a099f_38cd_42d2_998a_f657e11516be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_476c5912_66dc_4aad_930d_a029e59e8828() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_66e5af8a_7fa9_4c79_a34d_4b07a2319fab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_63c46383_c4a3_4d23_836f_6fcd6b3b61ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b8a683b5_e72b_41b5_99d4_93f43d95668b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_594aff1f_ccaf_4de6_b340_24d579e2b144() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f5cf659d_1e97_4dc0_b1c5_8080378b5354() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c4609263_ef06_4de1_b054_8d854b8d3eb5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a5b62b48_9c31_45f7_8238_d233ee38258c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bb774f51_634f_485d_bf67_67fd7d865213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f9b4128f_623c_43e7_a54c_7436bc7c9ed0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d30b4668_4fd3_4ba9_8d3b_0cf8a96cfca8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_12a59985_80fb_4acf_b7c4_39a45040d27c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5e7ec1cf_6737_49f0_afe8_6c1d2270b060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_cd832202_b3b6_4bf3_a17b_60b06abfdc34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_893fb587_d247_4eb1_b160_e4f546a7b6b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d78e52f9_44ae_45a7_994d_15b0e9649ae5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7318e19b_6930_4c32_8fcb_e65cc418e1c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5ee02244_7a10_48e7_8462_68c66410d9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d5002e31_70a0_4c89_a0fb_e76360923f90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_00770ee1_e2a5_4d37_8f53_064568593d48() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_18a85fc3_8120_4a24_a73a_e9fdd88f245f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1e20ef2e_01d1_4164_a03a_1191929a3e30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a85c5abe_f532_4ac5_9e86_106be76e99e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_dd0957dc_e522_4e43_a81f_b3aa5d9ba682() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_eb2e12e1_c896_4a74_9752_b9eea4582464() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f418603a_7d00_4a59_bfb0_78027c4663ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_df1ac9c6_86f0_4104_9354_68a1049dd643() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a2910c15_9bc3_495e_955b_a42303cde52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_30ff2f2a_3e4e_4f5e_b3ba_35fd1f940750() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_47cae136_54d2_4361_8ac1_ab1a834e021d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cb4fdc98_8ff5_4899_8349_c6c5d6b4bd36() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f6aff357_476e_495f_9fd0_216cdbb2ff04() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e95d1062_4578_4eaa_b67f_97442ed3ffc2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_39d7810a_7ca5_4667_8928_14b45095fc82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6bef330b_f453_4e05_89ea_5959bc908fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f342a60e_bf7e_4f66_ac6b_9124048f8dee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_944d49a8_02b1_48a1_9b18_fe2cc022ed53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_be7ba40f_de0c_46d8_a157_ba733c3eb8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_26048655_72ce_41be_8b15_e4bf348433f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ab6e58ae_4bd3_42af_a269_64f4d87e3402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_adccc442_ad7d_4c64_a5b5_23bacc7577f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7502e1d2_2945_4067_9b52_446ae6db0150() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_109f4d24_e22d_4a83_931b_536903b90cd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_23b82137_1379_4052_b6dc_8c1d95128ff1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_585d3941_2f50_4e99_9798_4430b539b165() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_74d3af00_43c6_4091_9cfc_3c9d6bcb6835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_eb8e8991_8992_4225_b5b7_c06def7bec18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0956fdf9_6a1c_4977_878c_ff09e1d9164e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3309557d_8568_4c20_9deb_e46e610469f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_67dbce46_19d3_48ce_9b5b_7e3a27efdaf6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2e4b4c82_82ae_4204_92c2_4a5e0c228be1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3de2730f_1b4a_42ff_b3ef_9a43265acc49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_de98c634_292d_4e4a_a9be_9cbdb1453ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c6cf6f76_423f_4e55_b814_7658e3623cbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_170464d2_7c6f_4641_ab45_ee1e93aefd84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_75905ef1_177f_4199_bb8c_36561676f6dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b9bc2559_b562_430a_b1eb_3142e3d146be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c31c2038_a6ed_4314_b077_360f57631e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ddc440f4_7e2c_4aa1_bf8b_42b7ec59fcd6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9c361c82_823a_4bc1_b544_4f96962cd073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bedbcf85_4de4_4116_a096_1748f1d46251() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_01fd0d1f_8c05_44e3_a8e9_5fa433c10d2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9533448d_2fee_4767_86ef_8aea6b271ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b46d2bf8_ba4c_4258_ba39_025ac1e46eb1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_223517f5_1076_4f41_8f8a_9f6fd2697bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_19159faa_32b6_4d56_8d7e_7488337b85f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_021770b4_737b_4b4c_9345_16c0f969cf0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_52f77a55_6d26_4fad_9a9b_bccf78bf53aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0ef02c1d_79da_4829_87a2_44ee0dd57f75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e1f96444_b43a_4bda_b27b_de2b15402ed2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e27ae4c0_e5b1_4df7_8613_117ec091e021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8f07f72e_f367_4265_a10b_7be7e14eed6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_49f435f1_9a5d_4190_9851_969891b30736() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8125673a_5b91_46a8_9550_f388b11e697f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b1f24f98_9179_49fa_a25e_6c7c84091ca1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_11ae9eff_9488_4c4f_8ab3_ea17446c6c06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_63491030_e5fe_49a9_b796_a99808f3f060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3c56c142_0b54_4221_9a14_0ad94d455bf3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8be5dd20_2762_400d_aa63_e5e0d54529d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3c425c26_7a3a_4433_ac52_01a9dac329f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2fbb9e47_b91e_475d_9107_8dfe0e24d669() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ac01f334_489e_49bc_894a_fa25edd8ef3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8510befa_3411_4840_b134_d09162f3d1e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ba59dd74_936c_4159_b62a_55c975c0eb47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8ce477b9_5406_4a3b_a431_7a9f6f03d51e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a253b76f_2c77_4ea3_bf15_25a59f12c1aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_884e2140_a6ae_44c0_ad21_a911cc587620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e71a78d9_6746_41f7_9a76_2121770e42ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_01ef5233_485b_43a6_94f7_687626857894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_22a70d35_95a4_43ef_8255_3f4b3f5177a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e2440eae_32ee_4b3b_8139_c05c906ab00c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6ff14977_9f27_4c8d_aaab_19d7e302f4dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cdc487bb_a5e4_49f2_91f4_12467fa87b47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bb774f51_634f_485d_bf67_67fd7d865213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c23a30a8_4b9d_4cb3_b89d_9042cfa17482() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_04c7acf2_4bd4_47e3_8ea5_b0d4a089fb4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4690918e_c596_4405_80de_ef25cf0eb2b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6ff062de_82ae_4c73_b81c_45fea18db66d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_86be6dc6_65fd_4468_a60a_e3e47711a13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2da30666_56a5_433c_924b_7ff410f448b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b2d48aab_2188_4f0e_8249_1650d0e6aa5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4d592097_c7d4_4da8_b004_a26b4cca3e61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1d3345b9_e249_4f3e_a3b5_56474c6fcf6b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_daf44f99_9943_41e4_92b0_c249918a7d15() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ae9c7754_68e0_4925_bad1_b2b8d43fec1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b3d3190f_ee3c_4626_8c7a_71b57cf59270() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_3aa4a0d8_a95d_4eb8_aa03_0420de531ec6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5aa89345_cc9d_4dc2_b311_a6a8bb5d793b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_63034043_97d5_4c57_b61a_afa41faefcec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_01e25675_51fe_47fd_875d_e96271c36e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3d3df9fe_0021_43d5_b94b_4dbad3123b5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9e483280_5460_4afa_8d20_f795d40f47d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_15385204_0ee7_44a5_8a10_17989398c9fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6e55b432_1bd1_4db5_bd04_7edec8ca550c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4cdd735b_28eb_4345_903d_3595b2594046() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_a56d4207_36db_4346_8e63_d05b27745931() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e1c06184_3b1e_422d_9a45_ed7eb6dd6f86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_224206a0_eedc_48fe_a6e5_f73e419ad183() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3944016a_7e56_4f7c_9b1f_0c882c66c541() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_82cabb35_66e8_4f2b_8c1e_82d132e56735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_fff5fc4a_ea2e_4c8a_9180_da8cfb7061e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_267e8666_03bf_4c97_a841_fba23e5f3040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8fd35ce5_7933_421a_a8b3_6550e24cb7e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b304ca62_3625_4d30_8f2b_0934c8ec6007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8b87fe58_f430_4a0c_b1cd_de5c19751dd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_17e3161e_e269_41c8_a881_e19c78a26c63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f39b036f_cab2_4952_ad23_41a045e84eb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_74dcd886_20a4_4550_8ad4_e26ac5a58a13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f6fcbf94_7967_4e0b_a3eb_01c7569376cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c556e7ea_c1ee_4392_8f56_d224ce7f1246() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7931051c_bbf0_437e_8703_b16041fb6779() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cc9840bb_aacd_4d43_954b_5f540cffc07e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_19673009_e08d_4c48_8d17_85077959f944() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c91d9122_da65_4f03_8762_57102f4416e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e98c7290_42ea_465e_85f5_f32168a0e98e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_32b99fef_645f_4f06_99d1_7aa29db8878e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a3d5d177_d480_4fb7_a9d9_450e612a225f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3ae4a2a1_764b_4631_9df5_67e7126bea6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_331250db_e6f8_41e3_a1b6_5b0b82b31041() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_30b97351_0551_44cf_978a_76520fdeb8cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_eb4d0fde_56be_4727_81f4_efc642596141() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_dba89110_4c34_43ef_be35_1eafbb821cf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ae93c031_4bc1_42ad_9b77_5e034b08fd66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1083d0b4_5891_47a5_84d5_5e47bbccf1a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e60e531a_8a5c_419b_af72_009a5df4ce25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e47b7f3d_d9c0_4c7f_b196_8da79b59c672() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7647c534_b93e_4316_98db_fd4e1f4cdc5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7fd1879f_4a3a_402c_b6f6_f93cd5714439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3698a8f3_9a74_4b0b_995b_2d37859a6b8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8d643ba7_381c_4e1c_8bc5_ab3c9739953c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b4a7563d_dcaa_4eb0_b88f_a806a24550cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_67324c69_fefb_4852_96ec_87f2fafb1767() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_36e90961_0428_40c6_98a4_133c09896639() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4859f171_7ea1_43f2_83f6_74fd5a24eac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4dd952ee_ba10_4cfe_82dc_320df8758a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_902ff0c7_8c3c_49fe_92d2_cf026e8d6c58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6c6cb5b7_4907_4516_92ad_7b29768c1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ffb6fda3_2d5a_46b8_9838_3c544f92ef9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_44dfa3b4_1000_4150_885d_eb825f5a0047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4e6862bf_b055_49a9_b0c2_af050a47df9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3ee170eb_1b3d_4115_83d4_49b504e91229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cc9840bb_aacd_4d43_954b_5f540cffc07e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d8bc92a3_48e3_43a6_8813_89cc9142c4b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3d1f994c_d4b3_4aa0_b4b6_3150cec63c05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7475da91_311a_4edd_b72b_c13836bcf6d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4d0df127_5ce9_4266_9462_01f809836673() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_da73e1a6_8572_4407_b5a5_ac7428743fbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_989ee809_e511_404b_b009_e005e2af9248() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_df968c45_8ec5_4db6_8e54_8011f3e72b2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_135cf8e3_3710_47a1_982e_98f4205d55e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2e4b4c82_82ae_4204_92c2_4a5e0c228be1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_ff454c50_8cf1_40f6_9ca8_543c0d294a9e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2f4c8238_cefd_4d65_b5a1_5b32aaa090a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_64f5f449_f73f_4afc_a4dc_ae9b146302df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f8dab4a4_4413_4629_b71c_3c17f03e127d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_dc1ffd2d_9073_4e07_8b58_fd9021a3b42e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_54432884_1fbb_4dc7_9098_156fe308cb89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_63491030_e5fe_49a9_b796_a99808f3f060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1e265d24_8438_44b5_b99f_247c45b488f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_94dfb269_b10a_4cde_b59d_30ccaa9c96d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bb58dc4a_3ea9_4bb7_82be_6d42ceded1fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6d834741_efb9_4d5c_adf5_f1b35907d7ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d273a64e_0e83_41c2_98d0_dfdc2ad8bab8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6eebc876_8b2d_48ae_aba0_758361a409e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b26e001e_3f06_40ca_ad6d_3f99d5d06f12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_a57061f7_50ee_4e3f_aded_fb67c8a39d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_25c21292_520c_4dbc_875d_6c2d4848059b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a1aa45a6_90b9_4513_8e4f_c8af874af8e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2f4c8238_cefd_4d65_b5a1_5b32aaa090a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bad24fb8_8769_4537_b52d_fe680bef5384() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_dd0957dc_e522_4e43_a81f_b3aa5d9ba682() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_48e56d99_2ec1_43da_9e88_ea4d483c7826() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b2803c23_3132_4a82_a11b_eecaac907e12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_731aaaa0_aa7e_4355_9070_9b935d911066() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3095b166_605f_4054_9c4a_242ae8b9140e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c75d976e_5def_435c_8e3f_264853f81a3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0e134aeb_8605_442e_a9ce_bf043a43c81b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_29ae5c3a_1d03_47e4_a6a7_058b215903b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_25835e55_3c19_4b34_bf9a_f4007eb48f00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5959b4a9_aecc_41dd_94e2_ac57b3fabf32() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8fae3310_3c77_42bd_9e99_ebaa396a1621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_adf347f4_c3e7_48d9_b104_7bf6d8446f53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0ed4e724_3af5_4fc9_b65c_5d7fb5d0ce01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_34fa767a_dc6e_4d9a_bbd8_a5f62b27b3c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8db69925_0565_48ad_8b01_2d0d610f4a72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2326342f_d981_4249_8917_81c6971c40e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c37adbe0_87ab_4f00_aeaf_e17aaa9662ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6eebc876_8b2d_48ae_aba0_758361a409e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9cc92481_af05_4cbe_9a43_1486dcbc880d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1c558239_86db_44e1_9755_8121b9385755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_dda4348e_a2ae_4938_abfd_05e21beae926() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_585d3941_2f50_4e99_9798_4430b539b165() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1503155d_ac46_4240_a605_9f935c4d4949() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_83e55aae_48a2_4960_a1fe_3f31ef6ce15c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0a818c23_a0e1_48d1_a8a2_ff467c2fae95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_31646a5e_4f64_4620_a22b_abe2278b73af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d224ba2e_e119_4dc7_a61f_6b4010c8c2f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c68aaf08_12c5_4f24_99da_26c69e2e2c8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a835c470_21d9_46f0_8e87_38c1fc9abe1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_04677b08_4fb2_45b4_8f8d_e4ceab8b7b58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_12e8c994_1cf7_471f_9297_eff2af5f9547() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_df57a0cf_d4a5_4091_94bb_fe0633be8d6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a71540fc_8aee_45c6_b28c_d7200ba0726e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e33b6eb5_f3bd_4cf3_90cd_90ee5f59c96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_42653d31_cad8_4f4f_8967_8df6222ceff5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_99cddae5_d688_4272_bd5f_b84f2fa15b10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_72911099_ae99_45ee_8716_1e801031ebd7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2bdab585_2cee_459c_a708_e4d872b5bd91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2e685dfa_8307_4f56_b5a2_0d2fb46f654f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9f79a323_0d5f_4d70_9907_f6b8b8f0e588() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5fd57764_dec7_43bc_902a_5b5896f033e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_77bad787_453a_4ba3_bcda_75156c64be4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_efaa1305_3e74_4610_ac5b_f81526d90db2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c25072f3_7250_4577_94a1_89aef61fe8df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e99d933e_dbfc_4186_a5fb_d01a48bbfd13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ba21a753_2eb6_40ee_a7a1_3f4d9b3b0680() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_292627bf_09aa_4fa0_98f0_89c127b4d642() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_acdbbf25_0f40_444c_b8c9_e695392d82f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9af9967c_93ee_4283_965e_b140d0d2556c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ee275eae_8c09_47f0_8b88_f147e8c07f6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_34847a04_0930_433c_920f_ea3fb0d71599() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_7b7f1feb_6142_40ca_9c4d_348de7690eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0a627390_6365_4467_8626_500f1874ad03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e9ff98b8_ec05_4350_86a9_fa13aa65f5d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0c8a7c68_4ec4_40d1_9dc9_972749087685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_eb08a6ad_d83e_4cd0_b979_8c9b43409f47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_24b01630_8ee1_4ac3_85d0_0ac201c45025() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8fbf3b60_c8fe_49c1_80b7_5562f73c7438() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b1f7ae12_5bdb_4971_9d55_7d357fcc2e35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5ee0a6fe_7335_42bb_bd26_9f98a579b9f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e7d6d9fa_5eaf_45eb_a932_a9f39e3f949b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b1afa205_4c47_4eb3_a540_f0d2589e90ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_25c21292_520c_4dbc_875d_6c2d4848059b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6d35df7f_83df_4c4c_b7f5_e897ccfe048d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c993c20b_c8fe_423b_94e3_a11f5deadc16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0624f6e9_39dc_496f_9173_a0754fcc9bcc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_493eaa96_38e5_4f01_b8ef_047f076e1dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_043eb383_4413_4c7d_86af_cb3e2fca439f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ddc96844_2d1e_43df_987c_b4fb910a47c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_3580c761_a578_4001_bcfb_44c56e104cbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_77e8c0f4_b3cb_4948_b366_fe0755a687dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c4234177_ddea_44ca_8de7_63ddd7eaba9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_14992d0a_121d_4ee7_aac6_99248c2af879() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_18a85fc3_8120_4a24_a73a_e9fdd88f245f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_19159faa_32b6_4d56_8d7e_7488337b85f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e885c4c4_86da_413b_891c_c06834c988a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6644ea3a_59f8_46d6_9bd9_6e1c71426910() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bfb1e452_9fc2_4bf5_b022_056ae3282bae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cd4873ca_8f3f_42ae_b629_998788034f6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d1493453_c52e_432e_b7f7_eb295cf9423c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a2bd35eb_e1cb_4123_8e59_3031e1313171() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_db3f6134_4f1b_40c3_b41b_9e01f756f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_180d2dd0_f405_442e_967f_a91c3a14973e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8aa7fa3f_83cd_4d89_bfe7_bfdcedc77428() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b7daf45b_923a_4877_a331_19f23495c9a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5696a735_18a9_43cb_98cb_6f022e3786a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6cd7fbf7_36bc_4595_9585_096498db3c8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c74d4c71_ed19_40f7_be34_fdcccd5b420f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5f2ae41c_19ee_4d55_b31f_3bcfb0f51489() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e0b8ab0e_88b3_48c0_ade1_e54af831c5cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6fe31620_b3c7_4fb6_93ae_18f3f08e07b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f011d5fb_aa07_48b0_9cd1_af0ecca41dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7fd45f81_1269_4b98_b332_d7c5271dbc0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bc4ab49b_0601_4e21_a880_22c0a3e50ce5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a835c470_21d9_46f0_8e87_38c1fc9abe1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_da839160_a716_438e_98b9_74087f427bed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5e94f1cc_3078_4df9_b41c_4bb789fe1dff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bbe8cdb4_d38b_45d6_aef8_f3f9f0dd1682() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_62ce21d5_1a84_42a1_a284_c08dbd5bf52d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1cc7bb49_960a_4b1f_9a06_e5e520d360e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d8e61d3e_435f_4f57_8ef5_749920cb68b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_8853697c_2baf_4864_9fdd_1241bf33f9d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_72da67b9_087a_4858_9b2d_50c5d879dfa1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e3a6cf9a_730a_4d0e_8711_01110907dcc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_bf110fd2_b7c9_402d_bdaa_c8fb9bb22110() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1dde8c22_9c23_4895_99e2_a0534e2bde3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_135cf8e3_3710_47a1_982e_98f4205d55e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_98b824f3_c9dc_418f_87da_369ec771253f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fb7eb574_281c_4e4e_965d_72a89b0a9306() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_df1ac9c6_86f0_4104_9354_68a1049dd643() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2f294516_9ca3_465f_aab7_e84f3e11c503() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7bf88e82_3e70_48f3_85fe_4eef35eb7c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_a020ab23_5ce4_4e69_90e6_8a01fffe57c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0eb6165f_3f9e_4c5f_9a22_b6504446f5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b9fa3c39_7a59_49b5_8b5c_bef3affacb92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4295d8a2_a0a3_4d94_9c3b_d683fc28bc06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f2616ad1_81fc_4f13_afdf_817c416647bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_679e86e7_cdad_4ea7_960d_bc14440f3a2e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d4d85f3f_93d9_4b81_9ffc_70f4637b31ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7a093284_0578_4958_9ef3_27ee0650dea4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_db3f6134_4f1b_40c3_b41b_9e01f756f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_312977d7_73af_441e_bd3a_c5b9c03b2995() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_20a1001d_277b_4670_b15c_d4a370bb63f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_95a01bd5_ecbe_41a6_bd5b_6714dd84edc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_aa3a7bb0_0032_4913_b9db_88421ec90d97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b260f73f_feb4_4d60_aa6b_6df266b5b0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_cfb99399_033c_460c_bdba_ee419269a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_60950d2d_9a48_4725_bd69_42559df4170f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6b6b1cb4_ccc6_4034_b6cb_166fac56dde5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f84c022b_67de_49cd_9f6c_01bd5749895d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6703009e_7a8a_49d2_88cc_7116394c5d17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_88350769_108f_46a3_abc8_dbc742ddc1ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_324f53d1_14c1_421e_bd3e_2c18f06209ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c9ea1ee3_2fbc_4213_96df_2fd046dee2ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_135cf8e3_3710_47a1_982e_98f4205d55e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4f291299_10ae_4226_a0a9_79aa6f55427d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4c090651_3256_46ef_a9e7_db98dc0c2fcf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0a627390_6365_4467_8626_500f1874ad03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5157b0e7_5c37_466a_8427_328d3046b9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_57bd2904_9fbf_4ca3_afd3_62c6d53caa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_408775cd_ec84_4fdd_bb73_bf3479985454() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_29208566_8a35_4d31_85c8_579105008ec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_524a7012_bb1b_4258_8931_67467b82a253() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_bfa9ae79_b3a2_470e_84cd_7e5a4c32fc94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_65c65ee3_fb68_4e84_a28e_8789ff13e3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_03d7373d_f7db_45e8_bdff_aba6423a7d05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_913b48e9_55ba_4b44_86e6_d41caf8cf0f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_341e3dbe_08cf_4eba_a4dd_0ef3f9c50959() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bfd55b99_f54a_442f_99ed_b97875dcaf7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f3fa43d3_3421_4156_a9d5_61cfe3ca7f82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3d1f994c_d4b3_4aa0_b4b6_3150cec63c05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a5bf4aa5_654d_4ba3_b263_ef14423a5685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ffb6fda3_2d5a_46b8_9838_3c544f92ef9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d78e52f9_44ae_45a7_994d_15b0e9649ae5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_fff5fc4a_ea2e_4c8a_9180_da8cfb7061e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c126f5c7_efcc_4997_971f_d58e4eaa438d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3a1ac45d_c83b_48e9_b74f_f627f79fac03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a690cd64_1da9_4938_944e_5a0db5566ef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_129ede65_dd3e_4b25_b189_2c95279ce610() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f7e62e76_756f_41e2_933a_ae84ab01d925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a0eafbc1_7c87_4153_bfa1_5217c88b5546() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ba997a85_964e_4fd8_a8c5_7a81e85f63b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bdaecf8f_4ee6_41b0_9efb_ce684fce5fff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5249e79b_44fc_4cdf_8a2b_7266b9cd2b5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e694a6d2_6ba7_4408_9e91_05ce3345169c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9f79a323_0d5f_4d70_9907_f6b8b8f0e588() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6f01ea83_3b6a_4716_be62_0340b4d71baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2a17ae40_b5d8_453d_8c41_11f92d89db3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_add2fe1e_8170_44ee_a299_c7889fff0c4f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bf56ed06_3dd0_4dfe_80d8_33bd5b397ab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_811209e7_7587_44e4_983a_6b833511fd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_203274bb_247f_4451_b6f7_1a71272cb6bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_eba31641_f2a9_4fb3_b226_e858090fc23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_15aba3b8_faf7_4d1d_9490_b70b291af662() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bccc0175_c942_4b78_997c_62b1cd4a0dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_17c7d914_2f0d_46da_97e3_34de2bae69a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b7fdee48_75e4_48b3_9edd_a20c9d7c1196() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e4e30e93_58be_48f2_8cbd_56e20d4d6d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_cfb99399_033c_460c_bdba_ee419269a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_04f52b54_c600_4a0b_9e27_2ac4f08e7378() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a5274842_877a_43c5_9e8b_9fd42f72bd4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_00cd38b2_1287_4399_b525_a6af4e962fda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e01177a7_5449_4f01_99ad_4331d8d18c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6d61ca5c_49af_420a_842b_f69cbe6d5351() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_20913b8f_584b_475a_ade3_4912547d1bc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f462266d_f2e7_4644_83c7_ed8c5d0c3fac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_04677b08_4fb2_45b4_8f8d_e4ceab8b7b58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c35e63ed_59df_4610_9e6b_cf3c80dbc704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4c090651_3256_46ef_a9e7_db98dc0c2fcf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e2c8c77a_c36a_4c47_a999_f8e739d42e58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_369894d0_172d_4f2f_970d_964e34bae181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5e307478_a7df_4414_b169_6c0c62dda5f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bd73a1d1_34eb_40d0_aadb_21caf1e222d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_2160d417_0be3_419b_975a_65b7832bf5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_93ab52e0_22a6_4cbe_b868_a0a5bcb4c010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_feaeea1f_a580_42d4_a50b_b2abcc90615e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_33895557_3680_4c91_95ca_7cfe4accf8fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c4b517fc_a496_41cb_b425_a49f07235a41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_fac00f35_8dc7_4ea8_bc00_916d4f0b32ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8fd6496e_d983_41e8_86df_469abc9b15c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_52a2a986_b76e_4783_9785_29d56cb7c452() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b498d9b3_985e_4d9d_b29b_9c3045dc11ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e885c4c4_86da_413b_891c_c06834c988a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_add2fe1e_8170_44ee_a299_c7889fff0c4f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_007207d0_da65_4df0_b3f9_b90ed930723b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_77c62676_b562_4077_9f31_2869628a4e6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e87da859_b909_49eb_977c_ab78f603d86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_fba49c7e_065b_4cea_9bfc_f93722e786d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2267bd43_5b1b_4e37_9989_818e70f0f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e4e30e93_58be_48f2_8cbd_56e20d4d6d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0186b02e_1193_4c85_910b_c020cb41367f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c9f64a04_4e7c_4351_8fe8_74eb29fc6372() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_04c7acf2_4bd4_47e3_8ea5_b0d4a089fb4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5a737877_dc8c_446a_b475_19eeae5e1e55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8d0eb2fb_4fea_4bd7_a6a5_c195728d9e1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c5e1e3e3_bb71_442b_97e1_dafdc4f88c1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0936ec4e_f0e8_474b_be48_d3a6bae7e8eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_61a460aa_4cb5_420e_a103_daa836b5171a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_be7ba40f_de0c_46d8_a157_ba733c3eb8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_53d5b3b7_2015_4ad3_b5ef_1d9e2f003905() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3dbccc5e_5041_4443_b6f4_b4a487a8dd73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_037ca5d3_7abb_4323_9d99_89ec73e5d229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7f2c7355_252f_4ae7_a27b_c453357e2ae4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7252ce4e_6fae_4894_8acf_8ceac7dd73f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f1d2af93_6d70_4330_905a_ed536e36743d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ba21a753_2eb6_40ee_a7a1_3f4d9b3b0680() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_308fad1b_0112_4514_9871_545732d0e5d0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_29ae5c3a_1d03_47e4_a6a7_058b215903b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_cc9840bb_aacd_4d43_954b_5f540cffc07e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_08f041d9_5483_4302_a80a_e3854c1c4626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5fe2d2bb_cc9f_4824_b0fc_9858d50e8e0e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_72911099_ae99_45ee_8716_1e801031ebd7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_99a3dd4c_6f79_4e06_93a6_72cd24f81893() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_77c62676_b562_4077_9f31_2869628a4e6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_abadeee0_762d_46d9_97cd_13a55432c0da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_82d80b69_074b_4d74_a180_aa3ac9a22f5a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_74ef5886_3db2_4cda_87e3_c397828d6613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_dc0b4f95_5ec2_4c8e_a94e_348f9b206903() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_de5f33a1_e34f_4da5_9a55_ee37f35b086d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8e2a441a_9bb0_4bae_abdf_c1dfaadf10b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4a4cc083_afd5_4ced_b60c_9974ed467ba1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_45684653_c8df_4591_8ec5_df8190d76175() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_891dd467_e561_47f3_a362_bfd8533fa19e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_891dd467_e561_47f3_a362_bfd8533fa19e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_20913b8f_584b_475a_ade3_4912547d1bc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_73b6983c_2543_402f_8bb8_23d927a2b607() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d4600a47_e600_4992_ba49_e27860e10083() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e3ff4543_1ef8_4502_8f34_3253c7b467c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_72d29a71_3e8a_4c9d_91bd_a4d9d50e632a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0ab61eda_f597_4958_8a73_f544372185a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6f01ea83_3b6a_4716_be62_0340b4d71baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e2c98959_eeb5_4f8c_8ccb_ff214b0120b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_eb08a6ad_d83e_4cd0_b979_8c9b43409f47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_290ee94d_4596_48f9_bc3e_222d6724d6dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_80f245bd_538e_4a11_aa4f_c6dff001da8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0a726183_d170_4a2d_a10d_0b06f2ce4053() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d5fc8054_b07e_4aee_ac45_610361a77c52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7b15e7ae_3964_438b_84ca_1cd606670ae0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_9621e535_45be_44bc_baa0_5566b7f86341() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_38555b9e_8797_45b3_b3fd_87d89bec4da1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9f55e98b_5266_445c_a075_24f23b4c3003() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2201305e_54ac_4882_b4c9_6738b74739e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_109f4d24_e22d_4a83_931b_536903b90cd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_43698697_0a05_4e0d_bcfb_cc6457f02f62() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_38e44b78_d107_46bd_9816_f74240dbbe55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_808e10b2_ee72_4970_af6d_4d9a08bc7cc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1e71e19d_a256_47c3_b974_ee3ac3567a5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5543f808_fa97_4070_8e01_789de3dc4e0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e98c7290_42ea_465e_85f5_f32168a0e98e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_78bc5979_601e_44e0_974a_8952a5666073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1fcd229d_a37d_4f6a_b02f_fd276ae780c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_71a0bbe1_b094_49eb_9640_6f2d6e2885c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_d83709bd_613e_46fa_b0f9_2294263105fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_a807cdfc_7618_4724_bf38_3a7799957127() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_129ede65_dd3e_4b25_b189_2c95279ce610() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_eee25c9e_e2ac_487b_86d8_e1a0e578224b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bb0ad54a_4522_45aa_a199_a3054e149119() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6c5faae5_83a5_4cd4_a8d1_518abaa7ebf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_afecc466_176f_4604_bc47_957303a40ac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8853697c_2baf_4864_9fdd_1241bf33f9d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_34fa767a_dc6e_4d9a_bbd8_a5f62b27b3c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_38e44b78_d107_46bd_9816_f74240dbbe55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_87d3330b_a138_4bd0_af92_8169d36c1e27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1e71e19d_a256_47c3_b974_ee3ac3567a5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e1d0cf0f_0f16_4244_a47b_bad0df347eb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f45092d9_cf90_4996_b38d_069a7ed8534e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8f07f72e_f367_4265_a10b_7be7e14eed6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bc4ab49b_0601_4e21_a880_22c0a3e50ce5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ff2367de_102f_406d_a914_389db5fd9535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f4ffc246_ad3c_417c_8e25_d89da5eed9b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b7daf45b_923a_4877_a331_19f23495c9a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_491b3d0c_2fb4_47bd_8ba3_1136df96358a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c57d4bde_8ff5_4158_921b_352f5edd5598() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_d7446950_3285_474d_a270_978789408412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f7474e93_2c43_4add_b301_cef140010b40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_48628e34_531f_483e_b5ed_385f5217b923() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a85c5abe_f532_4ac5_9e86_106be76e99e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f72a210d_3b4d_42c4_ac28_08482df780d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_2f20bdf3_1752_444a_8b48_86396c4813ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b173982c_f486_47d2_b1db_a0dc36e0f55f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_20913b8f_584b_475a_ade3_4912547d1bc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f6958a5d_e8d4_4a34_be99_bc2f34789ffe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_26f33b0f_0228_4338_999a_5195e138199a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f7240e90_e5d0_4d87_b2c8_af39b6905312() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_30ff2f2a_3e4e_4f5e_b3ba_35fd1f940750() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_caaf0ce7_3934_4e1f_96d9_0f5f8ead05ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a73b42f5_1f0e_4cb6_98fc_fd0115d6743c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a6d1b07c_7cf7_494a_84ad_a82ebae78e4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0dc8277e_e4ae_41cb_96e5_4ee26d70ceba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9ac84fde_82a8_4c89_9faa_ee1f55d5a2da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_be427e26_a24e_4d0e_a651_bbbdcdcef432() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f5cf659d_1e97_4dc0_b1c5_8080378b5354() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_96ebb77a_9925_42a6_a38f_3889cb958042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ffb6fda3_2d5a_46b8_9838_3c544f92ef9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_74dcd886_20a4_4550_8ad4_e26ac5a58a13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f26d649c_4083_4346_8537_34c54606d352() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c74f959a_87d0_469a_baba_1e29c364d2ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8de24d28_716f_4f9b_9138_c07ac4ca2947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_67e3fe88_de03_4471_b83f_f69ea22d2496() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_63f0e6c7_5b08_43ad_ba94_0fde4b80cf85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e01f5a1f_4bca_4ea9_adbb_5eadf8991b0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e42accfa_eb9c_4b4e_8cbf_9c1d18cc8ff0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d6ca4d25_5e54_43a9_9437_79d63275f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6ae33b21_b4e9_4c03_88d6_35d7cc8bde26() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_751fcce6_d6c8_4838_9740_908b59b0c0e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_90b42e37_26d5_45ac_9b7b_d83727a37091() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b31b858a_5685_4517_8a10_db5e4f8dde47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_0334db5e_68c7_45f4_833f_915b32c5a2cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4c659fb7_13f5_4e50_9734_c92ae5c3c737() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_92d29a86_3a6a_4e21_8d16_b5ba56e1e810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a51738e8_8ff7_4126_b187_4f54855e3d07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f94c5c55_d78b_4fd3_be0d_ecc56f15beea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_fc6cb7c7_89ee_4030_8d14_b28e0959d89c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_47d3d8e4_edd8_48eb_b966_f7d9e3cc6c3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1dde8c22_9c23_4895_99e2_a0534e2bde3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f0026b5b_9739_4c14_9a9c_c53b21826de4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f2616ad1_81fc_4f13_afdf_817c416647bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b68c1ef8_3077_4153_b353_55c17488cfad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e5fec7d7_46df_4575_a8e6_ce6e714d88ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d355950b_d9be_4216_bed6_47f5099b7af5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bcc26970_59bd_4ef3_95d0_9d90c5e76956() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f2e2bb16_4a99_431a_9d9f_684c9006a3ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_3f459302_0b9e_4c6b_83d6_b5bd0a17ff90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4e0d9afd_8d66_44ea_85b5_f94b65b936ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8adefca8_7981_4b19_8ddf_d7fb06fc31b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e19cb88e_32d9_4618_89db_5585efc56498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_bcc26970_59bd_4ef3_95d0_9d90c5e76956() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_809af517_ac01_4279_aa38_a5e585bf05ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6fd099b1_7fe3_44aa_9a6d_865ed72d2237() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a0eafbc1_7c87_4153_bfa1_5217c88b5546() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9a0e23ea_85c8_4de4_bef1_c7102c099819() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_aa28fef2_92be_4ac0_a201_e95fc218a19b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_31fff2a5_e84e_47e6_afb7_6a35a66992e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0fddb5c9_edd7_43fd_8e75_ade95fac77c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8adefca8_7981_4b19_8ddf_d7fb06fc31b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f94c1f45_5230_47fb_a05c_2166257d2147() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_84482b97_4d0e_4389_801a_8a8e499f9727() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_36e90961_0428_40c6_98a4_133c09896639() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4ec961e0_cc20_4405_8045_6e44d80b007c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_056214c9_5734_48fa_a170_524e37000e85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6f697b70_670d_40e7_9468_5c1c453ea22f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c7e9d0c2_c013_426c_9646_c690a60e4a70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_de5f33a1_e34f_4da5_9a55_ee37f35b086d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_86be6dc6_65fd_4468_a60a_e3e47711a13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5c41eae0_e34a_472c_9d99_0c550eb25690() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_64f5f449_f73f_4afc_a4dc_ae9b146302df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_feb814e5_d0c5_4776_a9cc_22ff0a67d46d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7cd6f875_20f4_41c2_bbd4_068ec0160c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7af20def_9342_4aac_b6d7_b2f7db1a1884() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_07994110_eab1_4ff5_9cc6_2f3e285e46c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ab38e9f2_16f1_4ae2_ace1_4bd50a35ca02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_199bfcdf_b38f_46ca_a1b0_df0831511058() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8956b178_bf58_4406_a81e_e80c907655dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f3850f03_165e_4d66_8a95_419b3033d801() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_0ad501e3_8fc8_47c6_8112_2959fdfb28e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_46318ffc_e207_4052_8175_4accf7d38b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_94e61289_5c99_40b4_8e86_bce683d238ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_df391b51_f84c_48ab_939e_a2a42517d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_aa3a7bb0_0032_4913_b9db_88421ec90d97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4b36cfce_2bf0_46a9_9e42_ded60584e193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2f20bdf3_1752_444a_8b48_86396c4813ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2256e16d_a772_41ae_bb67_62c60530d634() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d5383aea_5b3c_4a33_a7ec_8780a59ebddb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d638c72b_1e03_4cf8_ba16_956ae7cade9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a7de2efd_f9cf_4d51_a818_89fb23085a02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_66587cfd_e1dc_497a_9e81_0f71d4e1771c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_aeb59689_b707_4be6_919c_92312e29b0fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f7c05bc7_7fa0_4459_9953_95be409debaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2b12da1c_6c29_439d_b2eb_8c73fcdb509a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_80b75226_e260_4658_8f10_245237a4ad1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_6b74499e_5f15_4683_8269_0c0970dae96f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_66e54364_3047_4d32_a8f8_6482c24c834d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_20a1001d_277b_4670_b15c_d4a370bb63f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0182cbf2_e5f2_411a_a5f6_380563812e69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d0edd4a8_1e80_4fde_9b4b_d889a1bff04c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1d57b98c_249d_4d04_bcd1_3f4cddd13527() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_db4bc96d_a230_4bf7_8dbe_19ab09c13579() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6aa6d66d_1d99_461d_b61b_2f00d7bb25f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3f237a26_bd57_4ca5_b2ee_e8bb6642cb2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0d4da408_3cd2_448f_9bce_1db7ace344da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_594aff1f_ccaf_4de6_b340_24d579e2b144() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_eee25c9e_e2ac_487b_86d8_e1a0e578224b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0334db5e_68c7_45f4_833f_915b32c5a2cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_05b266fc_d660_4273_8c10_bb351c677df7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f1fb57c2_bf89_4651_8957_a0100a5f746a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ca388a8e_5846_462c_bbf9_566b48f6978b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_17157a1b_a13f_41c9_aa6b_965c05137bd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_aec2d1d5_c090_41f3_9369_dce8eea327a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_acf2bc4c_cc90_400a_ae3e_c5dafaf03b68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bad24fb8_8769_4537_b52d_fe680bef5384() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e45fbff7_a0d4_46cf_b12f_fdbd8394cdca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0b317de1_f95e_4939_a545_34fe457e6814() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_86be6dc6_65fd_4468_a60a_e3e47711a13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a5d8fef2_8fc9_4431_a0ed_ae9b98d796d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e170d5e9_2af8_436e_b53b_8e7d23040ada() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c13690f1_c8d8_41f7_a7fc_04ed74a088ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_783ccf5c_b82a_4cea_832a_615ce2452094() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_705da8d9_fe0a_4ab3_ac70_4ca8b5b7dbab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3d1e0f67_e0ab_434f_94d4_b05285ed6340() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7ae560bf_409f_4d40_b570_544b2fcccab5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e1e8cdeb_3d02_48a8_8da8_470ef9f1c571() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_35249559_9326_4c96_bd1a_8a1c9f7308e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c7e9d0c2_c013_426c_9646_c690a60e4a70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_26048655_72ce_41be_8b15_e4bf348433f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f39b036f_cab2_4952_ad23_41a045e84eb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_df1ac9c6_86f0_4104_9354_68a1049dd643() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_78ef4f19_90ae_4f06_b94a_093eb38b74d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_df5b9228_2696_4e83_a8d6_4ac73fd9f293() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ca388a8e_5846_462c_bbf9_566b48f6978b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0efa0968_79a4_4a4f_a0a0_3d7aa2d589fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e28074bd_1d9f_4219_95e2_64c0b6d16b5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ae8d7ceb_394e_4552_a3b8_894ca5c42846() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bcfda23e_5ad3_4c58_9354_cf4d72843225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_67e3fe88_de03_4471_b83f_f69ea22d2496() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cec70e86_8d2a_4ca3_8317_68bfbb56894c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ed2b3511_5803_472d_9001_33c01a509ca4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_783ccf5c_b82a_4cea_832a_615ce2452094() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_3dbccc5e_5041_4443_b6f4_b4a487a8dd73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_31fff2a5_e84e_47e6_afb7_6a35a66992e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_20a1001d_277b_4670_b15c_d4a370bb63f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_53d71208_f00c_4142_aeb8_38afa4891b93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_efaa1305_3e74_4610_ac5b_f81526d90db2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c76c47af_861c_4278_b69d_7d9b81bcd957() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e4a779bb_53b0_4792_94c7_dabea65d6c7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7a093284_0578_4958_9ef3_27ee0650dea4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9c218489_d418_4473_b2c5_73e2fad8abb8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a7d399a6_a15c_494b_95f6_d0856aef5c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2d45d5bc_274d_4a44_a0b8_d2d6064f1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_90cf6754_6402_4df4_8280_1a5945e38e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5ca675bc_dfe4_4eaf_b849_21d959b7e353() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_959d107a_14b8_479a_bb13_ee21daa7f74b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6d33978c_32d9_4732_bceb_19935664b243() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_03d7373d_f7db_45e8_bdff_aba6423a7d05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e42accfa_eb9c_4b4e_8cbf_9c1d18cc8ff0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_72da67b9_087a_4858_9b2d_50c5d879dfa1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2326342f_d981_4249_8917_81c6971c40e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0b317de1_f95e_4939_a545_34fe457e6814() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_481b1d47_bb73_4cd0_9dbf_39472bfc08a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_315c8bf0_9613_4733_8be6_15041013c286() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9f1c5893_d8c5_4daf_9d6c_b4b96f56d998() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_476cbb75_d885_4e10_96aa_973202f7685d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2832bdb7_d979_4ad0_a753_dbbb06825b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a73b42f5_1f0e_4cb6_98fc_fd0115d6743c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bfcff9f0_0d21_4402_af88_fa4ea3f9a78b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_3d363009_0e39_496c_a531_33f1621d3c2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_71a7034f_ad7c_48a4_8c19_efd469d07dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b3d3190f_ee3c_4626_8c7a_71b57cf59270() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_49af8968_b9ec_4990_9bb6_235514e7a633() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_199bfcdf_b38f_46ca_a1b0_df0831511058() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4087f2dd_63cf_4c1b_a969_7ae4c8aa7e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fa990ef3_fc79_4af2_bb2c_4e0d1dedab8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_1941b723_c509_4bda_8c44_7792c5e80745() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_daf44f99_9943_41e4_92b0_c249918a7d15() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5a61ad07_1bd6_4994_b10e_bf7bf617de8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_467d1497_ef09_4cf8_9d4a_2e42ee656624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_25715498_f196_40b6_a331_539cf9ca216c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_77911dd4_98d6_4508_b6d5_4d4928cff68a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ff72de95_9fd1_4e28_8090_e5ec991916a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ac01f334_489e_49bc_894a_fa25edd8ef3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ea18208d_c1b5_4aed_9674_12f9e5cd9f97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1f3f023c_03a6_489c_b07b_3fcf7f0618b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2b664586_8576_40ae_9da8_594ce69716f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_00cd38b2_1287_4399_b525_a6af4e962fda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_dc1ffd2d_9073_4e07_8b58_fd9021a3b42e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3dbccc5e_5041_4443_b6f4_b4a487a8dd73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_af6bc2a4_7926_4038_921c_2144bce04a79() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d9ac7716_18dc_48bb_9a70_e9725a6eb996() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f3fa43d3_3421_4156_a9d5_61cfe3ca7f82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_23cabc4e_563f_44c9_89a4_b3221fdb6e1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ea28a4cd_f4bd_4487_9a69_e38a819e6e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f68925d3_3ef0_41aa_99c9_0e8d528e304b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b049245f_4edc_428d_bc4f_04b023368bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_776f4498_57d5_4a8e_9db1_0add0ec8cfc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0b020b7e_e275_4d20_b6d8_9125997ef2a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_568a7e62_1f76_4094_ae91_53516189679f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_79c0e0b7_f49f_4a85_8d5c_cb2cfc183c55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b7daf45b_923a_4877_a331_19f23495c9a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_daf44f99_9943_41e4_92b0_c249918a7d15() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e0f38c4b_1e4c_4e0b_a062_729f36235388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_54fe99eb_2403_4857_87ca_633fad6f907e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_768ccb95_8e63_4503_b460_80bf946339d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_caee20d3_dd72_40c5_9116_07af8c8c30e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6d3ae927_3c41_427e_bc4a_7b85ef2e4e28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_906fe9dd_b933_46f4_8427_fcf0c3c5f755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_68620d02_503c_4145_a3b0_dcc0fc8fb911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a8b27cb4_913d_4550_9fc2_dabfb1794d49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ed793831_560c_47ff_8b5c_d644581d76e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e694a6d2_6ba7_4408_9e91_05ce3345169c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_31dab31d_86a6_4ab6_8be3_3906d04eac1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5a753daa_53ae_45a2_8c49_ea68e7c541b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cd4873ca_8f3f_42ae_b629_998788034f6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ade2dcbb_50dd_47b4_9a10_ae4fe9f9f475() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c12c4499_f0fc_456e_93f0_fe00243b5e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b2803c23_3132_4a82_a11b_eecaac907e12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f8625fff_7419_4fc6_940b_fe463cc08b05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d30b4668_4fd3_4ba9_8d3b_0cf8a96cfca8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f2ec5dee_cfd4_4e8c_a46f_bfc9e556e43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_83e55aae_48a2_4960_a1fe_3f31ef6ce15c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_ccb38191_4b54_4e23_ba4f_e0902b1bacf0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8fd6496e_d983_41e8_86df_469abc9b15c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_16abab32_6e31_44c9_b3e1_b8d404772e50() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0186b02e_1193_4c85_910b_c020cb41367f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ffeb51e8_b84f_4644_8ba6_0d11ba6d98ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_0d4da408_3cd2_448f_9bce_1db7ace344da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_17392b4d_f207_47de_9da7_8528b4deb0e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e8cbb386_a17f_47b2_9f6f_83f270e29455() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a2ce0981_0c79_4bbf_bc6f_a506728e3223() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f6f09421_6a5b_4047_baf4_1397188a1ca9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4cb815b3_f05d_48f0_9b54_f345867131df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4b600242_6994_4929_a1dc_bf035db62a40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b26e001e_3f06_40ca_ad6d_3f99d5d06f12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5a51f1fa_3c81_45e3_a4d1_c34733e30070() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7132fad9_02ac_40b1_9255_0a0efa1a3555() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d93a6b7e_025f_4c89_b301_8b5c79387a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_56c16a8e_e993_4c14_aac5_69b760be9be7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6d61ca5c_49af_420a_842b_f69cbe6d5351() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4bf58963_ef25_490f_b4b5_f4cbacd3b2be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e47b7f3d_d9c0_4c7f_b196_8da79b59c672() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f7474e93_2c43_4add_b301_cef140010b40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b5eac88f_04bf_4790_a47d_783d8b8fa57e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0956fdf9_6a1c_4977_878c_ff09e1d9164e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_619c2930_9f66_4e7f_802f_9485975be402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_da703dd0_de97_4a37_8d9f_36eeafdd8cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a2910c15_9bc3_495e_955b_a42303cde52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1da39b39_46f9_42f6_b518_de5441c393ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_aec493bd_1061_4737_b9dc_5a3ac2d28c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b32353cf_a72f_4e76_9ab6_9c79efd3674a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f3ce6c17_6f04_4243_b7c5_5ac407546999() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a0eafbc1_7c87_4153_bfa1_5217c88b5546() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9c361c82_823a_4bc1_b544_4f96962cd073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_11ae9eff_9488_4c4f_8ab3_ea17446c6c06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f27df727_d098_4d3d_8809_ed944ea933b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_88350769_108f_46a3_abc8_dbc742ddc1ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b7fdee48_75e4_48b3_9edd_a20c9d7c1196() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_370335e6_1795_4d75_a7e2_3cbe3260a43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8ebe2756_2aab_4658_b8cb_e32542a30794() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5b73bc30_75ff_4abb_84f9_15d5cbb87cc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e99d933e_dbfc_4186_a5fb_d01a48bbfd13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2b4d7e66_74cd_4ae3_b652_a48115d4c381() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5f2ae41c_19ee_4d55_b31f_3bcfb0f51489() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5202199d_1983_4caa_9288_6d7bf28ede84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_2b5e68d5_eaa8_4782_8fb3_35bf15e55564() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1026ac8b_c420_4bda_b850_6da2ca5e811b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_34b4dc08_59ed_4fbf_aa88_d60c79391ece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c9926bc7_b0b6_49d7_8026_459ea06433eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b55614d0_9d11_4cfa_b021_a737ece939da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_32c232a4_3d23_49ba_9d27_db4f64d071ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_cbbb7f67_ae7c_43ce_9dfd_98814fee75fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_60950d2d_9a48_4725_bd69_42559df4170f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_98d49fc6_b3cc_43b8_9585_9bc08a22359c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a2546def_01ff_43b5_a90b_5f7c7d2696b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_331f7f64_351a_491d_a5a5_9c10507d083a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9c361c82_823a_4bc1_b544_4f96962cd073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0d1e376d_5ad4_43d7_9e0c_843f05532ba8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_202c0a5f_50ff_4f13_8aba_f34dbf03c88b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fcbf4709_ce77_4076_832c_4db2a5f01ea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e861a9c8_d352_4044_ba99_c5199317b697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8d250a84_2ce7_47c4_8504_836b864ce35f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6b6b1cb4_ccc6_4034_b6cb_166fac56dde5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c37adbe0_87ab_4f00_aeaf_e17aaa9662ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a85c5abe_f532_4ac5_9e86_106be76e99e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_eb66dc25_7611_4e70_9db3_fde5abbd0fc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5e307478_a7df_4414_b169_6c0c62dda5f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4a4cc083_afd5_4ced_b60c_9974ed467ba1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6750f0c6_56eb_4d80_88a8_bcd3c806e46b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_2307f200_7b9d_409d_bfc3_5e1ee5fbb42c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bdd52173_74d3_4d93_9848_11feebbd3499() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e2440eae_32ee_4b3b_8139_c05c906ab00c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_dc4ffef6_6e09_43ba_bf12_6ad5ff9f836b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9f79a323_0d5f_4d70_9907_f6b8b8f0e588() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8209b9e5_83a3_4a26_b31a_eddcde6c903d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a874b368_55f5_4a34_9ab2_37edc2df2cae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_8eaf8a0f_4a92_48bf_8645_ad90823464d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ba59dd74_936c_4159_b62a_55c975c0eb47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d942031e_53f6_44ac_a05c_ae9c372e5645() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4295d8a2_a0a3_4d94_9c3b_d683fc28bc06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_7647c534_b93e_4316_98db_fd4e1f4cdc5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ca54dc58_c04a_4398_8274_38605870fca3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_476cbb75_d885_4e10_96aa_973202f7685d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6ff14977_9f27_4c8d_aaab_19d7e302f4dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b46d2bf8_ba4c_4258_ba39_025ac1e46eb1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ee4ee609_caae_4a91_8da6_5d407b82bbc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9a3637ec_7610_422e_b27d_6dcb5106c849() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_efbef808_23a2_419f_9cf1_0c09fcdc4b1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_12a59985_80fb_4acf_b7c4_39a45040d27c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b932c68f_e1fd_4b0f_9a20_7caf81ddc9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_308fad1b_0112_4514_9871_545732d0e5d0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f855d8a4_2502_4ef7_b458_2a4bd7b6fa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5d69e473_920a_4c89_853b_65ed286e091d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_63491030_e5fe_49a9_b796_a99808f3f060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_5543f808_fa97_4070_8e01_789de3dc4e0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0fd24478_b972_43fc_a9d6_cf8a6827cdb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4e16bb6e_0d62_4d67_9174_f9e4f9cde3f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_56d2d96a_f882_4b84_9860_f46d3b00bdf7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5e94f1cc_3078_4df9_b41c_4bb789fe1dff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5e8cf068_7b38_426e_8638_ea9a72ac407d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_66e54364_3047_4d32_a8f8_6482c24c834d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bdd52173_74d3_4d93_9848_11feebbd3499() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d83709bd_613e_46fa_b0f9_2294263105fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bcfda23e_5ad3_4c58_9354_cf4d72843225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0d4da408_3cd2_448f_9bce_1db7ace344da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b7318be5_a3ce_499a_aa8d_ca54a9052b11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_536861b4_159b_4b4a_9fc3_d4e421e41447() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_9c218489_d418_4473_b2c5_73e2fad8abb8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6101fe33_1821_494a_ac59_a1f726a3d52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_776cd8d1_e285_49b9_9990_8dd13e35085b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e8cbb386_a17f_47b2_9f6f_83f270e29455() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_09f5344d_62e8_462f_b99c_08efb964fe41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e4501375_af7b_4f9d_a919_73e4665ba5c6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f855d8a4_2502_4ef7_b458_2a4bd7b6fa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3580c761_a578_4001_bcfb_44c56e104cbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5a753daa_53ae_45a2_8c49_ea68e7c541b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5781a7c2_c5b6_40a3_906b_4ef5d0c75fc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_56c16a8e_e993_4c14_aac5_69b760be9be7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_adf9b152_0bc6_4e5b_ab5f_660cc04fe710() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_bb58dc4a_3ea9_4bb7_82be_6d42ceded1fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_370bc6a2_bdc8_4207_afe6_add8631331fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8525fbe3_2f09_4aeb_9f10_750af8c0778d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0724312a_b2d5_4d2c_b448_6e5f41191310() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1be72399_bc03_4d1f_8c12_27f584a3038f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f61e5e7a_ab2c_440a_9c81_49209b5d2586() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_79553e77_5385_4650_a551_3c71ada6ed98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2c9bfbde_a620_4033_be8f_894bdab1251d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ffc16cc8_8243_422c_a40d_3542f913b077() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_231c0056_4985_4a15_908e_ad76858eee3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_006564b7_92fe_45b3_9a12_89b513218ad8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_902ff0c7_8c3c_49fe_92d2_cf026e8d6c58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3533f1cd_5f1e_40d7_b6a2_a8ee6164e1b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a1cf918f_7b27_4349_837d_bd3f92e40b28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f2ec5dee_cfd4_4e8c_a46f_bfc9e556e43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_564a5e29_b1ac_4ee3_aa88_2e5de69e9e60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a1aa45a6_90b9_4513_8e4f_c8af874af8e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4333ea56_ee3d_4b6b_b9aa_49658a2d90a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_59f424cb_6bd8_4840_b9f0_f48466ba8d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6703009e_7a8a_49d2_88cc_7116394c5d17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_25c21292_520c_4dbc_875d_6c2d4848059b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_96ebb77a_9925_42a6_a38f_3889cb958042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6a4a886f_6578_403c_93f1_84c4672eba25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f2bec0ea_5c26_42c6_adfc_7e458eda5ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_8ed2ec77_296a_4e5c_84fe_99b5dd3e401b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d8dcd83a_7bb0_46fb_a883_364409f6ff72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_593c5d68_00bc_4524_8c99_d93ae5ea8cbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_7b8fd12d_a160_4f8f_ab50_2b534a046413() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6ff14977_9f27_4c8d_aaab_19d7e302f4dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_870dc8cb_92ad_4955_b58e_76b9bc87fde4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5fd57764_dec7_43bc_902a_5b5896f033e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_0feca5bc_e841_4064_afd2_f59b1b38cd85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cc8bd1ee_220d_4959_ad08_7cc4d2698e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2f646bcd_9fb3_4093_9049_f1740b605420() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_25da0985_6082_4dda_a8ef_9f298114257a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cb4fdc98_8ff5_4899_8349_c6c5d6b4bd36() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6d888c8e_f050_49d0_bd71_1c88e40a55e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f627fcab_268e_4fb5_9d60_190c0dcc52f4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e283b54f_e42e_41ca_8888_08383aa04ecd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_24b01630_8ee1_4ac3_85d0_0ac201c45025() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9074651c_72fb_47e8_a9f8_d7b8e007a409() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_537221d0_40fa_4626_9eb1_170d54cb45dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b69e63d5_fd8d_4d2c_aa93_b83b622069a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_11ae9eff_9488_4c4f_8ab3_ea17446c6c06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e45fbff7_a0d4_46cf_b12f_fdbd8394cdca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_006564b7_92fe_45b3_9a12_89b513218ad8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_12e8c994_1cf7_471f_9297_eff2af5f9547() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_36411eac_8d22_4efd_b273_d6d4a2142894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7fa42576_a932_4645_a6e1_4de86b849410() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_20ca20b1_be92_4e73_b5fe_0a99b9d61492() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_dc4ffef6_6e09_43ba_bf12_6ad5ff9f836b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fa88c368_d0aa_4801_82db_b8d118a36d29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_20531674_1a4f_45ed_944c_719e4ed9a6db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d8de463e_4b69_4b70_a397_9a058634b8d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1448abc6_740b_4016_95b3_9329fee0232f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c7dfa0c3_8db2_495f_a5db_4d2edf2842b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c4609263_ef06_4de1_b054_8d854b8d3eb5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_408775cd_ec84_4fdd_bb73_bf3479985454() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c37adbe0_87ab_4f00_aeaf_e17aaa9662ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_da901ebf_0c33_44f5_a5f7_8e5fac489aaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_64498bd9_c1f4_47b4_b339_11863a55195a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3b53bf4e_ecab_499a_90d3_9200f26c20c7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c76c47af_861c_4278_b69d_7d9b81bcd957() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f1d77301_06ba_40d0_9850_3d85148def9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_aa28fef2_92be_4ac0_a201_e95fc218a19b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_60e48cc8_9216_4b05_8da0_88779b42bbc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_852b511b_436a_4022_a581_c8361f358e31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_768ccb95_8e63_4503_b460_80bf946339d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6a4a886f_6578_403c_93f1_84c4672eba25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_eb2e12e1_c896_4a74_9752_b9eea4582464() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_569e4181_3ab3_47ea_8476_160dce8960d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c23a30a8_4b9d_4cb3_b89d_9042cfa17482() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3df53c03_814a_4697_92f6_c7304fdbfd4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4a65e8db_24d8_47a6_9254_5704eb785fa8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_0956fdf9_6a1c_4977_878c_ff09e1d9164e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8b275996_0a2f_464e_ae0f_da39f5dbc525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_191a58ac_584a_427f_91be_79b5da0c542a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cff84526_a922_4736_8461_5af1ca488b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6b839c71_69b5_4484_85a6_8249f4b73551() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_dda4348e_a2ae_4938_abfd_05e21beae926() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0fd0fc34_2510_4255_b52a_139776c88cc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8956b178_bf58_4406_a81e_e80c907655dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3d1e0f67_e0ab_434f_94d4_b05285ed6340() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_809af517_ac01_4279_aa38_a5e585bf05ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_68620d02_503c_4145_a3b0_dcc0fc8fb911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c7d189c4_4fd3_4911_8d2d_44fa165fe888() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_fb6499cc_e84b_4e32_a26c_5eecfe7e449d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ede41b02_7ad7_4092_b44d_0b4c40bc64c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7eaf6c04_d2e1_4efd_9cfe_71254ec5ffed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f8f4df55_837d_4d96_9088_842886efb575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_06938022_06b9_4be0_9470_c454eb5b3d7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f03b5b1a_5f00_4ef0_83f0_c0012f7db61c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6b8c380b_6ab4_4863_9012_8a5e02946711() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_caaf88b6_5705_427e_9eab_a51158e981b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_93b49842_3394_495a_9afc_7e1e0a127baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_65fb5930_1bf5_4bed_9793_448cb7212c99() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_34fd786b_962b_4989_84b0_1a88715d107e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2c413238_a289_4823_9ebf_252e48e93606() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5a737877_dc8c_446a_b475_19eeae5e1e55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b498d9b3_985e_4d9d_b29b_9c3045dc11ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_17676952_3831_49ea_8e89_516b6c4f39e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e87da859_b909_49eb_977c_ab78f603d86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2e685dfa_8307_4f56_b5a2_0d2fb46f654f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_968e5ff2_1645_4115_b44d_2b4f18f6b875() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_317a9483_f6ec_44bc_ac46_9a0714e83d5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1c9b4fc2_c722_46d8_9f90_fe9c263508d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3048826f_d193_4d26_9c42_71955f6dcbf5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5b73bc30_75ff_4abb_84f9_15d5cbb87cc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c1fa22c4_12d7_41a8_bdd5_32301d9bc213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0caa00d1_463b_4a6e_870c_17ea4fb46939() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2e4a099f_38cd_42d2_998a_f657e11516be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_abadeee0_762d_46d9_97cd_13a55432c0da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_467d1497_ef09_4cf8_9d4a_2e42ee656624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_53a31fe1_53df_499e_b9a2_7e3a073fea42() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d3f58846_9478_4ae3_8c80_4d1adb50b902() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5bee1966_5e60_47e0_848a_7905dd591c7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ddc440f4_7e2c_4aa1_bf8b_42b7ec59fcd6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_4dd952ee_ba10_4cfe_82dc_320df8758a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fcbf4709_ce77_4076_832c_4db2a5f01ea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_989ee809_e511_404b_b009_e005e2af9248() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bf21c91c_cef0_41f7_b6c5_1dd7e7fc611e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_bf110fd2_b7c9_402d_bdaa_c8fb9bb22110() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_98c4b2d8_e78e_4cb6_9da7_d8875a3e07fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0585d13e_2b19_44b3_859f_85a7730e49e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8477295f_5e47_4367_8f2f_919d8d8af3e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_965d5374_8aee_45ee_8c97_05773fa09dbc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8ce477b9_5406_4a3b_a431_7a9f6f03d51e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_06269574_26e7_4e24_b41c_195e989e8c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_173d6660_6406_4eae_914b_22d9f984852f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_930894ca_0454_48eb_a6b2_6ddf550fa4cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d047fc3b_fd72_4a3d_b515_15dcb89b9e4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c7dfa0c3_8db2_495f_a5db_4d2edf2842b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a838f46b_be21_4a32_9406_eac35cee65bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_87d3330b_a138_4bd0_af92_8169d36c1e27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1e20ef2e_01d1_4164_a03a_1191929a3e30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5e0521c3_1ceb_4dae_8922_84d5f762607e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_14a3440c_ef0c_4739_afaf_ab27cea7e73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_fac00f35_8dc7_4ea8_bc00_916d4f0b32ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_805a5a74_3365_4c17_832a_229b2fabaf5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f2616ad1_81fc_4f13_afdf_817c416647bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e4a779bb_53b0_4792_94c7_dabea65d6c7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0fddb5c9_edd7_43fd_8e75_ade95fac77c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_21fa7f1c_2810_4ec7_9fd2_ebfde3d82b53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fdaf3392_34e1_4463_aefb_80d33bb68e4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1263b015_425b_44ff_a975_34fe961af031() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0023d758_b10c_435e_b4e6_69abe5a943f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c35091d7_125b_4684_a002_a44c9470541b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_267e8666_03bf_4c97_a841_fba23e5f3040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f1d77301_06ba_40d0_9850_3d85148def9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b76f81c5_4161_4471_a3c2_e33feaaeaf52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4e8f30df_752f_439e_befa_a6c0338f0687() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5f3f3f9a_b7db_49e6_aefb_43f508ff1f8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1e71e19d_a256_47c3_b974_ee3ac3567a5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7af20def_9342_4aac_b6d7_b2f7db1a1884() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5a53267b_b35a_4e36_8d3f_b04bbeebd3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d4d6a753_107e_41cf_88eb_bc51ef9d22d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b2d80524_9506_447a_beda_ccd5cc2c2cc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2da30666_56a5_433c_924b_7ff410f448b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9bf8e74b_399f_468a_9fe9_949b43503748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d942031e_53f6_44ac_a05c_ae9c372e5645() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8b4bae11_cf31_405a_9a74_930284c3a3a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7c73c158_ea87_4543_bcb8_88fa5b0a2e10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_04111dba_38a1_409c_90ce_ccf200b12b2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3095b166_605f_4054_9c4a_242ae8b9140e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f84c022b_67de_49cd_9f6c_01bd5749895d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_03612763_5740_4d8c_a351_2970f859d4b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cee968d7_597e_49e7_85d1_750d04bb7c68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c451a034_a863_421d_9e83_2ce4678e167e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_532a10b0_cec4_4763_ac4a_b261b1b62b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ef45541e_d303_4241_9ddd_1ede03a345e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2c413238_a289_4823_9ebf_252e48e93606() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_7b577615_0e7d_4243_a105_1ea2572bd540() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_886118d3_3a18_4d27_8af5_323dfa75476d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_156f35f7_09d5_484a_ba08_b81f63161ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b09bb88c_cb68_4b9e_989b_83eda6dba654() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a5274842_877a_43c5_9e8b_9fd42f72bd4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e1c299fe_eafe_44c9_8af1_09c2ed8d2b8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_06d90366_23f3_4fe0_99a9_12804f89945a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6ff14977_9f27_4c8d_aaab_19d7e302f4dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_cc8bd1ee_220d_4959_ad08_7cc4d2698e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a690cd64_1da9_4938_944e_5a0db5566ef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0a726183_d170_4a2d_a10d_0b06f2ce4053() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_88f88cbb_504a_41c1_9dec_450f2e50dd7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3a57ec2f_ce0a_4e8d_9069_630d327567d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_805a5a74_3365_4c17_832a_229b2fabaf5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_13de9847_f012_416b_b3d5_913de8ecfc7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ea6d834e_c25f_4d0d_9560_c6399c59d010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8e804c5c_4e5d_4364_9ce6_7cff69c2b8d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b1afa205_4c47_4eb3_a540_f0d2589e90ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8fae3310_3c77_42bd_9e99_ebaa396a1621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_965d5374_8aee_45ee_8c97_05773fa09dbc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8f2b4cc4_ea90_42b0_bfd6_af26f150de03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_03b66409_b1a1_43f9_952d_5bcf82d63a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c153690c_220c_4b24_91fe_9146fe019f1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_abd09ee9_899d_444f_a2ab_52d767211318() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4087f2dd_63cf_4c1b_a969_7ae4c8aa7e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2160d417_0be3_419b_975a_65b7832bf5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_17b5a9b1_7ba8_4221_b589_a55bd1f7f543() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cb684d6c_f621_4afe_909f_916f5253ef33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_72aeec1c_931c_4eee_9dda_2ad8094c3947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9e294aae_5223_4484_bed5_b29af85b097b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_183075f1_61b3_4d78_b46d_0aa53156a193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8a009dc3_96a2_458e_ab47_f3c08768b94b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a7de2efd_f9cf_4d51_a818_89fb23085a02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8be5dd20_2762_400d_aa63_e5e0d54529d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bb16400d_1e72_4b9a_92cb_914e13c7cca6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f737ed78_86a5_44ba_b19e_d589cefb9c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_843ac6ad_88cc_440e_bc3a_8a89fd5c5f57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_04f52b54_c600_4a0b_9e27_2ac4f08e7378() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d4d85f3f_93d9_4b81_9ffc_70f4637b31ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6d8cebe7_7632_43f1_97fe_21483cf4fa57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5e139813_980e_403a_98fa_fdb2578bb139() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_28f11549_6f7f_4b45_bb7f_b51b0e65c9ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_464a672b_c21e_4ed6_a515_d9baf612c388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c68aaf08_12c5_4f24_99da_26c69e2e2c8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b584cd90_67cd_4160_90ab_dbfa4bb4e38d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d4600a47_e600_4992_ba49_e27860e10083() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_88e7fb96_7d57_4ada_9ede_fed19f3273e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_72911099_ae99_45ee_8716_1e801031ebd7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c68aaf08_12c5_4f24_99da_26c69e2e2c8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_72ee2213_1804_4af5_84e1_f9e5efa5eb71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6604279a_b9ff_4735_869c_33117449833d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c6c16ad8_c80a_4668_971b_575943b80ced() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_49f84c84_03aa_4765_b838_641bb9a9ad4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_34590fc7_34f0_44e3_825f_4b03affaa332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d3eae0eb_2f96_4eee_bdda_d6415912aebc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_7559a675_cf04_4529_b0dc_10f9fe98979b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c37adbe0_87ab_4f00_aeaf_e17aaa9662ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6b87ef8f_3e18_47d6_84eb_963a77ad326b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_35196c56_0140_4661_ac4d_fb3786f726ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f2ec5dee_cfd4_4e8c_a46f_bfc9e556e43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b36b6753_755d_47cd_b472_b6d49c67b166() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5157b0e7_5c37_466a_8427_328d3046b9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_92465c43_2ddc_40c8_bd2d_9bb8d8341afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4d06e8ae_2975_4678_ad61_023900ca95ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5fcfbb0a_0926_4f1a_b57a_b7425492b4a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c1595a06_7ab8_41d3_bd47_457e6634464b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_feaeea1f_a580_42d4_a50b_b2abcc90615e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_7318e19b_6930_4c32_8fcb_e65cc418e1c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_dc76ee2e_a868_4043_bdaf_27848cd83e13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4f750753_a2f8_4503_9272_caca33cb3835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_03d7373d_f7db_45e8_bdff_aba6423a7d05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d1493453_c52e_432e_b7f7_eb295cf9423c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_152fdaed_1509_445f_9780_341493f5aaab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d047fc3b_fd72_4a3d_b515_15dcb89b9e4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b68c1ef8_3077_4153_b353_55c17488cfad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_757d2b3f_aeba_4db3_9a7e_efba9acb8d2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_adf347f4_c3e7_48d9_b104_7bf6d8446f53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_537221d0_40fa_4626_9eb1_170d54cb45dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_564a5e29_b1ac_4ee3_aa88_2e5de69e9e60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e281ef91_f065_4664_8744_9b890dae9c2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d1d2112a_f7b1_4fd3_8150_58b393f5a54a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7ae560bf_409f_4d40_b570_544b2fcccab5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3c8fa9f9_0c28_4d4a_9f93_4e5afd584b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a838f46b_be21_4a32_9406_eac35cee65bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_849103f7_c9fe_416d_8af4_85c87ac0c72b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b3d3190f_ee3c_4626_8c7a_71b57cf59270() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6162a2ad_fc6b_4f37_878d_784d5a5c9f28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_888f0e9e_cd95_459c_b30a_c9a220d1f2e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b81aed14_e043_4b39_b507_14a869c76b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_732dac41_ebf7_4233_afe0_aa381bdefa8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_00cd38b2_1287_4399_b525_a6af4e962fda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d224ba2e_e119_4dc7_a61f_6b4010c8c2f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5040b327_01c7_4a44_a9e5_98184c146baa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_845db240_3cfb_4ebc_a1dd_96d1da2c2092() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9013a0a6_d582_4695_b1c9_35e90c6ed73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e6668c10_a3e7_44fd_8f86_5b9a80d55a0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1109a239_5947_4f39_9bd4_c79f0f72a55c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4a4cc083_afd5_4ced_b60c_9974ed467ba1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4ea33365_4145_4765_82e4_ceebfaaff96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7fc7f2dc_82fd_48f8_bb5e_56f3478586bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_843ac6ad_88cc_440e_bc3a_8a89fd5c5f57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f418603a_7d00_4a59_bfb0_78027c4663ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e42accfa_eb9c_4b4e_8cbf_9c1d18cc8ff0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f6bbd26b_ba87_4c71_8375_8acb37743d8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0585d13e_2b19_44b3_859f_85a7730e49e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f4f79686_df17_4539_bb22_c4f71cfbdd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9c361c82_823a_4bc1_b544_4f96962cd073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c57d4bde_8ff5_4158_921b_352f5edd5598() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cc0f70a3_dbdc_4dc2_a1ba_d353fe1a6173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_89c34b96_a14b_4af6_8a6e_789154576bc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ae1944a7_a241_454b_9d4c_cc08a20255d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5a2451b0_6b54_4153_8c49_73a727fd9d53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_372bdf54_6e55_4022_ae83_a9ee9fbd0a78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b260f73f_feb4_4d60_aa6b_6df266b5b0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f011d5fb_aa07_48b0_9cd1_af0ecca41dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8c42b47a_23e2_42ef_9c69_038e6a3b53a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c299139a_8973_4505_bde2_844a952eda63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_adf9b152_0bc6_4e5b_ab5f_660cc04fe710() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2d170e57_18b8_455e_bab4_fbabe087e20a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6d61ca5c_49af_420a_842b_f69cbe6d5351() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f03b5b1a_5f00_4ef0_83f0_c0012f7db61c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5fd57764_dec7_43bc_902a_5b5896f033e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_71a0bbe1_b094_49eb_9640_6f2d6e2885c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9bd0bdea_4e18_47be_a6f2_5a5c0aa7996d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_06269574_26e7_4e24_b41c_195e989e8c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0321342d_bb13_4852_8ddd_d8c833f1c718() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5fcfbb0a_0926_4f1a_b57a_b7425492b4a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8183c81c_43e6_4aec_90af_50f08a358870() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a40099c9_3cb7_44ef_b7db_d2809ead75c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_49f435f1_9a5d_4190_9851_969891b30736() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0e134aeb_8605_442e_a9ce_bf043a43c81b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_96a31b87_6dbd_466f_bcb3_5fcf77bbff29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_31646a5e_4f64_4620_a22b_abe2278b73af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ca3ef9e9_d3aa_4ec4_bccc_8543f51790d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5ee0a6fe_7335_42bb_bd26_9f98a579b9f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_619c2930_9f66_4e7f_802f_9485975be402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_77f7d997_713a_45c0_bade_5e7aa5ed12c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c68aaf08_12c5_4f24_99da_26c69e2e2c8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_923f14c9_0cb3_44ff_beda_38ce6f7747a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_36e90961_0428_40c6_98a4_133c09896639() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_01fd0d1f_8c05_44e3_a8e9_5fa433c10d2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c3f5d853_3294_456a_b6f5_8d1770d4c706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a7182d1e_5e42_4c7b_8322_adeea4fca112() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_00770ee1_e2a5_4d37_8f53_064568593d48() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f39b036f_cab2_4952_ad23_41a045e84eb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e877df89_22b3_431d_a34f_44700be5237d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_afe8e6b4_d557_4cea_b4e6_6398c40db84c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e9f84464_a806_45a7_a14d_7b42978b3c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d1493453_c52e_432e_b7f7_eb295cf9423c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3770a28f_49e5_4074_9191_5be0d7bd12b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f627fcab_268e_4fb5_9d60_190c0dcc52f4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_0d06e089_cfcb_4146_808d_381509d71a82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_19bf1445_5581_4d23_8a67_abdfa6fbed06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1fcd229d_a37d_4f6a_b02f_fd276ae780c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c1ec123f_0f0e_4425_a81f_8ddae93d361c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_25a21414_bc5d_47bf_b579_717676a42a0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ea18208d_c1b5_4aed_9674_12f9e5cd9f97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9135a7a4_d524_4af6_8a1e_d92455eb4a76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b7196086_2e96_4916_a5b3_d8ff5e293e86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3c56c142_0b54_4221_9a14_0ad94d455bf3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ec39a0c9_2323_4471_909e_337347b1b7ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bdd8f061_b905_41e1_bee5_b84a78a7a4c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b464ff5c_08bb_44aa_a15f_2b5f2229cc23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bb16400d_1e72_4b9a_92cb_914e13c7cca6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0c978632_7497_4330_8302_4b1c5c97ace5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a40099c9_3cb7_44ef_b7db_d2809ead75c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_06269574_26e7_4e24_b41c_195e989e8c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8d74af62_a236_49a7_81ce_3597704dfe01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_410d3d6a_3142_4d6c_bb4b_ccec07654ab7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6750f0c6_56eb_4d80_88a8_bcd3c806e46b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6f01ea83_3b6a_4716_be62_0340b4d71baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_31dab31d_86a6_4ab6_8be3_3906d04eac1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_34847a04_0930_433c_920f_ea3fb0d71599() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_51f8d673_45da_45fc_a41b_c5a8d0989200() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c9926bc7_b0b6_49d7_8026_459ea06433eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a874b368_55f5_4a34_9ab2_37edc2df2cae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f8f4df55_837d_4d96_9088_842886efb575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cdc487bb_a5e4_49f2_91f4_12467fa87b47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7d46a874_1f6d_4966_a958_23dba48b995b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6834c735_74ff_4f19_9141_b72bd4f3d7ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c9ea1ee3_2fbc_4213_96df_2fd046dee2ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c3f5d853_3294_456a_b6f5_8d1770d4c706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_23cabc4e_563f_44c9_89a4_b3221fdb6e1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ab229044_f825_40b6_93db_b869e7552697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_cc0bca4a_f917_41ec_889a_abe3cc642961() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_05b266fc_d660_4273_8c10_bb351c677df7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_67e3fe88_de03_4471_b83f_f69ea22d2496() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8e72351a_070b_41dd_94a8_9358af98677f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e3a6cf9a_730a_4d0e_8711_01110907dcc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f26d649c_4083_4346_8537_34c54606d352() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_56c69a57_f7a2_4ad8_a152_cf882b12da81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_331250db_e6f8_41e3_a1b6_5b0b82b31041() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f4f79686_df17_4539_bb22_c4f71cfbdd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_99794316_abf3_4829_9979_afda1abc156d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6101fe33_1821_494a_ac59_a1f726a3d52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_95dae14d_e161_4b77_8df8_e27e4c02658f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c6cf6f76_423f_4e55_b814_7658e3623cbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_3d363009_0e39_496c_a531_33f1621d3c2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2267bd43_5b1b_4e37_9989_818e70f0f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7c73c158_ea87_4543_bcb8_88fa5b0a2e10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c0829858_1dbb_4441_992c_d4c2d7eba871() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_78ef4f19_90ae_4f06_b94a_093eb38b74d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d4c801b7_7301_4d28_a515_6da12d54743a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_eb4d0fde_56be_4727_81f4_efc642596141() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2bf58553_9e53_41ed_82c7_a0f6752cfeec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b92bddc5_934f_474b_a9d0_5b440fef2ef3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2a87427d_498b_46fc_911f_e0edcde83ea1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1da39b39_46f9_42f6_b518_de5441c393ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2c413238_a289_4823_9ebf_252e48e93606() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f442f33c_f1bb_4b87_bf1c_5997eebd2a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3df4f4e4_d5fa_4146_ad86_e93e7d550a6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_cbbb7f67_ae7c_43ce_9dfd_98814fee75fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9102e3d8_9dce_40fa_b484_11e7868ea84b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_35196c56_0140_4661_ac4d_fb3786f726ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3095b166_605f_4054_9c4a_242ae8b9140e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ee97a465_090d_48e8_917e_e08b4ca2485a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a5d8b8f8_5ab8_460b_8d9c_266645d921c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_04f52b54_c600_4a0b_9e27_2ac4f08e7378() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ede41b02_7ad7_4092_b44d_0b4c40bc64c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_77bad787_453a_4ba3_bcda_75156c64be4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c74d4c71_ed19_40f7_be34_fdcccd5b420f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a5ac7375_feb5_49ae_89b5_fba99a412a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5fd6d602_1e80_4200_a4e7_86fc7303a207() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2fb84282_b9c5_4fad_bdb8_11b9dd34aca2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5e139813_980e_403a_98fa_fdb2578bb139() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_adccc442_ad7d_4c64_a5b5_23bacc7577f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2bb00773_6854_4293_9e1e_46d04caf0e1f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b775ffbb_eea3_4c89_9665_c3fdfef72498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_808de8fe_3f23_4443_ac4d_fc3105e94f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f00b01f1_495b_4d5e_9d6d_5892a20f2b89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5781a7c2_c5b6_40a3_906b_4ef5d0c75fc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_54eacfbc_94c7_4704_83cf_32f232933c9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_fd3f4bcb_26ce_4086_8a59_09d8d16906ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_15f9249c_abdd_4e87_b627_4a674126ea75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c202a3b5_d46d_49e8_824e_bc7c6c0e6a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_24ff4838_1e03_43ab_93ba_1df273cfdd76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_38e44b78_d107_46bd_9816_f74240dbbe55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3cdc3c22_9d91_436c_8204_f90abb946706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_067a73d4_5525_4381_9688_b72a304c054f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_47c13555_7891_42e5_b3a9_d0d75686e049() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7fd1879f_4a3a_402c_b6f6_f93cd5714439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7c73c158_ea87_4543_bcb8_88fa5b0a2e10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0936ec4e_f0e8_474b_be48_d3a6bae7e8eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_63527cff_58d2_40cd_a85c_e5f2206a18fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9cc92481_af05_4cbe_9a43_1486dcbc880d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_0334db5e_68c7_45f4_833f_915b32c5a2cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cdcedb1b_8606_43f7_aeed_037091503434() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_47d3d8e4_edd8_48eb_b966_f7d9e3cc6c3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a5b62b48_9c31_45f7_8238_d233ee38258c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c9ea1ee3_2fbc_4213_96df_2fd046dee2ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_46bb6df5_0f1f_454e_95a2_ad24a04694d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_07145161_86c8_438e_a97b_1142af050e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1c9b4fc2_c722_46d8_9f90_fe9c263508d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_886118d3_3a18_4d27_8af5_323dfa75476d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_99cddae5_d688_4272_bd5f_b84f2fa15b10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b9243b37_17ed_40d6_8242_15cbd378cc17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_7b15e7ae_3964_438b_84ca_1cd606670ae0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f342a60e_bf7e_4f66_ac6b_9124048f8dee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_288ee5fa_2143_47a5_8d7f_cf7d7be1e2e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_be427e26_a24e_4d0e_a651_bbbdcdcef432() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6623ad6d_62d5_4614_be4c_e4de4183c07f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3c56c142_0b54_4221_9a14_0ad94d455bf3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f02bb53f_d4b4_46d5_b429_ff7cb390495d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f462266d_f2e7_4644_83c7_ed8c5d0c3fac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_98849b06_dc44_477d_8c0d_7285e8c5df02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a253b76f_2c77_4ea3_bf15_25a59f12c1aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f3ce6c17_6f04_4243_b7c5_5ac407546999() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a6071f27_0faa_44c1_a543_c9fff15dc0d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5e8cf068_7b38_426e_8638_ea9a72ac407d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_97d592e7_754b_45e6_b7a0_21d4e1b2de17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_75ea0576_3de5_4934_97ec_9d6d26cf9eba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_92744e7e_c3e2_414d_b930_2d0d765ac789() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_39851f32_c6b5_41ac_83cd_eda434a3d443() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1503155d_ac46_4240_a605_9f935c4d4949() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_28e4b7d5_4042_4bbd_9382_81892b881756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4e92d703_4bca_481b_9230_c22792995cc7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6604279a_b9ff_4735_869c_33117449833d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f8dab4a4_4413_4629_b71c_3c17f03e127d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_aa28fef2_92be_4ac0_a201_e95fc218a19b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cdcedb1b_8606_43f7_aeed_037091503434() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_7559a675_cf04_4529_b0dc_10f9fe98979b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c4c43c80_4501_42cd_8d92_8a51c86165d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_488d8253_66e0_4b27_927c_cea259b28db8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ede41b02_7ad7_4092_b44d_0b4c40bc64c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_48c488fa_b6ca_45e1_8009_c58af9f286a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_deb29c8a_fbb9_4e87_9f95_4191a41fa7e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a56d4207_36db_4346_8e63_d05b27745931() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ad938b5c_5d05_4bd7_b33d_e5bc833456a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0efa0968_79a4_4a4f_a0a0_3d7aa2d589fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e1d0cf0f_0f16_4244_a47b_bad0df347eb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_5ee0a6fe_7335_42bb_bd26_9f98a579b9f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b11f0a88_08dd_4143_b40f_12b4ac993dcd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d3eae0eb_2f96_4eee_bdda_d6415912aebc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d752727a_8cf0_4a59_a15a_401ab6b1d2e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cc0bca4a_f917_41ec_889a_abe3cc642961() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cc8bd1ee_220d_4959_ad08_7cc4d2698e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_2e4a099f_38cd_42d2_998a_f657e11516be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b9de911b_d08b_4d3c_b914_c922f28110d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4d0df127_5ce9_4266_9462_01f809836673() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_69e97de1_51ad_4204_8a9c_6886fa84c250() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_821490fc_c276_470f_9f06_8e99a4a94168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_70201347_07a1_4e52_8ee8_92da805ced88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_da73e1a6_8572_4407_b5a5_ac7428743fbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3095b166_605f_4054_9c4a_242ae8b9140e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bdd8f061_b905_41e1_bee5_b84a78a7a4c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7132fad9_02ac_40b1_9255_0a0efa1a3555() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_60e48cc8_9216_4b05_8da0_88779b42bbc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_202c0a5f_50ff_4f13_8aba_f34dbf03c88b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_48c488fa_b6ca_45e1_8009_c58af9f286a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_38555b9e_8797_45b3_b3fd_87d89bec4da1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3770a28f_49e5_4074_9191_5be0d7bd12b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f45092d9_cf90_4996_b38d_069a7ed8534e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_78a23fb9_896f_479c_8aea_7a442b9cc078() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e1e8cdeb_3d02_48a8_8da8_470ef9f1c571() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1503155d_ac46_4240_a605_9f935c4d4949() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_04111dba_38a1_409c_90ce_ccf200b12b2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_56a90d79_5604_42ce_a3c3_f951c4cae047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e2c8c77a_c36a_4c47_a999_f8e739d42e58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e537b67a_9a8e_484c_aca0_5b0a8b3a8cb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2b5e68d5_eaa8_4782_8fb3_35bf15e55564() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6e182204_2325_4779_a1b6_6d9688e3aa13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2d45d5bc_274d_4a44_a0b8_d2d6064f1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_db3f6134_4f1b_40c3_b41b_9e01f756f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e2c8c77a_c36a_4c47_a999_f8e739d42e58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d7c34757_8473_44d0_a34a_f37cfdfa3249() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f737ed78_86a5_44ba_b19e_d589cefb9c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_36e7a877_59ed_4f73_9534_6824ab5f5297() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4fed3a50_e8e4_4545_95b2_223bde220038() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3d1f994c_d4b3_4aa0_b4b6_3150cec63c05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_bf56ed06_3dd0_4dfe_80d8_33bd5b397ab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_808e10b2_ee72_4970_af6d_4d9a08bc7cc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d752727a_8cf0_4a59_a15a_401ab6b1d2e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_a0fb3330_ea61_4dff_a2b0_14444981b831() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_14a3440c_ef0c_4739_afaf_ab27cea7e73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b250f4c4_7df6_437b_9d44_c75774c14cea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_46036afe_8af1_40e8_b036_259b8aea2af8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_01e25675_51fe_47fd_875d_e96271c36e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f33ab305_b833_4d3b_9ea5_90b99987262f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_14992d0a_121d_4ee7_aac6_99248c2af879() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d09ad164_ccf1_4fd7_b13f_24a7e22d60a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8de24d28_716f_4f9b_9138_c07ac4ca2947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9102e3d8_9dce_40fa_b484_11e7868ea84b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_27270c33_cb41_4fbf_bfda_82008ab4dd38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6dfd85e1_f92b_43dd_b273_b0b2d9b4b7ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b36b6753_755d_47cd_b472_b6d49c67b166() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2f87392d_edee_46ba_a65e_f365bc303b92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ffeb51e8_b84f_4644_8ba6_0d11ba6d98ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2b664586_8576_40ae_9da8_594ce69716f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8b4bae11_cf31_405a_9a74_930284c3a3a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0624f6e9_39dc_496f_9173_a0754fcc9bcc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5c8573e8_4537_4701_a812_58c8a001b783() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_808de8fe_3f23_4443_ac4d_fc3105e94f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_25a21414_bc5d_47bf_b579_717676a42a0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_26892abd_f0ea_447c_b4e5_b800aa7d78f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_768ccb95_8e63_4503_b460_80bf946339d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_96e72c4e_8fbe_4fc5_b64b_52be64623984() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_44db7931_24ba_486c_9ed6_ae1a5ff0de64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_224206a0_eedc_48fe_a6e5_f73e419ad183() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cd832202_b3b6_4bf3_a17b_60b06abfdc34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2426b724_8802_4f8f_a3e5_ccc191976668() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_821490fc_c276_470f_9f06_8e99a4a94168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_09f5344d_62e8_462f_b99c_08efb964fe41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_89f2f8ac_2eb2_476a_bfb1_32d17ca1de85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5e3b272f_fa9d_43ff_a1bb_da593b9ca90d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_efaa1305_3e74_4610_ac5b_f81526d90db2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8d643ba7_381c_4e1c_8bc5_ab3c9739953c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ade2dcbb_50dd_47b4_9a10_ae4fe9f9f475() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_90b67a1d_e9dd_4940_a901_1bb527fd8cce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2288e6ea_dc4d_4da4_9c8a_04b0df767c93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d418e39f_f8e4_4383_bd08_f65e1f63258a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_27244f78_2e86_4d00_98fc_db0362fc70b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3698a8f3_9a74_4b0b_995b_2d37859a6b8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d31ce131_6ac0_4ed4_803f_c87577fd4f17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1d3345b9_e249_4f3e_a3b5_56474c6fcf6b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a843e849_ac24_4c8e_b757_e9904325af64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_30b97351_0551_44cf_978a_76520fdeb8cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1449e29c_9f58_4edd_8552_1a692625c9ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0dc8277e_e4ae_41cb_96e5_4ee26d70ceba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2f20bdf3_1752_444a_8b48_86396c4813ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0a627390_6365_4467_8626_500f1874ad03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4d06e8ae_2975_4678_ad61_023900ca95ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_32b99fef_645f_4f06_99d1_7aa29db8878e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3580c761_a578_4001_bcfb_44c56e104cbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_14241fd2_b741_484f_92f6_07dd53880c1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_818fff67_cdb9_4f61_96f4_b8a91f736032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bdaecf8f_4ee6_41b0_9efb_ce684fce5fff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c626dadc_461a_4b01_8fe8_7c9c08435417() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_88f88cbb_504a_41c1_9dec_450f2e50dd7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a10f374d_aeaa_4bae_9885_2bbdb8d9d168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6ed42b3f_3d49_4524_87bf_7f7a4e47baf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_66587cfd_e1dc_497a_9e81_0f71d4e1771c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d1e6a867_619d_45dc_81b6_f3f5f8fa01c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_81e4d4d4_3e2e_43a3_849a_30554f84fe98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e9f84464_a806_45a7_a14d_7b42978b3c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_47692e4a_b11e_4af4_83c4_b4bed57de911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_54432884_1fbb_4dc7_9098_156fe308cb89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b2d80524_9506_447a_beda_ccd5cc2c2cc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6d294327_ae42_484a_a703_3d70ebb7b7fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_86096c58_7eb4_4e8b_8b04_2ab89ec27469() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_efc49b58_fd44_475e_9491_2bace5012ccc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e5fec7d7_46df_4575_a8e6_ce6e714d88ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4c659fb7_13f5_4e50_9734_c92ae5c3c737() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_060a2819_6e41_48ae_a317_f1a7ed7bb0f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_174a84ba_5f68_45b0_9d84_38b3575d7d0b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f7240e90_e5d0_4d87_b2c8_af39b6905312() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_48628e34_531f_483e_b5ed_385f5217b923() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9c390ca2_59f1_41d9_b45f_647517a7578b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6a02e0b5_5b54_48f7_8a7f_1f09bcab15a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_95f45ce4_eafb_44fc_a123_dabb1241221c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_46bc51d8_135d_4220_96ab_0778f9f610e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3f3398ad_420d_41ad_a999_ba7e79eb5244() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d2f49ed4_c719_46f0_8657_b4d6890342ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7d46a874_1f6d_4966_a958_23dba48b995b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_efc4fdf5_01ab_462f_b789_f61b8656e61a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ce9b2eec_cbd0_43b9_a03c_6416dcc5337c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b932c68f_e1fd_4b0f_9a20_7caf81ddc9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5012de6d_3796_4140_8041_a849a0e3de8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4111e63b_6ab7_4ea8_abc1_8768264f749c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_26ec5711_28da_486c_9c50_219ff7cc0450() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0724312a_b2d5_4d2c_b448_6e5f41191310() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_324f53d1_14c1_421e_bd3e_2c18f06209ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a7182d1e_5e42_4c7b_8322_adeea4fca112() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_54fd500d_e788_4238_84cc_94b08e188792() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_989df6fd_07e7_4b9c_b493_768e3d24cc03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0956fdf9_6a1c_4977_878c_ff09e1d9164e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c814dc33_e699_4b3b_b236_701ef8ee3bcb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e537b67a_9a8e_484c_aca0_5b0a8b3a8cb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_27270c33_cb41_4fbf_bfda_82008ab4dd38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_93552028_4073_4eee_8078_c223f7b7a621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_84b71600_0e4a_4621_bb44_d32a07a8f3ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6b839c71_69b5_4484_85a6_8249f4b73551() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_89c34b96_a14b_4af6_8a6e_789154576bc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d8884e2f_647c_4554_affd_b3a3b4b2087a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_44dfa3b4_1000_4150_885d_eb825f5a0047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a020ab23_5ce4_4e69_90e6_8a01fffe57c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_893fb587_d247_4eb1_b160_e4f546a7b6b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9bf8e74b_399f_468a_9fe9_949b43503748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_bedbcf85_4de4_4116_a096_1748f1d46251() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_923f14c9_0cb3_44ff_beda_38ce6f7747a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_95d773e9_5e29_4683_b573_acf7c14da1cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_96e72c4e_8fbe_4fc5_b64b_52be64623984() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d1d2112a_f7b1_4fd3_8150_58b393f5a54a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8c42b47a_23e2_42ef_9c69_038e6a3b53a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a7339ccb_9ed2_4d86_829a_88eb84067dc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_156cea86_b9d2_4504_a45b_f770e5fbdb2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_960147ca_18d7_4f8e_96fe_f9301d0f7cc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fdaf3392_34e1_4463_aefb_80d33bb68e4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b837ba88_0c9a_4a4c_abe9_d3955d9f7670() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7d487dcf_8861_4a4d_8c89_950f5929a6b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_491b3d0c_2fb4_47bd_8ba3_1136df96358a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_85f7a122_2b55_4b74_a7d9_f9014e02b781() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1945e604_bcf8_47c9_a783_483b2cb4cffc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_72ba1603_7291_4e4e_b19a_2fc10ccabece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_4657e7a6_48e8_478d_8167_92da1cc5bee6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0c8a7c68_4ec4_40d1_9dc9_972749087685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a907bea0_0549_43fc_876e_7e4a973d0191() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b173982c_f486_47d2_b1db_a0dc36e0f55f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b9199286_65dc_44ae_a835_54488626a6ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b3d6d61e_3a30_4377_98ac_4f758fc3f647() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ae1944a7_a241_454b_9d4c_cc08a20255d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5f099385_04ca_41ff_bc6e_4a0b051d5824() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_07d2382e_7e07_4eff_8b2d_e1821d5d0a3c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5543f808_fa97_4070_8e01_789de3dc4e0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a2546def_01ff_43b5_a90b_5f7c7d2696b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d224ba2e_e119_4dc7_a61f_6b4010c8c2f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e85619d8_16cf_4e07_95d8_9009216a92d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_317a9483_f6ec_44bc_ac46_9a0714e83d5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d355950b_d9be_4216_bed6_47f5099b7af5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0956fdf9_6a1c_4977_878c_ff09e1d9164e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ea18208d_c1b5_4aed_9674_12f9e5cd9f97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3048826f_d193_4d26_9c42_71955f6dcbf5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_04677b08_4fb2_45b4_8f8d_e4ceab8b7b58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_95d773e9_5e29_4683_b573_acf7c14da1cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_95dae14d_e161_4b77_8df8_e27e4c02658f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6d33978c_32d9_4732_bceb_19935664b243() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d4537622_86e9_4684_834e_fa06927b46f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6c6cb5b7_4907_4516_92ad_7b29768c1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_19c69545_f1ca_4d3e_89e5_75a216902a9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9a7e3ef2_5199_4161_9432_fb2f3f0424af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5fd6d602_1e80_4200_a4e7_86fc7303a207() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ed793831_560c_47ff_8b5c_d644581d76e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6b8c380b_6ab4_4863_9012_8a5e02946711() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_7d487dcf_8861_4a4d_8c89_950f5929a6b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_46318ffc_e207_4052_8175_4accf7d38b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1448abc6_740b_4016_95b3_9329fee0232f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_aec2d1d5_c090_41f3_9369_dce8eea327a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_11ae9eff_9488_4c4f_8ab3_ea17446c6c06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5650e95c_4c05_4860_aed8_463b30cf1704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2c9bfbde_a620_4033_be8f_894bdab1251d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_b5eac88f_04bf_4790_a47d_783d8b8fa57e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a8b27cb4_913d_4550_9fc2_dabfb1794d49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_bebbd571_6cdf_414e_afde_07944c8e8872() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b6eb9ed3_befa_4491_b84f_5c7a1ffbaeea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8477295f_5e47_4367_8f2f_919d8d8af3e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2f646bcd_9fb3_4093_9049_f1740b605420() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4f291299_10ae_4226_a0a9_79aa6f55427d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5bee1966_5e60_47e0_848a_7905dd591c7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d752727a_8cf0_4a59_a15a_401ab6b1d2e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8ebe2756_2aab_4658_b8cb_e32542a30794() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f6aff357_476e_495f_9fd0_216cdbb2ff04() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c4c43c80_4501_42cd_8d92_8a51c86165d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9132f087_5382_4cc7_97ff_06afec628fdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_36411eac_8d22_4efd_b273_d6d4a2142894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ea18208d_c1b5_4aed_9674_12f9e5cd9f97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4dd952ee_ba10_4cfe_82dc_320df8758a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f53f1f82_3808_482e_9a9d_6fbeccdb1b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d3f58846_9478_4ae3_8c80_4d1adb50b902() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_cfb96e3d_9380_44a5_a634_fc57fe9cc86b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a71540fc_8aee_45c6_b28c_d7200ba0726e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0334db5e_68c7_45f4_833f_915b32c5a2cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_845c2314_8a5a_4602_b967_0eb3df844a97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_eba31641_f2a9_4fb3_b226_e858090fc23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b5bd1b2c_706b_482b_9a5e_b4d9e37820e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_811209e7_7587_44e4_983a_6b833511fd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9985de5a_70cd_449b_9925_ad41d39c710e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bb58dc4a_3ea9_4bb7_82be_6d42ceded1fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_69a157a0_054f_4246_81db_16a8bf7fb65d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_155fd60a_fa44_486f_acb2_3f0fa86927b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5fcfbb0a_0926_4f1a_b57a_b7425492b4a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_156cea86_b9d2_4504_a45b_f770e5fbdb2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b92bddc5_934f_474b_a9d0_5b440fef2ef3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_00cd38b2_1287_4399_b525_a6af4e962fda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_83e55aae_48a2_4960_a1fe_3f31ef6ce15c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1c330a38_c064_437a_9d2d_fae5b1a54d20() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b4f0449d_e172_43ca_9b62_57a1562dc209() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a6b2d822_4074_47c8_aa46_e5751e6e5367() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1e71e19d_a256_47c3_b974_ee3ac3567a5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d7c34757_8473_44d0_a34a_f37cfdfa3249() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9a231d2b_3db7_44b4_9db3_39aea15512a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4b600242_6994_4929_a1dc_bf035db62a40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1d921567_2c1e_4fcb_b868_e9c06dadd7d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_78bc5979_601e_44e0_974a_8952a5666073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e47b7f3d_d9c0_4c7f_b196_8da79b59c672() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b6ec3c5a_06d4_4c6b_b3fd_e6434ed8bb85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_74dcd886_20a4_4550_8ad4_e26ac5a58a13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7931051c_bbf0_437e_8703_b16041fb6779() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_afecc466_176f_4604_bc47_957303a40ac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ce9b2eec_cbd0_43b9_a03c_6416dcc5337c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c8c9c676_7299_4bfa_8850_f5cb00818cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_8956b178_bf58_4406_a81e_e80c907655dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8c42b47a_23e2_42ef_9c69_038e6a3b53a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d19d2d4e_e813_4a73_8479_490843bd8040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9d5c132b_232a_453e_b585_e1d40790796f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_510e945e_d796_43c2_9430_1f65362467c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_870dc8cb_92ad_4955_b58e_76b9bc87fde4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bc4ab49b_0601_4e21_a880_22c0a3e50ce5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_315c8bf0_9613_4733_8be6_15041013c286() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ff72de95_9fd1_4e28_8090_e5ec991916a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_49e92902_ecb4_4501_a13d_716256d259ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f68925d3_3ef0_41aa_99c9_0e8d528e304b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d5002e31_70a0_4c89_a0fb_e76360923f90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7893d1de_f8b9_4be2_b04b_fb73201c6589() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_26048655_72ce_41be_8b15_e4bf348433f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f737ed78_86a5_44ba_b19e_d589cefb9c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_22a70d35_95a4_43ef_8255_3f4b3f5177a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b4a7563d_dcaa_4eb0_b88f_a806a24550cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3cdc3c22_9d91_436c_8204_f90abb946706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_090c8983_9999_4240_a204_da923c24fe08() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8c5306fe_2dea_49ea_8678_d65320e5c962() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_27e5a8e7_ce52_4b47_a536_2cd363b7b4e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_fdd9391c_8452_4126_a7df_3efb3cfe47ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3b1605a3_afac_4d4b_82a1_9599aeca969d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_84482b97_4d0e_4389_801a_8a8e499f9727() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a7de2efd_f9cf_4d51_a818_89fb23085a02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_056214c9_5734_48fa_a170_524e37000e85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_619c2930_9f66_4e7f_802f_9485975be402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f011d5fb_aa07_48b0_9cd1_af0ecca41dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e4e30e93_58be_48f2_8cbd_56e20d4d6d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6d3ae927_3c41_427e_bc4a_7b85ef2e4e28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_dc4ffef6_6e09_43ba_bf12_6ad5ff9f836b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b26e001e_3f06_40ca_ad6d_3f99d5d06f12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9a0e23ea_85c8_4de4_bef1_c7102c099819() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_054160e4_733b_4d82_b02d_ffafbe56fead() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_203274bb_247f_4451_b6f7_1a71272cb6bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4d06e8ae_2975_4678_ad61_023900ca95ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2cfc49c3_51e2_49bb_aaab_bf833ce50b23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f46f00d6_c59e_4722_a85b_e4e2c303a86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a9f7d01a_1de8_4666_98f4_69a4a3e361a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_845db240_3cfb_4ebc_a1dd_96d1da2c2092() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0ebc817b_57d3_49fe_af5b_a7900a58a72f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7f9d96ae_0301_4b47_a5d7_ea8993ab4d66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4e8f30df_752f_439e_befa_a6c0338f0687() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_77e8c0f4_b3cb_4948_b366_fe0755a687dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_18971e1d_253f_4b42_ae7f_7ce2da6729a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5db123d0_0ce8_4374_bc32_0656a7e31b3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a874b368_55f5_4a34_9ab2_37edc2df2cae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_464a672b_c21e_4ed6_a515_d9baf612c388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e239046b_b99d_471d_a061_d255e9bd898a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7316e54e_18c8_4569_97d5_f86b3e9a746c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8fe2c646_baca_40ee_b783_3215ebe4bb2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_39273f84_d873_4ea9_ab3a_bf51f2424a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c55f0855_ca3d_4fb4_b02c_61fede0f6343() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f7973b05_5fb6_4dc4_84db_f24849dd5f7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_24ff4838_1e03_43ab_93ba_1df273cfdd76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_88350769_108f_46a3_abc8_dbc742ddc1ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e87da859_b909_49eb_977c_ab78f603d86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f418603a_7d00_4a59_bfb0_78027c4663ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c9c3c734_e4f8_4050_ab04_b065c2882c53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d7ae68b0_5b97_44a0_b543_98ff72eb9a35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4b39de92_0f70_4b28_81e3_04208d98c462() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6604279a_b9ff_4735_869c_33117449833d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b049245f_4edc_428d_bc4f_04b023368bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_617352a9_fce3_490c_985d_1f0a08e300bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_679e86e7_cdad_4ea7_960d_bc14440f3a2e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7c7378ae_5efb_41fe_ad56_867f8c7eaaee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9074651c_72fb_47e8_a9f8_d7b8e007a409() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6bef330b_f453_4e05_89ea_5959bc908fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c31c2038_a6ed_4314_b077_360f57631e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e604462b_37a5_4a46_8d0b_17e74c6d6a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0023d758_b10c_435e_b4e6_69abe5a943f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_884e2140_a6ae_44c0_ad21_a911cc587620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8f6a9f67_0bce_4651_9a02_a7a05fc53beb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0fddb5c9_edd7_43fd_8e75_ade95fac77c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_67d8d6bc_24fd_4303_9958_5e3913700460() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_56c16a8e_e993_4c14_aac5_69b760be9be7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b049245f_4edc_428d_bc4f_04b023368bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c75d976e_5def_435c_8e3f_264853f81a3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_99cddae5_d688_4272_bd5f_b84f2fa15b10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bb5eb97c_de5a_4499_800e_5b732050afc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_dda4348e_a2ae_4938_abfd_05e21beae926() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_537221d0_40fa_4626_9eb1_170d54cb45dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_324f53d1_14c1_421e_bd3e_2c18f06209ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_08f041d9_5483_4302_a80a_e3854c1c4626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_40423214_22cd_4a56_8856_176719d29f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_18aaebe0_36ab_4093_880a_be0a748ad44a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_41f96a3f_f215_4bad_b483_9d3d75e1db12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_63c680eb_f510_4feb_9380_bbd9133ea758() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ec77f40f_1415_4266_aa7c_fe4f3b257060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_29208566_8a35_4d31_85c8_579105008ec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_ca54dc58_c04a_4398_8274_38605870fca3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2f4c8238_cefd_4d65_b5a1_5b32aaa090a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_615502aa_230b_4370_ab92_dca0ccaa22a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_482c2051_7c8b_4dd8_ad57_e59f6fd00cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cfb99399_033c_460c_bdba_ee419269a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_fdd9391c_8452_4126_a7df_3efb3cfe47ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_95c51af9_65a3_4bb8_9b7f_298c72d00553() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f0026b5b_9739_4c14_9a9c_c53b21826de4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_615502aa_230b_4370_ab92_dca0ccaa22a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a7182d1e_5e42_4c7b_8322_adeea4fca112() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4d592097_c7d4_4da8_b004_a26b4cca3e61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_88e7fb96_7d57_4ada_9ede_fed19f3273e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_944d49a8_02b1_48a1_9b18_fe2cc022ed53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bbe8cdb4_d38b_45d6_aef8_f3f9f0dd1682() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_808de8fe_3f23_4443_ac4d_fc3105e94f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0aab9ae5_d51d_4a40_adf1_5bae976eb1f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8b87fe58_f430_4a0c_b1cd_de5c19751dd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_14a3440c_ef0c_4739_afaf_ab27cea7e73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_488d8253_66e0_4b27_927c_cea259b28db8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_46318ffc_e207_4052_8175_4accf7d38b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1109a239_5947_4f39_9bd4_c79f0f72a55c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b5bd1b2c_706b_482b_9a5e_b4d9e37820e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8c5306fe_2dea_49ea_8678_d65320e5c962() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c809e6b5_a8f6_44c3_9cac_b7f83ca9abd2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4d06e8ae_2975_4678_ad61_023900ca95ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_35249559_9326_4c96_bd1a_8a1c9f7308e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ba21a753_2eb6_40ee_a7a1_3f4d9b3b0680() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ca388a8e_5846_462c_bbf9_566b48f6978b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3a7662c9_8b17_4ba8_9498_2dd824635c33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_edab01a6_caf4_4cdf_865a_a5655f0c6a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4a04f9ee_75c4_4b64_b56d_9b7e1002498c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7b7f1feb_6142_40ca_9c4d_348de7690eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_2bf58553_9e53_41ed_82c7_a0f6752cfeec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_79553e77_5385_4650_a551_3c71ada6ed98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3bbf6a67_5d8a_4a4f_9c0c_03318d2b1747() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0334db5e_68c7_45f4_833f_915b32c5a2cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e4501375_af7b_4f9d_a919_73e4665ba5c6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b4f5c254_a77d_404a_96ad_30e323a7a9bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5fddd0a1_495e_45fc_9b38_1924b33f1e95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_77597bec_75ef_451d_ab1d_94d18ad9332a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0bde64da_3232_4c64_b790_49751acaeee7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_960147ca_18d7_4f8e_96fe_f9301d0f7cc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f3850f03_165e_4d66_8a95_419b3033d801() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_231c0056_4985_4a15_908e_ad76858eee3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_231c0056_4985_4a15_908e_ad76858eee3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_97d592e7_754b_45e6_b7a0_21d4e1b2de17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e9ff98b8_ec05_4350_86a9_fa13aa65f5d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f3801894_494c_4cf3_b4ed_18ef7fbce130() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6e182204_2325_4779_a1b6_6d9688e3aa13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bb58dc4a_3ea9_4bb7_82be_6d42ceded1fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6b100c66_d328_45b8_99bb_50c341be8b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9398b375_3c43_4d45_aa4e_ebfb0533e9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e3bdd459_83e7_41a9_82c6_bac51deca864() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b4f0449d_e172_43ca_9b62_57a1562dc209() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_decd4ff8_1f22_48ab_8226_55dbef62ec31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d1d59cad_5211_4481_8518_f1b0ea15503b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3b1605a3_afac_4d4b_82a1_9599aeca969d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1c330a38_c064_437a_9d2d_fae5b1a54d20() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c54a7d11_55ab_4d97_8ae4_43186b469c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6750f0c6_56eb_4d80_88a8_bcd3c806e46b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0023d758_b10c_435e_b4e6_69abe5a943f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_17e3161e_e269_41c8_a881_e19c78a26c63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_135a55cd_3659_4de7_bf7b_a477461f0f11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b3d6d61e_3a30_4377_98ac_4f758fc3f647() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7f1539f7_71c2_4cad_aacb_052deb2bb33f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1941b723_c509_4bda_8c44_7792c5e80745() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6d8cebe7_7632_43f1_97fe_21483cf4fa57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_07a5938c_c62f_4fd7_9904_33aea4c86099() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2b12da1c_6c29_439d_b2eb_8c73fcdb509a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_408775cd_ec84_4fdd_bb73_bf3479985454() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_134aa7a9_5908_4638_a8b8_9d09635541d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9a094b3f_0ca4_4f27_9f33_a0f1134dadf9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_dc4ffef6_6e09_43ba_bf12_6ad5ff9f836b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2cfc49c3_51e2_49bb_aaab_bf833ce50b23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_47692e4a_b11e_4af4_83c4_b4bed57de911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_07753571_1f05_4f43_b77c_38ba10cb2748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_57b9149d_1dd2_43bc_ae0e_81232d1e976a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_776f4498_57d5_4a8e_9db1_0add0ec8cfc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_558df44c_ad2b_40db_b182_bff76277000e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e1c06184_3b1e_422d_9a45_ed7eb6dd6f86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_28c13986_079d_49b1_ba95_aed6e8abe581() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_373054b4_59d4_45e7_ab31_4282cbad3770() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8b3784a2_ec2e_4c7f_bc8c_c4c517f82184() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3047c64b_5602_4c47_9ba2_2f57df36b75a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6bfd7e19_5fa2_40b6_b628_3e090b7291f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_dc1ffd2d_9073_4e07_8b58_fd9021a3b42e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e5b72dcd_2315_4aa2_ad7f_5f27d2d2783e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0f31f959_6a22_483e_82a3_07a9c9d8c5b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_732dac41_ebf7_4233_afe0_aa381bdefa8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e2c98959_eeb5_4f8c_8ccb_ff214b0120b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d8e61d3e_435f_4f57_8ef5_749920cb68b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d5fc8054_b07e_4aee_ac45_610361a77c52() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ac01f334_489e_49bc_894a_fa25edd8ef3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_532a10b0_cec4_4763_ac4a_b261b1b62b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_eba31641_f2a9_4fb3_b226_e858090fc23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c709500a_cdcc_4977_9d86_ac6ac578029f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5ac7988e_ef2e_4978_a509_01fc3c287ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_536861b4_159b_4b4a_9fc3_d4e421e41447() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e5fec7d7_46df_4575_a8e6_ce6e714d88ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e87da859_b909_49eb_977c_ab78f603d86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_290ee94d_4596_48f9_bc3e_222d6724d6dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bb16400d_1e72_4b9a_92cb_914e13c7cca6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5bee1966_5e60_47e0_848a_7905dd591c7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4cdd735b_28eb_4345_903d_3595b2594046() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a73b42f5_1f0e_4cb6_98fc_fd0115d6743c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_39851f32_c6b5_41ac_83cd_eda434a3d443() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e1c06184_3b1e_422d_9a45_ed7eb6dd6f86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_bad24fb8_8769_4537_b52d_fe680bef5384() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b4f0449d_e172_43ca_9b62_57a1562dc209() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_abadeee0_762d_46d9_97cd_13a55432c0da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8d250a84_2ce7_47c4_8504_836b864ce35f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4a65e8db_24d8_47a6_9254_5704eb785fa8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4ec961e0_cc20_4405_8045_6e44d80b007c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_995480a9_1d20_4f31_ae58_b784cde4a6ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_edab01a6_caf4_4cdf_865a_a5655f0c6a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d1d59cad_5211_4481_8518_f1b0ea15503b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2326342f_d981_4249_8917_81c6971c40e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ed2b3511_5803_472d_9001_33c01a509ca4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_852b511b_436a_4022_a581_c8361f358e31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f78afa5b_240c_4d0d_ba22_fec3bcef6036() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c7056859_41e8_4ecc_8d29_d2c5947eb16e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_04111dba_38a1_409c_90ce_ccf200b12b2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_705da8d9_fe0a_4ab3_ac70_4ca8b5b7dbab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e4df0806_8004_409d_8522_e47c7de018cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0dc8277e_e4ae_41cb_96e5_4ee26d70ceba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f09b3463_27a7_4c6d_8724_c5a3f2e32cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a0fb3330_ea61_4dff_a2b0_14444981b831() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_032900fb_f504_4665_b0c9_e852c83ff25a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f157031d_a927_418c_9801_2f717688f827() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_12a59985_80fb_4acf_b7c4_39a45040d27c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4b647afc_5fa7_4fa7_9f02_e02d9db892c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3a57ec2f_ce0a_4e8d_9069_630d327567d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ea18208d_c1b5_4aed_9674_12f9e5cd9f97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_893fb587_d247_4eb1_b160_e4f546a7b6b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e0f38c4b_1e4c_4e0b_a062_729f36235388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e19eae6b_dc78_45bd_95f6_86bbbd7ad5ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6ff062de_82ae_4c73_b81c_45fea18db66d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_dc76ee2e_a868_4043_bdaf_27848cd83e13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1c892525_7960_4643_b088_705e00262007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e2c98959_eeb5_4f8c_8ccb_ff214b0120b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_59f424cb_6bd8_4840_b9f0_f48466ba8d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_762081c7_71ba_4857_bddd_1ab5607e3459() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5fde443b_64b9_4b2a_a610_69f3a6ad2006() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5ca675bc_dfe4_4eaf_b849_21d959b7e353() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3df53c03_814a_4697_92f6_c7304fdbfd4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e4479473_9f59_4368_8f7e_0689d3c1a59c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8282fa9f_6971_4f0c_a8c3_eb8a39428eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_032900fb_f504_4665_b0c9_e852c83ff25a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_df391b51_f84c_48ab_939e_a2a42517d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c05ed265_5543_442d_b3dc_4f9bf16e99db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c0829858_1dbb_4441_992c_d4c2d7eba871() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8ac97d62_10ef_48e6_b151_60ae21058c94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_cbbb7f67_ae7c_43ce_9dfd_98814fee75fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bbec2e79_00ba_487a_982b_36f6982072c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5ca675bc_dfe4_4eaf_b849_21d959b7e353() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f2d8dbbb_8c31_4de0_afd2_508d6eabcaea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_551a37ff_c5b6_4662_877d_7b32232124b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4bf58963_ef25_490f_b4b5_f4cbacd3b2be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d93a6b7e_025f_4c89_b301_8b5c79387a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_75905ef1_177f_4199_bb8c_36561676f6dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0ddbdfcd_5123_43d4_8552_0d337030663f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f5e7dfd1_30df_4e97_a6bf_b2175368a5c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a8f4c73a_8a76_452f_98f7_a3972a1b6d83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ae8d7ceb_394e_4552_a3b8_894ca5c42846() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cec70e86_8d2a_4ca3_8317_68bfbb56894c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_df968c45_8ec5_4db6_8e54_8011f3e72b2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_bdd8f061_b905_41e1_bee5_b84a78a7a4c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_94dfb269_b10a_4cde_b59d_30ccaa9c96d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f33ab305_b833_4d3b_9ea5_90b99987262f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_efd98c7c_3d2b_4777_927a_dd6f3703fa83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ad3d53d3_b4ed_468b_b210_cec7229d81f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_750e5d03_578a_4863_8d10_fc3283079309() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_852dd5bf_138b_4318_8f5f_a0050659e3f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f90f85ac_4a26_4b8a_9e0e_830f6046881f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c1fa22c4_12d7_41a8_bdd5_32301d9bc213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_fc732082_6d3d_4d34_911d_e46127fe2656() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_eba31641_f2a9_4fb3_b226_e858090fc23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a59e8992_85cf_4c11_b7bf_a0f2e37b64b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_059c9122_c206_4480_b305_52ad4d1e568a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7c7378ae_5efb_41fe_ad56_867f8c7eaaee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6c2c32d0_efd0_4484_b5ef_05bf47d7f39f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_135cf8e3_3710_47a1_982e_98f4205d55e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_90b42e37_26d5_45ac_9b7b_d83727a37091() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f6922215_5c0c_4407_9a6a_07f78df613a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0a818c23_a0e1_48d1_a8a2_ff467c2fae95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_46bb6df5_0f1f_454e_95a2_ad24a04694d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_88b7c0bd_96fd_49fb_8950_54bbdbfb3955() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6d911c03_a151_487b_985d_81055a9cd145() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_308fad1b_0112_4514_9871_545732d0e5d0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ee275eae_8c09_47f0_8b88_f147e8c07f6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0c62e169_fe74_45f5_bceb_b815778458ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_783ccf5c_b82a_4cea_832a_615ce2452094() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_efd98c7c_3d2b_4777_927a_dd6f3703fa83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_adccc442_ad7d_4c64_a5b5_23bacc7577f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d16910d0_fe53_4907_8be3_c2764872ad70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_007207d0_da65_4df0_b3f9_b90ed930723b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_488d8253_66e0_4b27_927c_cea259b28db8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d942031e_53f6_44ac_a05c_ae9c372e5645() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9c218489_d418_4473_b2c5_73e2fad8abb8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cd4873ca_8f3f_42ae_b629_998788034f6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a3cf341a_a9a6_4de3_b69e_38d274b14fc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_309b990f_f638_4d49_9d57_16288a71eea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_14241fd2_b741_484f_92f6_07dd53880c1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5202199d_1983_4caa_9288_6d7bf28ede84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e95d1062_4578_4eaa_b67f_97442ed3ffc2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ca74aad6_4a0c_476d_93ba_6190ac143a73() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_34590fc7_34f0_44e3_825f_4b03affaa332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_375b0a74_743c_43a4_b056_b30ec26c0833() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_93b49842_3394_495a_9afc_7e1e0a127baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_41d5bb15_7ac2_42ff_8a5e_56b309208350() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_47c13555_7891_42e5_b3a9_d0d75686e049() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b8ccbd73_7acb_415f_abde_3e2e9a23dbdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b837ba88_0c9a_4a4c_abe9_d3955d9f7670() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cec70e86_8d2a_4ca3_8317_68bfbb56894c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_53d71208_f00c_4142_aeb8_38afa4891b93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_10676a95_61a2_44fe_9314_963600d4d8dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4992d0e2_4483_4d63_bee6_c61f48caa9ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bf110fd2_b7c9_402d_bdaa_c8fb9bb22110() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_5fde443b_64b9_4b2a_a610_69f3a6ad2006() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d8e61d3e_435f_4f57_8ef5_749920cb68b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_844acbbe_17c1_47cc_be1c_c9d2a43bd9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b36b6753_755d_47cd_b472_b6d49c67b166() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3df53c03_814a_4697_92f6_c7304fdbfd4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b9fa3c39_7a59_49b5_8b5c_bef3affacb92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b837ba88_0c9a_4a4c_abe9_d3955d9f7670() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3c06aabf_813d_4702_a795_fdb2eaec82fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_78101e8c_7184_4c83_ae62_408b34b43f72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a6bafd0a_b479_4f71_b431_d5703e3e50b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7b7f1feb_6142_40ca_9c4d_348de7690eb7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3fffa344_a071_4344_87e1_deb6fc3b73df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4111e63b_6ab7_4ea8_abc1_8768264f749c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_74ef5886_3db2_4cda_87e3_c397828d6613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_b7b82154_ea6a_4b8b_9ea8_085ca56b9fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a6b2d822_4074_47c8_aa46_e5751e6e5367() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e99d933e_dbfc_4186_a5fb_d01a48bbfd13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_89f2f8ac_2eb2_476a_bfb1_32d17ca1de85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_14382c43_b9b1_44aa_92fd_e2d8bf052f33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5fd6d602_1e80_4200_a4e7_86fc7303a207() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_23cc3949_d600_4010_9257_8e0601397137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fff5fc4a_ea2e_4c8a_9180_da8cfb7061e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_78ef4f19_90ae_4f06_b94a_093eb38b74d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8d9d167f_c1f4_4d6b_893b_36fe125a641a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bebbd571_6cdf_414e_afde_07944c8e8872() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_67324c69_fefb_4852_96ec_87f2fafb1767() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_fac00f35_8dc7_4ea8_bc00_916d4f0b32ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5cb9611d_55aa_43d1_9424_7185c7d6982e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6f259ef0_82c8_4a3d_9a54_e0492f3fd1f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f16b00ec_60da_4bdc_b1be_dd86df39e52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b775ffbb_eea3_4c89_9665_c3fdfef72498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_adf9b152_0bc6_4e5b_ab5f_660cc04fe710() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_09fe211c_1033_4315_b8d0_8f0bb870ed27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_acdbbf25_0f40_444c_b8c9_e695392d82f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0aab9ae5_d51d_4a40_adf1_5bae976eb1f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5ca675bc_dfe4_4eaf_b849_21d959b7e353() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a613100e_763a_4706_9897_f2baebe010d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_752d2c97_2c2b_4068_90ff_1746d41eaef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4ebed85b_b770_44a8_a578_a1760250fb8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_af007427_34b4_4193_b0fd_5e222e1aa421() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d09ad164_ccf1_4fd7_b13f_24a7e22d60a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ea6d834e_c25f_4d0d_9560_c6399c59d010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a5d8b8f8_5ab8_460b_8d9c_266645d921c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_90b42e37_26d5_45ac_9b7b_d83727a37091() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2fbb9e47_b91e_475d_9107_8dfe0e24d669() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2160d417_0be3_419b_975a_65b7832bf5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_62ce21d5_1a84_42a1_a284_c08dbd5bf52d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bdd52173_74d3_4d93_9848_11feebbd3499() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_44dfa3b4_1000_4150_885d_eb825f5a0047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e71a78d9_6746_41f7_9a76_2121770e42ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_09043cdf_5731_4335_a8d1_42c5721a48d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ba21a753_2eb6_40ee_a7a1_3f4d9b3b0680() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5249e79b_44fc_4cdf_8a2b_7266b9cd2b5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0ad501e3_8fc8_47c6_8112_2959fdfb28e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7316e54e_18c8_4569_97d5_f86b3e9a746c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f8dab4a4_4413_4629_b71c_3c17f03e127d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a54c37a3_00d6_400e_bb6a_c05e4a89cb4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b7cf93b8_c866_45cf_b648_e798274d5a1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3df53c03_814a_4697_92f6_c7304fdbfd4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4dd952ee_ba10_4cfe_82dc_320df8758a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_7a45af8a_4fdd_4244_83aa_254d48ff36bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5b636626_176f_494c_960c_2aeec6e8c9d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c64d6cc5_dfba_408f_9d79_56addd2b5667() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f90f85ac_4a26_4b8a_9e0e_830f6046881f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_eba31641_f2a9_4fb3_b226_e858090fc23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3fffa344_a071_4344_87e1_deb6fc3b73df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ccb38191_4b54_4e23_ba4f_e0902b1bacf0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f1fb57c2_bf89_4651_8957_a0100a5f746a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_95c51af9_65a3_4bb8_9b7f_298c72d00553() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7af265cb_4bae_4218_b9b9_4570657cc0f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_80f245bd_538e_4a11_aa4f_c6dff001da8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_448425d9_9f33_4f11_be77_4f0f53cd19e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2a1c767b_cfcf_493d_8bd7_c0caafb2d1de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_15166ec6_8047_4c78_9d7f_2afda2687e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_dba89110_4c34_43ef_be35_1eafbb821cf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_4295d8a2_a0a3_4d94_9c3b_d683fc28bc06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_fd3f4bcb_26ce_4086_8a59_09d8d16906ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_397c5131_d44c_421d_82ce_41f073d67a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_04c7acf2_4bd4_47e3_8ea5_b0d4a089fb4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_09043cdf_5731_4335_a8d1_42c5721a48d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_26f33b0f_0228_4338_999a_5195e138199a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c1a0ad1d_7aaa_4a83_8950_9607546289db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7085ef3b_1801_41d5_900d_0bf5c3c2e50d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_74208003_764a_4b0b_9d1f_f89dcc0abb01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_bfd55b99_f54a_442f_99ed_b97875dcaf7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b6643769_fd22_4144_9d7c_f2590a568f09() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_956eaebc_77ff_42a5_a59b_6631b95feec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f5a83bc0_c8ab_494a_82ba_f6673deeddaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b09bb88c_cb68_4b9e_989b_83eda6dba654() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_054160e4_733b_4d82_b02d_ffafbe56fead() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d5002e31_70a0_4c89_a0fb_e76360923f90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_290ee94d_4596_48f9_bc3e_222d6724d6dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_46bc51d8_135d_4220_96ab_0778f9f610e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ba997a85_964e_4fd8_a8c5_7a81e85f63b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_bb16400d_1e72_4b9a_92cb_914e13c7cca6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_19395eaa_de8e_4028_9cf9_1881c6ae5082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0e923cac_426f_4cdd_b43c_ef2782dccbe2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3bd85280_801d_4d3b_bc72_9ab2a5b91468() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4cda2c99_29fa_4aba_ba14_1ebf7fe59969() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_944d49a8_02b1_48a1_9b18_fe2cc022ed53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1a9bb200_f515_4049_8ad1_1111dd94f9b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b932c68f_e1fd_4b0f_9a20_7caf81ddc9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_8125673a_5b91_46a8_9550_f388b11e697f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9e19197e_2cab_4014_8d71_429026303d38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a838f46b_be21_4a32_9406_eac35cee65bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_617352a9_fce3_490c_985d_1f0a08e300bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_035cdcf6_122f_4479_9cdf_1ff527286b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a253b76f_2c77_4ea3_bf15_25a59f12c1aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d4d6a753_107e_41cf_88eb_bc51ef9d22d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e42accfa_eb9c_4b4e_8cbf_9c1d18cc8ff0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6c6cb5b7_4907_4516_92ad_7b29768c1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_763df214_be9c_4a01_8f98_198266809fbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bb1390e5_50eb_47a3_ba6d_122f68a75129() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c55f0855_ca3d_4fb4_b02c_61fede0f6343() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_14afa445_7117_458d_b311_990d6e6ae756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f68925d3_3ef0_41aa_99c9_0e8d528e304b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5c178846_f02c_4303_965d_5e5ccb02039d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_6d33978c_32d9_4732_bceb_19935664b243() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_20913b8f_584b_475a_ade3_4912547d1bc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7085ef3b_1801_41d5_900d_0bf5c3c2e50d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2bd3b0c3_534d_4d43_b13f_149f091df9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e34c92e6_6ca6_4954_9eea_707666ef2dbd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_72ee2213_1804_4af5_84e1_f9e5efa5eb71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fac00f35_8dc7_4ea8_bc00_916d4f0b32ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f9b1b82d_3349_465e_bb61_9f4a578abe2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_25835e55_3c19_4b34_bf9a_f4007eb48f00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_8b4bae11_cf31_405a_9a74_930284c3a3a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f2f4133d_dff7_4721_b106_ab7748dd54e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_79749e93_7379_4d7d_974a_c78d5d7968f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_152fdaed_1509_445f_9780_341493f5aaab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7ae560bf_409f_4d40_b570_544b2fcccab5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a9f2e834_1d31_4b6b_9fce_3a3a62ca10a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6ae33b21_b4e9_4c03_88d6_35d7cc8bde26() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_9621e535_45be_44bc_baa0_5566b7f86341() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b9de911b_d08b_4d3c_b914_c922f28110d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d7b045da_d9f7_4e91_953d_af3a33e6dab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5b636626_176f_494c_960c_2aeec6e8c9d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9d5c132b_232a_453e_b585_e1d40790796f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_86ab6a0f_99eb_43e5_8c2b_807e948dfd60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_46350b48_041c_45aa_99a8_c5095b2663de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_76075cc7_97b4_4227_a992_043d3277fbaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_619c2930_9f66_4e7f_802f_9485975be402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b173982c_f486_47d2_b1db_a0dc36e0f55f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_951ec70e_0267_433a_8343_2b6952f611aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_180d2dd0_f405_442e_967f_a91c3a14973e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_373054b4_59d4_45e7_ab31_4282cbad3770() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_06980093_e894_402b_93fb_cbfc432852d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5b73bc30_75ff_4abb_84f9_15d5cbb87cc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6604279a_b9ff_4735_869c_33117449833d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_7647c534_b93e_4316_98db_fd4e1f4cdc5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_af0a704a_8ee0_4d41_b01a_1749cdd59b07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_021770b4_737b_4b4c_9345_16c0f969cf0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_35249559_9326_4c96_bd1a_8a1c9f7308e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_615502aa_230b_4370_ab92_dca0ccaa22a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c07a70eb_a070_46f6_a707_8e66cdc571fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_62ce21d5_1a84_42a1_a284_c08dbd5bf52d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9d437de3_0b03_4e8f_a6bf_72f0a5410178() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_3bd85280_801d_4d3b_bc72_9ab2a5b91468() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_34831057_edd8_454b_a62b_0cf101905b76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bdd52173_74d3_4d93_9848_11feebbd3499() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_26f33b0f_0228_4338_999a_5195e138199a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0956fdf9_6a1c_4977_878c_ff09e1d9164e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7d2d09de_ef3c_4564_87cb_895952dc1ea9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ffc16cc8_8243_422c_a40d_3542f913b077() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_199bfcdf_b38f_46ca_a1b0_df0831511058() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c1a0ad1d_7aaa_4a83_8950_9607546289db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_14382c43_b9b1_44aa_92fd_e2d8bf052f33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9a3637ec_7610_422e_b27d_6dcb5106c849() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7841591a_fd9f_4dea_9928_c5b797e1f5ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_dc0b4f95_5ec2_4c8e_a94e_348f9b206903() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f2d8dbbb_8c31_4de0_afd2_508d6eabcaea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_86ada2b9_4bc5_4837_8bcb_373188b41272() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d942031e_53f6_44ac_a05c_ae9c372e5645() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_369e60a0_af82_4d0a_86f7_55ba600b1925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c55f0855_ca3d_4fb4_b02c_61fede0f6343() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_feaf1a9a_487b_444b_95fa_58ecf7988e96() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fa92a027_b08d_4816_b24a_587a47312117() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_56a7a0ce_dd25_4cb0_bc01_976423ea6f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_add2fe1e_8170_44ee_a299_c7889fff0c4f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f97be7f1_e384_46bb_b3a4_1637eeffc69a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_67dbce46_19d3_48ce_9b5b_7e3a27efdaf6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7d487dcf_8861_4a4d_8c89_950f5929a6b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9a7e3ef2_5199_4161_9432_fb2f3f0424af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8ed2ec77_296a_4e5c_84fe_99b5dd3e401b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5959b4a9_aecc_41dd_94e2_ac57b3fabf32() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c1fa22c4_12d7_41a8_bdd5_32301d9bc213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_98849b06_dc44_477d_8c0d_7285e8c5df02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c75d976e_5def_435c_8e3f_264853f81a3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_59be8ecb_cbec_412f_bf6a_8a7310faca29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8fd6496e_d983_41e8_86df_469abc9b15c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_889a9697_b401_441b_bb58_e8b190370501() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_8853697c_2baf_4864_9fdd_1241bf33f9d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1fcb1f5a_c441_4719_82e7_0721859068b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a57061f7_50ee_4e3f_aded_fb67c8a39d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b6ec3c5a_06d4_4c6b_b3fd_e6434ed8bb85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_bb5eb97c_de5a_4499_800e_5b732050afc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a56d4207_36db_4346_8e63_d05b27745931() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_619c2930_9f66_4e7f_802f_9485975be402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7252ce4e_6fae_4894_8acf_8ceac7dd73f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_1c9b4fc2_c722_46d8_9f90_fe9c263508d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c1ec123f_0f0e_4425_a81f_8ddae93d361c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e4a779bb_53b0_4792_94c7_dabea65d6c7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_efc4fdf5_01ab_462f_b789_f61b8656e61a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_47d3d8e4_edd8_48eb_b966_f7d9e3cc6c3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b6ec3c5a_06d4_4c6b_b3fd_e6434ed8bb85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f3fa43d3_3421_4156_a9d5_61cfe3ca7f82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_510e945e_d796_43c2_9430_1f65362467c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d4600a47_e600_4992_ba49_e27860e10083() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f33ab305_b833_4d3b_9ea5_90b99987262f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0aab9ae5_d51d_4a40_adf1_5bae976eb1f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_68620d02_503c_4145_a3b0_dcc0fc8fb911() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_43698697_0a05_4e0d_bcfb_cc6457f02f62() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_8b4bae11_cf31_405a_9a74_930284c3a3a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_585d3941_2f50_4e99_9798_4430b539b165() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_03b66409_b1a1_43f9_952d_5bcf82d63a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_173d6660_6406_4eae_914b_22d9f984852f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ff2367de_102f_406d_a914_389db5fd9535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d6ee4fe1_639f_48f6_a4fa_fda54f6aa5ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_9b53b0fc_c9e9_43ae_ac2b_bc740907cb24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f8625fff_7419_4fc6_940b_fe463cc08b05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_279d9e18_40ff_4fd3_9620_0d0b70e282bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_844acbbe_17c1_47cc_be1c_c9d2a43bd9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ce9d2271_283b_4be6_b84f_1faaed0e968f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_675402dc_b404_4354_a57b_80abff1eeb39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_060a2819_6e41_48ae_a317_f1a7ed7bb0f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a80d97ea_cd59_492e_8d36_fd1ca60f7071() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6c41eb87_1daa_4ab4_a24f_487effc9cf24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_72da67b9_087a_4858_9b2d_50c5d879dfa1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_0c01ea96_5a5c_4d38_af48_c8dac16ed3e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2832bdb7_d979_4ad0_a753_dbbb06825b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f03b5b1a_5f00_4ef0_83f0_c0012f7db61c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f84c022b_67de_49cd_9f6c_01bd5749895d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_298f69fb_8b14_42d4_a74e_58fb1dcde137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1e20ef2e_01d1_4164_a03a_1191929a3e30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_035cdcf6_122f_4479_9cdf_1ff527286b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f61f94e8_882f_4af0_938c_4748292a886d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_0520ea69_8105_4dec_b3de_77d6523cb5a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4690918e_c596_4405_80de_ef25cf0eb2b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2288e6ea_dc4d_4da4_9c8a_04b0df767c93() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7eaf6c04_d2e1_4efd_9cfe_71254ec5ffed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_8510befa_3411_4840_b134_d09162f3d1e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bfae48c2_ba42_4e1b_b136_6fc24e38fe11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_cb684d6c_f621_4afe_909f_916f5253ef33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_043eb383_4413_4c7d_86af_cb3e2fca439f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2ada1a99_15f7_4df0_8c77_30a4e124d98b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0cb6b031_c257_4df6_93be_8acbcf294a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_406fc22e_9088_4b3d_8395_ff1fda9be614() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_156f35f7_09d5_484a_ba08_b81f63161ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_930894ca_0454_48eb_a6b2_6ddf550fa4cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_224206a0_eedc_48fe_a6e5_f73e419ad183() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2fbb9e47_b91e_475d_9107_8dfe0e24d669() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_79749e93_7379_4d7d_974a_c78d5d7968f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4ec961e0_cc20_4405_8045_6e44d80b007c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b056b70f_34ab_48d7_9ea6_1fcb99d24484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2da6f0d6_9c61_456d_b0ce_eead74b5dfff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6a02e0b5_5b54_48f7_8a7f_1f09bcab15a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0efa0968_79a4_4a4f_a0a0_3d7aa2d589fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_45076c5d_ffb2_406e_9172_4db36107ef19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2b5e68d5_eaa8_4782_8fb3_35bf15e55564() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6703009e_7a8a_49d2_88cc_7116394c5d17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_54fd500d_e788_4238_84cc_94b08e188792() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6a4a886f_6578_403c_93f1_84c4672eba25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_52a2a986_b76e_4783_9785_29d56cb7c452() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e34c92e6_6ca6_4954_9eea_707666ef2dbd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5fd6d602_1e80_4200_a4e7_86fc7303a207() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fc732082_6d3d_4d34_911d_e46127fe2656() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_0eb6165f_3f9e_4c5f_9a22_b6504446f5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b056b70f_34ab_48d7_9ea6_1fcb99d24484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b4772359_1078_4888_ba83_d1f253b1f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_889a9697_b401_441b_bb58_e8b190370501() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1cd7c96e_afbb_4965_8e60_426f80f4803f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_65fb5930_1bf5_4bed_9793_448cb7212c99() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f2f4133d_dff7_4721_b106_ab7748dd54e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_4a04f9ee_75c4_4b64_b56d_9b7e1002498c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b7bb9021_ea67_41b6_8ac1_d3b40c0298ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_26ec5711_28da_486c_9c50_219ff7cc0450() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0b062058_684f_470e_a7b0_09f59c2ff93f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_633fe966_5fb5_4f48_a10c_dcfaf830ec38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_304e93fc_d27b_47d3_9be4_ff609e508c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_af0a704a_8ee0_4d41_b01a_1749cdd59b07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c4b517fc_a496_41cb_b425_a49f07235a41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_491b3d0c_2fb4_47bd_8ba3_1136df96358a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_849103f7_c9fe_416d_8af4_85c87ac0c72b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5249e79b_44fc_4cdf_8a2b_7266b9cd2b5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_cafca234_eb5f_4fec_ba97_8d8b6b412105() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6d33978c_32d9_4732_bceb_19935664b243() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7475da91_311a_4edd_b72b_c13836bcf6d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d8bc92a3_48e3_43a6_8813_89cc9142c4b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fbff4394_6578_49c9_a71a_808c42b4d5a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7316e54e_18c8_4569_97d5_f86b3e9a746c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a28b75ba_c563_42c9_af0b_18171ca42691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c4c43c80_4501_42cd_8d92_8a51c86165d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1ec97dde_1b1e_468e_86fc_e46187dbf13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_821490fc_c276_470f_9f06_8e99a4a94168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_45076c5d_ffb2_406e_9172_4db36107ef19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2be3d1f5_1000_44ea_9e36_116a311519e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7eaf6c04_d2e1_4efd_9cfe_71254ec5ffed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d3c81b74_c8c1_4824_98c8_02a54d933723() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_82cabb35_66e8_4f2b_8c1e_82d132e56735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_68f98558_29eb_40c2_b40f_1323f09db799() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7a45af8a_4fdd_4244_83aa_254d48ff36bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f737ed78_86a5_44ba_b19e_d589cefb9c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e1c299fe_eafe_44c9_8af1_09c2ed8d2b8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_01ed684b_0d68_4bab_8c60_bbb1130462ab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_56c16a8e_e993_4c14_aac5_69b760be9be7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9bd0bdea_4e18_47be_a6f2_5a5c0aa7996d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e07f6abd_0585_448c_86ca_40c0f3c85407() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cff84526_a922_4736_8461_5af1ca488b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_930894ca_0454_48eb_a6b2_6ddf550fa4cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a77678ae_a790_43bd_b8fb_fa00a6124936() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bccc0175_c942_4b78_997c_62b1cd4a0dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_65fb5930_1bf5_4bed_9793_448cb7212c99() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c1595a06_7ab8_41d3_bd47_457e6634464b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b8a683b5_e72b_41b5_99d4_93f43d95668b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e42accfa_eb9c_4b4e_8cbf_9c1d18cc8ff0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_56a90d79_5604_42ce_a3c3_f951c4cae047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a9f7d01a_1de8_4666_98f4_69a4a3e361a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2f20bdf3_1752_444a_8b48_86396c4813ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_78bc5979_601e_44e0_974a_8952a5666073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5c7ad180_2915_41ab_9211_5c193597eccf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ff314a7b_a9dd_48f7_a54a_744551127b60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7eaf6c04_d2e1_4efd_9cfe_71254ec5ffed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_41f96a3f_f215_4bad_b483_9d3d75e1db12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6ae33b21_b4e9_4c03_88d6_35d7cc8bde26() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8adefca8_7981_4b19_8ddf_d7fb06fc31b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5e0521c3_1ceb_4dae_8922_84d5f762607e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_18ba48ca_ceb3_4418_864f_dace66c4deda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_223517f5_1076_4f41_8f8a_9f6fd2697bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_906fe9dd_b933_46f4_8427_fcf0c3c5f755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8ebe2756_2aab_4658_b8cb_e32542a30794() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0dc8277e_e4ae_41cb_96e5_4ee26d70ceba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_3a1ac45d_c83b_48e9_b74f_f627f79fac03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_9e294aae_5223_4484_bed5_b29af85b097b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_66c25bf0_227b_4ed3_806e_d20209521601() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5f11e901_f42f_43d3_883d_34cb7f4ce9f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_751fcce6_d6c8_4838_9740_908b59b0c0e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5c1473e0_c333_4d24_bb90_1046368e7fe1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1be72399_bc03_4d1f_8c12_27f584a3038f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_306b27fa_9986_44e6_9578_31d5f6a2bf9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5b24e576_a8c9_427f_aaee_09efa40e72dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8adefca8_7981_4b19_8ddf_d7fb06fc31b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_7fd33a47_9e3a_4436_bae1_764501d29429() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_712741bc_a35d_4d4e_8538_ed682dbb3c3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5a737877_dc8c_446a_b475_19eeae5e1e55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b837ba88_0c9a_4a4c_abe9_d3955d9f7670() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_411587a2_aa72_4864_a871_312abd9e3cba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_89c34b96_a14b_4af6_8a6e_789154576bc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e5b72dcd_2315_4aa2_ad7f_5f27d2d2783e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_134aa7a9_5908_4638_a8b8_9d09635541d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_71a0bbe1_b094_49eb_9640_6f2d6e2885c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a97c6473_18b7_4216_ab35_c37ada968197() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_bb1390e5_50eb_47a3_ba6d_122f68a75129() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d14ab80b_6c45_49d2_aa9a_533efa6d8cfb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_dc4ffef6_6e09_43ba_bf12_6ad5ff9f836b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4d3a4ecb_0e8e_4740_8875_796025637c5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_805a5a74_3365_4c17_832a_229b2fabaf5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_4b647afc_5fa7_4fa7_9f02_e02d9db892c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_224206a0_eedc_48fe_a6e5_f73e419ad183() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ddf3dcce_148c_4f7b_bc16_3ef2f33249e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8315c320_d54d_46e6_bbc8_56d3bd833794() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_af6bc2a4_7926_4038_921c_2144bce04a79() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_bfcff9f0_0d21_4402_af88_fa4ea3f9a78b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7316e54e_18c8_4569_97d5_f86b3e9a746c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e5b72dcd_2315_4aa2_ad7f_5f27d2d2783e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_de802b87_64e2_43ea_b38c_fc2cf55a75c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4657e7a6_48e8_478d_8167_92da1cc5bee6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f72a210d_3b4d_42c4_ac28_08482df780d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b92bddc5_934f_474b_a9d0_5b440fef2ef3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_daf44f99_9943_41e4_92b0_c249918a7d15() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_73b6983c_2543_402f_8bb8_23d927a2b607() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0a818c23_a0e1_48d1_a8a2_ff467c2fae95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_590d5623_4df0_4615_bcb3_cdf401d089fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c29e8ca6_1731_4c05_8780_194287bf2735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_cd63ab28_50e3_4f21_a06f_6382af40d566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bccc0175_c942_4b78_997c_62b1cd4a0dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_191a58ac_584a_427f_91be_79b5da0c542a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c9c3c734_e4f8_4050_ab04_b065c2882c53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1f9791dd_a7b1_4cd8_9bb9_1a854d99c7bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a690cd64_1da9_4938_944e_5a0db5566ef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_82687b28_053e_4cbb_bd8e_d466d0a0fb41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6720d446_3ff2_4541_8f9f_5edd17223cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_464a672b_c21e_4ed6_a515_d9baf612c388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0585d13e_2b19_44b3_859f_85a7730e49e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bc06718b_85fe_4c08_b043_59b704ce3d64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c809e6b5_a8f6_44c3_9cac_b7f83ca9abd2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6d3ae927_3c41_427e_bc4a_7b85ef2e4e28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4ec961e0_cc20_4405_8045_6e44d80b007c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2fb84282_b9c5_4fad_bdb8_11b9dd34aca2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2256e16d_a772_41ae_bb67_62c60530d634() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b6ee810a_ec23_4e5f_b925_92806ea549a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_af6bc2a4_7926_4038_921c_2144bce04a79() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_25f9dd09_24b6_4636_b217_8049165370f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_afecc466_176f_4604_bc47_957303a40ac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c54e8b14_6838_471f_b4b3_5e22f9cff441() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ca9acb25_9421_47a1_bd9f_72aa4c23073a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8db69925_0565_48ad_8b01_2d0d610f4a72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_944d49a8_02b1_48a1_9b18_fe2cc022ed53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_21fa7f1c_2810_4ec7_9fd2_ebfde3d82b53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_af0a704a_8ee0_4d41_b01a_1749cdd59b07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_40dd1577_3403_446d_a3b1_860f3e25bf55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_49f435f1_9a5d_4190_9851_969891b30736() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_49f84c84_03aa_4765_b838_641bb9a9ad4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e4501375_af7b_4f9d_a919_73e4665ba5c6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0e134aeb_8605_442e_a9ce_bf043a43c81b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_06980093_e894_402b_93fb_cbfc432852d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_9fab06f0_d3c8_4ca3_9853_1b26b564befa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e8b57719_9b00_4143_ae6e_2161c0087e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8e8b4672_715b_4a7d_afab_ee9942726535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_522d62dc_bfe2_4891_860f_6c36483e7772() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e1d0cf0f_0f16_4244_a47b_bad0df347eb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ad3d53d3_b4ed_468b_b210_cec7229d81f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1fb108c4_d8de_47a5_8858_6499eea4f34e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_180d2dd0_f405_442e_967f_a91c3a14973e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f84c022b_67de_49cd_9f6c_01bd5749895d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_623015c7_9db2_4461_bb79_dc9d654b5b9a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b36b6753_755d_47cd_b472_b6d49c67b166() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_08f041d9_5483_4302_a80a_e3854c1c4626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_78bc5979_601e_44e0_974a_8952a5666073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9f55e98b_5266_445c_a075_24f23b4c3003() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7559a675_cf04_4529_b0dc_10f9fe98979b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9985de5a_70cd_449b_9925_ad41d39c710e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_eb8e8991_8992_4225_b5b7_c06def7bec18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_20531674_1a4f_45ed_944c_719e4ed9a6db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_913b48e9_55ba_4b44_86e6_d41caf8cf0f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c3f5d853_3294_456a_b6f5_8d1770d4c706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7ae560bf_409f_4d40_b570_544b2fcccab5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b584cd90_67cd_4160_90ab_dbfa4bb4e38d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_805a5a74_3365_4c17_832a_229b2fabaf5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7b8fd12d_a160_4f8f_ab50_2b534a046413() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_45076c5d_ffb2_406e_9172_4db36107ef19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_29e90f18_825c_4a1b_9ca5_7e5014ad1308() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_66e5af8a_7fa9_4c79_a34d_4b07a2319fab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e3bdd459_83e7_41a9_82c6_bac51deca864() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_837148fc_9491_4240_819f_441dac599a8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ba217f67_eadf_4060_b567_ee078b8dd154() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6c5faae5_83a5_4cd4_a8d1_518abaa7ebf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_25715498_f196_40b6_a331_539cf9ca216c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_29e90f18_825c_4a1b_9ca5_7e5014ad1308() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a54c37a3_00d6_400e_bb6a_c05e4a89cb4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_2f2798ef_f2b9_4772_b35a_74397854eb77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b173982c_f486_47d2_b1db_a0dc36e0f55f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b7318be5_a3ce_499a_aa8d_ca54a9052b11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7af265cb_4bae_4218_b9b9_4570657cc0f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a8b59008_4d65_480f_918d_5f9407376e5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_da73e1a6_8572_4407_b5a5_ac7428743fbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_abd09ee9_899d_444f_a2ab_52d767211318() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a5274842_877a_43c5_9e8b_9fd42f72bd4c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_aec493bd_1061_4737_b9dc_5a3ac2d28c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_fb6499cc_e84b_4e32_a26c_5eecfe7e449d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_857a9de7_b0a1_4caf_b31a_dcde96b8d8b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a55ab954_ed2b_4c8b_bb8d_189269c24c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8c42b47a_23e2_42ef_9c69_038e6a3b53a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_75299203_d8ec_45fd_9d65_98fa20789412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_edab01a6_caf4_4cdf_865a_a5655f0c6a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_037ca5d3_7abb_4323_9d99_89ec73e5d229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7f9d96ae_0301_4b47_a5d7_ea8993ab4d66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5f8b802f_062c_4c76_8517_9b46b7f012f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_56c69a57_f7a2_4ad8_a152_cf882b12da81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5f3f3f9a_b7db_49e6_aefb_43f508ff1f8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_19c69545_f1ca_4d3e_89e5_75a216902a9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b464ff5c_08bb_44aa_a15f_2b5f2229cc23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_48c488fa_b6ca_45e1_8009_c58af9f286a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cc0f70a3_dbdc_4dc2_a1ba_d353fe1a6173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_493eaa96_38e5_4f01_b8ef_047f076e1dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0b062058_684f_470e_a7b0_09f59c2ff93f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1deca706_fa97_4c2f_bd4b_8f1fd6de1df8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1a1c53fb_ae1c_453c_bdf8_1a0cca96ee6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5f2ae41c_19ee_4d55_b31f_3bcfb0f51489() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5e7ec1cf_6737_49f0_afe8_6c1d2270b060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ca3ef9e9_d3aa_4ec4_bccc_8543f51790d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5fd6d602_1e80_4200_a4e7_86fc7303a207() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_0936ec4e_f0e8_474b_be48_d3a6bae7e8eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5959b4a9_aecc_41dd_94e2_ac57b3fabf32() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e71a78d9_6746_41f7_9a76_2121770e42ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c1a0ad1d_7aaa_4a83_8950_9607546289db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b81aed14_e043_4b39_b507_14a869c76b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1d66842e_93d4_475c_8ca0_406af05c9649() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2a87427d_498b_46fc_911f_e0edcde83ea1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e28074bd_1d9f_4219_95e2_64c0b6d16b5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b498d9b3_985e_4d9d_b29b_9c3045dc11ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_267e8666_03bf_4c97_a841_fba23e5f3040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3de2730f_1b4a_42ff_b3ef_9a43265acc49() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7fd45f81_1269_4b98_b332_d7c5271dbc0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_18ba48ca_ceb3_4418_864f_dace66c4deda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_af0a704a_8ee0_4d41_b01a_1749cdd59b07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_03612763_5740_4d8c_a351_2970f859d4b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ca388a8e_5846_462c_bbf9_566b48f6978b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bfaa431f_fff4_484a_858c_04d8aebc036a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ab229044_f825_40b6_93db_b869e7552697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9a0e23ea_85c8_4de4_bef1_c7102c099819() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2f87392d_edee_46ba_a65e_f365bc303b92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_13de9847_f012_416b_b3d5_913de8ecfc7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_69f5e7be_6221_42f6_b97f_0d7c3a5ccfd5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bedbcf85_4de4_4116_a096_1748f1d46251() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_63527cff_58d2_40cd_a85c_e5f2206a18fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0ebc817b_57d3_49fe_af5b_a7900a58a72f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2f4c8238_cefd_4d65_b5a1_5b32aaa090a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8477295f_5e47_4367_8f2f_919d8d8af3e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_4a4cc083_afd5_4ced_b60c_9974ed467ba1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e604462b_37a5_4a46_8d0b_17e74c6d6a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bd73a1d1_34eb_40d0_aadb_21caf1e222d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d8c3b788_d483_4d47_b123_e190e929a802() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_411587a2_aa72_4864_a871_312abd9e3cba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_372bdf54_6e55_4022_ae83_a9ee9fbd0a78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_20913b8f_584b_475a_ade3_4912547d1bc5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_372bdf54_6e55_4022_ae83_a9ee9fbd0a78() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a5ac7375_feb5_49ae_89b5_fba99a412a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_74f4dc62_5d95_4315_b36c_d759d182c181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f3850f03_165e_4d66_8a95_419b3033d801() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1427c1d6_782d_4b05_b52b_a3feffdaf731() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_20d00016_a9f6_4da4_a0fb_12b881d6993d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cdcedb1b_8606_43f7_aeed_037091503434() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c992ba17_4962_42ed_9d07_20e6127d818f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_07994110_eab1_4ff5_9cc6_2f3e285e46c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c9926bc7_b0b6_49d7_8026_459ea06433eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6b74499e_5f15_4683_8269_0c0970dae96f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_bef6894d_6027_4a7e_b5a2_2fec3dcef1f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_72ee2213_1804_4af5_84e1_f9e5efa5eb71() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0ed7e1ce_d7bb_481a_8305_85e2ad5eb766() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_52fc6055_0b77_47c4_8e28_1167887f1204() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_31dab31d_86a6_4ab6_8be3_3906d04eac1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a56d4207_36db_4346_8e63_d05b27745931() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bb5eb97c_de5a_4499_800e_5b732050afc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5650e95c_4c05_4860_aed8_463b30cf1704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cc9840bb_aacd_4d43_954b_5f540cffc07e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7085ef3b_1801_41d5_900d_0bf5c3c2e50d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_72aeec1c_931c_4eee_9dda_2ad8094c3947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f10fbd61_dd53_4a7e_9d0c_afc3111088fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3f237a26_bd57_4ca5_b2ee_e8bb6642cb2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_912bc225_ebde_48cd_846c_ab3e903223ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8fae3310_3c77_42bd_9e99_ebaa396a1621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_01ef5233_485b_43a6_94f7_687626857894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_63034043_97d5_4c57_b61a_afa41faefcec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5078faf3_65e9_411a_a828_a13a6358384c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b46d2bf8_ba4c_4258_ba39_025ac1e46eb1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_79c0e0b7_f49f_4a85_8d5c_cb2cfc183c55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d5377c00_3e7d_470c_9a72_cee3dda8a276() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1397a06e_d440_4d2a_9763_251174b880cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6bcd3631_fb4e_42ba_81b8_7c3b4adc9638() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_585d3941_2f50_4e99_9798_4430b539b165() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_306b27fa_9986_44e6_9578_31d5f6a2bf9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2a17ae40_b5d8_453d_8c41_11f92d89db3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_eb8e8991_8992_4225_b5b7_c06def7bec18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4de9a468_1632_46ae_b72d_10bcebaac23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ab38e9f2_16f1_4ae2_ace1_4bd50a35ca02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_8e72351a_070b_41dd_94a8_9358af98677f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4f750753_a2f8_4503_9272_caca33cb3835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b56c8b1a_ef6e_4c5d_9982_9f53e6e64663() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_309b0f9a_a4d2_4547_bf46_cc2daafc0e5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_309df7ac_411c_4f97_a435_b1e2be258194() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a31fde65_1936_4a78_ae43_5037eaf66661() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5f3ccbbb_ab54_4f43_8a31_8fad3d8e933f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1c892525_7960_4643_b088_705e00262007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_09fe211c_1033_4315_b8d0_8f0bb870ed27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8dc57733_cd59_4b4a_b85a_7cd150b12a6d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f8625fff_7419_4fc6_940b_fe463cc08b05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3d363009_0e39_496c_a531_33f1621d3c2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_481b1d47_bb73_4cd0_9dbf_39472bfc08a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8c42b47a_23e2_42ef_9c69_038e6a3b53a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ba1c5b0f_80f6_4870_ba6c_a2ea0f921d3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e2c98959_eeb5_4f8c_8ccb_ff214b0120b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_85440e13_530b_4b02_bfd6_e24930316463() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_65c65ee3_fb68_4e84_a28e_8789ff13e3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b68c1ef8_3077_4153_b353_55c17488cfad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3d363009_0e39_496c_a531_33f1621d3c2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1da39b39_46f9_42f6_b518_de5441c393ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_731aaaa0_aa7e_4355_9070_9b935d911066() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0b317de1_f95e_4939_a545_34fe457e6814() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_39d7810a_7ca5_4667_8928_14b45095fc82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_03b66409_b1a1_43f9_952d_5bcf82d63a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1945e604_bcf8_47c9_a783_483b2cb4cffc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_960147ca_18d7_4f8e_96fe_f9301d0f7cc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_eb8e8991_8992_4225_b5b7_c06def7bec18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_92465c43_2ddc_40c8_bd2d_9bb8d8341afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4ef414d7_fddc_451d_a29d_423d88f5a138() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_72d29a71_3e8a_4c9d_91bd_a4d9d50e632a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_27244f78_2e86_4d00_98fc_db0362fc70b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fec22be3_01c9_4f48_b954_c8de3af6838c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_07a5938c_c62f_4fd7_9904_33aea4c86099() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_e1c06184_3b1e_422d_9a45_ed7eb6dd6f86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f5e7dfd1_30df_4e97_a6bf_b2175368a5c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e3bdd459_83e7_41a9_82c6_bac51deca864() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_888f0e9e_cd95_459c_b30a_c9a220d1f2e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0a818c23_a0e1_48d1_a8a2_ff467c2fae95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4b36cfce_2bf0_46a9_9e42_ded60584e193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7085ef3b_1801_41d5_900d_0bf5c3c2e50d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_39273f84_d873_4ea9_ab3a_bf51f2424a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ad3d53d3_b4ed_468b_b210_cec7229d81f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_99df2b99_293d_4234_b27b_30d7cfb3a968() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_559c1fcd_3154_48b9_a1dc_f9e6f37f3771() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_852b511b_436a_4022_a581_c8361f358e31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_74208003_764a_4b0b_9d1f_f89dcc0abb01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d0edd4a8_1e80_4fde_9b4b_d889a1bff04c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f011d5fb_aa07_48b0_9cd1_af0ecca41dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_808de8fe_3f23_4443_ac4d_fc3105e94f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e27ae4c0_e5b1_4df7_8613_117ec091e021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6ff14977_9f27_4c8d_aaab_19d7e302f4dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_fba49c7e_065b_4cea_9bfc_f93722e786d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4de69a91_1b80_4ecf_877a_33a945d26ea0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3e74925d_641a_4f75_8c78_2ffcb3997616() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b26e001e_3f06_40ca_ad6d_3f99d5d06f12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e7d6d9fa_5eaf_45eb_a932_a9f39e3f949b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_bc4ab49b_0601_4e21_a880_22c0a3e50ce5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9e19197e_2cab_4014_8d71_429026303d38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_279d9e18_40ff_4fd3_9620_0d0b70e282bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_35196c56_0140_4661_ac4d_fb3786f726ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7c7378ae_5efb_41fe_ad56_867f8c7eaaee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e0f38c4b_1e4c_4e0b_a062_729f36235388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b013dd23_51e7_4488_8ef6_b73ef1fd3e80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b7196086_2e96_4916_a5b3_d8ff5e293e86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_60e48cc8_9216_4b05_8da0_88779b42bbc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c74f959a_87d0_469a_baba_1e29c364d2ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5078faf3_65e9_411a_a828_a13a6358384c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_feaeea1f_a580_42d4_a50b_b2abcc90615e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4a65e8db_24d8_47a6_9254_5704eb785fa8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8ab95dae_db58_4d6a_a2fc_6a072a52a8e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5fddd0a1_495e_45fc_9b38_1924b33f1e95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_32c232a4_3d23_49ba_9d27_db4f64d071ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2ce0f22d_d3f4_426c_88fd_319bac62731e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ff2367de_102f_406d_a914_389db5fd9535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bdf5c0a2_c3a6_44d4_adff_47d9bcf01858() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a28b75ba_c563_42c9_af0b_18171ca42691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f1d77301_06ba_40d0_9850_3d85148def9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0915085f_2ac6_4b7c_a03d_3153be2e738f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e21bfc8f_f584_4787_b41a_6cfd8f853448() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8adefca8_7981_4b19_8ddf_d7fb06fc31b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5e94f1cc_3078_4df9_b41c_4bb789fe1dff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4b36cfce_2bf0_46a9_9e42_ded60584e193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_38555b9e_8797_45b3_b3fd_87d89bec4da1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_9ef771b0_de8c_414c_9890_478f7aa76d92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e19cb88e_32d9_4618_89db_5585efc56498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b932c68f_e1fd_4b0f_9a20_7caf81ddc9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bd315b8b_e503_4e21_b890_acc9c6c2a332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_032900fb_f504_4665_b0c9_e852c83ff25a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7aee86fe_bc37_4d55_b027_c7b748e3ac74() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_92d29a86_3a6a_4e21_8d16_b5ba56e1e810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9bd0bdea_4e18_47be_a6f2_5a5c0aa7996d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_1a8708f7_bd5b_48d1_9542_3b9ce5c6b92f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_15385204_0ee7_44a5_8a10_17989398c9fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ff2367de_102f_406d_a914_389db5fd9535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_48e56d99_2ec1_43da_9e88_ea4d483c7826() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_032900fb_f504_4665_b0c9_e852c83ff25a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_1941b723_c509_4bda_8c44_7792c5e80745() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6998c1f8_d7f1_4ae5_84ed_d629a7ec7ec9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a10f374d_aeaa_4bae_9885_2bbdb8d9d168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_666de809_03d5_453f_9fbe_dd4bfb8c0524() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_821490fc_c276_470f_9f06_8e99a4a94168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_96a31b87_6dbd_466f_bcb3_5fcf77bbff29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fba49c7e_065b_4cea_9bfc_f93722e786d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_78101e8c_7184_4c83_ae62_408b34b43f72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6750f0c6_56eb_4d80_88a8_bcd3c806e46b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_037ca5d3_7abb_4323_9d99_89ec73e5d229() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_aa3a7bb0_0032_4913_b9db_88421ec90d97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7132fad9_02ac_40b1_9255_0a0efa1a3555() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7502e1d2_2945_4067_9b52_446ae6db0150() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d8b6710f_e58c_4d1c_ab1a_4ba079702e8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_47d3d8e4_edd8_48eb_b966_f7d9e3cc6c3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2bb00773_6854_4293_9e1e_46d04caf0e1f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c35e63ed_59df_4610_9e6b_cf3c80dbc704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b31b858a_5685_4517_8a10_db5e4f8dde47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6439eea6_3e10_4fb1_88bd_b536b7029012() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f6958a5d_e8d4_4a34_be99_bc2f34789ffe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4e16bb6e_0d62_4d67_9174_f9e4f9cde3f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_81e4d4d4_3e2e_43a3_849a_30554f84fe98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f94c1f45_5230_47fb_a05c_2166257d2147() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8956b178_bf58_4406_a81e_e80c907655dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f442f33c_f1bb_4b87_bf1c_5997eebd2a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fcbf4709_ce77_4076_832c_4db2a5f01ea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7c73c158_ea87_4543_bcb8_88fa5b0a2e10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9d437de3_0b03_4e8f_a6bf_72f0a5410178() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7a45af8a_4fdd_4244_83aa_254d48ff36bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_33895557_3680_4c91_95ca_7cfe4accf8fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d31ce131_6ac0_4ed4_803f_c87577fd4f17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ff454c50_8cf1_40f6_9ca8_543c0d294a9e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ed2b3511_5803_472d_9001_33c01a509ca4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9ac84fde_82a8_4c89_9faa_ee1f55d5a2da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c299139a_8973_4505_bde2_844a952eda63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b5df5cbf_092c_49dc_aa19_7d01a8f367ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9599ba02_82d6_4346_a876_c227a78ffc3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_34b4dc08_59ed_4fbf_aa88_d60c79391ece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_fa88c368_d0aa_4801_82db_b8d118a36d29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bf110fd2_b7c9_402d_bdaa_c8fb9bb22110() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_aa28fef2_92be_4ac0_a201_e95fc218a19b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_694cc508_8533_4370_9aab_fa1a89228467() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_49e92902_ecb4_4501_a13d_716256d259ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f10fbd61_dd53_4a7e_9d0c_afc3111088fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_71a0bbe1_b094_49eb_9640_6f2d6e2885c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6fd099b1_7fe3_44aa_9a6d_865ed72d2237() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_298f69fb_8b14_42d4_a74e_58fb1dcde137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_75a7d86a_7f78_4603_90e9_5d8c0fbf9e11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a3cf341a_a9a6_4de3_b69e_38d274b14fc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e01f5a1f_4bca_4ea9_adbb_5eadf8991b0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8a009dc3_96a2_458e_ab47_f3c08768b94b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bbec2e79_00ba_487a_982b_36f6982072c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_20ca20b1_be92_4e73_b5fe_0a99b9d61492() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e9ff98b8_ec05_4350_86a9_fa13aa65f5d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_aee7f721_1e5e_4ce3_ba14_8fe754393be4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_dc717223_ea69_4938_8e7c_0239f698bc19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7aee86fe_bc37_4d55_b027_c7b748e3ac74() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_809af517_ac01_4279_aa38_a5e585bf05ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_712741bc_a35d_4d4e_8538_ed682dbb3c3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_224206a0_eedc_48fe_a6e5_f73e419ad183() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a51738e8_8ff7_4126_b187_4f54855e3d07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_77911dd4_98d6_4508_b6d5_4d4928cff68a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1ad5074b_88f3_41a3_957d_a3ef28b6a99d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_776cd8d1_e285_49b9_9990_8dd13e35085b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f9a8bd4b_8884_45f3_9988_d2d32931f3bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_7af20def_9342_4aac_b6d7_b2f7db1a1884() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f442f33c_f1bb_4b87_bf1c_5997eebd2a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_694cc508_8533_4370_9aab_fa1a89228467() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6834c735_74ff_4f19_9141_b72bd4f3d7ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_090c8983_9999_4240_a204_da923c24fe08() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_dc76ee2e_a868_4043_bdaf_27848cd83e13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5c1473e0_c333_4d24_bb90_1046368e7fe1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2394df99_c649_455b_8783_a3dbb7fbfdd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5db123d0_0ce8_4374_bc32_0656a7e31b3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0936ec4e_f0e8_474b_be48_d3a6bae7e8eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7841591a_fd9f_4dea_9928_c5b797e1f5ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d4537622_86e9_4684_834e_fa06927b46f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_488d8253_66e0_4b27_927c_cea259b28db8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6f697b70_670d_40e7_9468_5c1c453ea22f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_353d9793_a612_4c0b_ac42_21b26fb52848() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_d4600a47_e600_4992_ba49_e27860e10083() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_95f45ce4_eafb_44fc_a123_dabb1241221c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2c9f165d_8f63_4803_8577_01931ba783da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b4c55071_d0da_425e_9a8f_e0d165a9934e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f16b00ec_60da_4bdc_b1be_dd86df39e52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cdcedb1b_8606_43f7_aeed_037091503434() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_28409518_f84c_434b_b27c_f6d60e999868() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a54c37a3_00d6_400e_bb6a_c05e4a89cb4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_28f11549_6f7f_4b45_bb7f_b51b0e65c9ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2cf1e92e_3a7b_4f97_9ce7_aa7d96c447ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_551a37ff_c5b6_4662_877d_7b32232124b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d8e61d3e_435f_4f57_8ef5_749920cb68b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7d487dcf_8861_4a4d_8c89_950f5929a6b5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6703009e_7a8a_49d2_88cc_7116394c5d17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7647c534_b93e_4316_98db_fd4e1f4cdc5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f0120469_3428_4ad0_8568_a2fc5d38c5be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_93ab52e0_22a6_4cbe_b868_a0a5bcb4c010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_129ede65_dd3e_4b25_b189_2c95279ce610() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_83daa340_3c4f_4295_89bd_ee65dbce5d1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_86d1ad5e_cc56_46d0_86d5_7a9f805c14ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_38b59086_0c7c_47c3_8af2_395941d0e84d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8d9d167f_c1f4_4d6b_893b_36fe125a641a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_66c5b2eb_b0aa_4f39_b805_192696ade28e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_79edadb5_2faa_48e6_8c08_9736f7682669() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_705da8d9_fe0a_4ab3_ac70_4ca8b5b7dbab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1941b723_c509_4bda_8c44_7792c5e80745() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_86096c58_7eb4_4e8b_8b04_2ab89ec27469() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d861fea6_5b9a_4c61_87c3_268fee419451() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_49af8968_b9ec_4990_9bb6_235514e7a633() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4fed3a50_e8e4_4545_95b2_223bde220038() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c74d4c71_ed19_40f7_be34_fdcccd5b420f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d7c34757_8473_44d0_a34a_f37cfdfa3249() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f4ffc246_ad3c_417c_8e25_d89da5eed9b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ee4ee609_caae_4a91_8da6_5d407b82bbc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f187775d_d354_4938_9e82_7c61328c2e03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2bdab585_2cee_459c_a708_e4d872b5bd91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5781a7c2_c5b6_40a3_906b_4ef5d0c75fc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_04bd1bdb_dd31_459d_a95d_d001ce9781ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bab21046_b0eb_4233_9735_9d2cc0eae706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6d35df7f_83df_4c4c_b7f5_e897ccfe048d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_84c9b48b_484b_40a1_9266_2fca3b54c173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fdaf3392_34e1_4463_aefb_80d33bb68e4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d6362bbb_c45b_48b8_9201_bb24b55e267c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_34590fc7_34f0_44e3_825f_4b03affaa332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6bcd3631_fb4e_42ba_81b8_7c3b4adc9638() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f27df727_d098_4d3d_8809_ed944ea933b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_803cc1e7_604c_4f2d_ade9_f3e9931986d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b9243b37_17ed_40d6_8242_15cbd378cc17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_56d2d96a_f882_4b84_9860_f46d3b00bdf7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0de5f100_f142_49e1_9476_4c3364a3fd58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_df5b9228_2696_4e83_a8d6_4ac73fd9f293() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f857a5f7_8519_4a83_827d_9f2b816d002e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_da703dd0_de97_4a37_8d9f_36eeafdd8cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_eee25c9e_e2ac_487b_86d8_e1a0e578224b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9ac84fde_82a8_4c89_9faa_ee1f55d5a2da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bf56ed06_3dd0_4dfe_80d8_33bd5b397ab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b7b82154_ea6a_4b8b_9ea8_085ca56b9fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_decd4ff8_1f22_48ab_8226_55dbef62ec31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_590d5623_4df0_4615_bcb3_cdf401d089fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_79553e77_5385_4650_a551_3c71ada6ed98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6e2fb2e1_2f28_4a10_90f1_93e87bc17f59() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b81aed14_e043_4b39_b507_14a869c76b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_22a70d35_95a4_43ef_8255_3f4b3f5177a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_27244f78_2e86_4d00_98fc_db0362fc70b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d1d2112a_f7b1_4fd3_8150_58b393f5a54a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_426aad42_fdf7_4e45_b76e_7a4c9d211ad9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_134aa7a9_5908_4638_a8b8_9d09635541d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3944016a_7e56_4f7c_9b1f_0c882c66c541() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2bdab585_2cee_459c_a708_e4d872b5bd91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cb4fdc98_8ff5_4899_8349_c6c5d6b4bd36() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c993c20b_c8fe_423b_94e3_a11f5deadc16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_2fb84282_b9c5_4fad_bdb8_11b9dd34aca2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a71540fc_8aee_45c6_b28c_d7200ba0726e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5a61ad07_1bd6_4994_b10e_bf7bf617de8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_72da67b9_087a_4858_9b2d_50c5d879dfa1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_59590d27_9ea9_44d5_ad25_e2071a38655a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_92744e7e_c3e2_414d_b930_2d0d765ac789() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c57d4bde_8ff5_4158_921b_352f5edd5598() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_63c46383_c4a3_4d23_836f_6fcd6b3b61ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ea28a4cd_f4bd_4487_9a69_e38a819e6e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_64674a25_bd7d_4132_b34b_a7a7e6d075f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ffeb51e8_b84f_4644_8ba6_0d11ba6d98ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_70201347_07a1_4e52_8ee8_92da805ced88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bb774f51_634f_485d_bf67_67fd7d865213() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bfcff9f0_0d21_4402_af88_fa4ea3f9a78b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b7fdee48_75e4_48b3_9edd_a20c9d7c1196() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e604462b_37a5_4a46_8d0b_17e74c6d6a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_502e7975_eb4f_4930_89b7_0b9b7c6350c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_a838f46b_be21_4a32_9406_eac35cee65bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_9105a35e_2885_4f14_9350_57b924bd0c88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_92465c43_2ddc_40c8_bd2d_9bb8d8341afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c2f01d0b_d3ce_44e7_91f6_a51b748123fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4ebed85b_b770_44a8_a578_a1760250fb8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d6ca4d25_5e54_43a9_9437_79d63275f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b2d48aab_2188_4f0e_8249_1650d0e6aa5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_61a460aa_4cb5_420e_a103_daa836b5171a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_44ccd14a_0fd4_45b6_9c63_a6c5d1568ee3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2bf58553_9e53_41ed_82c7_a0f6752cfeec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0321342d_bb13_4852_8ddd_d8c833f1c718() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_da73e1a6_8572_4407_b5a5_ac7428743fbf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_05b266fc_d660_4273_8c10_bb351c677df7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_08f041d9_5483_4302_a80a_e3854c1c4626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cfb99399_033c_460c_bdba_ee419269a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_01fd0d1f_8c05_44e3_a8e9_5fa433c10d2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bebbd571_6cdf_414e_afde_07944c8e8872() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_14a3440c_ef0c_4739_afaf_ab27cea7e73b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5a51f1fa_3c81_45e3_a4d1_c34733e30070() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_334cb070_eb9f_4c1c_8819_92a9cbd77b14() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0186b02e_1193_4c85_910b_c020cb41367f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_24ff4838_1e03_43ab_93ba_1df273cfdd76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_24b01630_8ee1_4ac3_85d0_0ac201c45025() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_17c7d914_2f0d_46da_97e3_34de2bae69a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_044b8ed3_30a5_428c_ac24_b46fffabb859() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_64674a25_bd7d_4132_b34b_a7a7e6d075f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1e265d24_8438_44b5_b99f_247c45b488f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_69e97de1_51ad_4204_8a9c_6886fa84c250() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_47cae136_54d2_4361_8ac1_ab1a834e021d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_603118ad_7f1e_429e_b190_a57cd3cd9c1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3274b618_980a_4b19_bf36_7ea8e8de121f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_59f424cb_6bd8_4840_b9f0_f48466ba8d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b32ef39a_f584_4043_b11f_2309c5498082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0321342d_bb13_4852_8ddd_d8c833f1c718() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8d250a84_2ce7_47c4_8504_836b864ce35f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d9f98e45_d8d2_47e8_8d07_f4ea8df36565() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_913b48e9_55ba_4b44_86e6_d41caf8cf0f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_23cc3949_d600_4010_9257_8e0601397137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_59f6c3a2_7200_4a50_89d3_c6a55bd4e245() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5e7ec1cf_6737_49f0_afe8_6c1d2270b060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5ac7988e_ef2e_4978_a509_01fc3c287ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_30ff2f2a_3e4e_4f5e_b3ba_35fd1f940750() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a7de2efd_f9cf_4d51_a818_89fb23085a02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_68f98558_29eb_40c2_b40f_1323f09db799() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3309557d_8568_4c20_9deb_e46e610469f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9985de5a_70cd_449b_9925_ad41d39c710e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_464a672b_c21e_4ed6_a515_d9baf612c388() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b5eac88f_04bf_4790_a47d_783d8b8fa57e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_98d49fc6_b3cc_43b8_9585_9bc08a22359c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_40423214_22cd_4a56_8856_176719d29f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_63527cff_58d2_40cd_a85c_e5f2206a18fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_eb66dc25_7611_4e70_9db3_fde5abbd0fc9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9132f087_5382_4cc7_97ff_06afec628fdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4de69a91_1b80_4ecf_877a_33a945d26ea0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f369ba0b_9961_4f3c_970b_8bafdc9fd6f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8477295f_5e47_4367_8f2f_919d8d8af3e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1ec97dde_1b1e_468e_86fc_e46187dbf13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_78631fc2_e125_4026_87f6_a4900eec2d35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_051f74d3_b144_4f02_bf50_2e7c3c8c5f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6ec7aee2_7515_4eef_b19f_3ca29c95d3ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5f099385_04ca_41ff_bc6e_4a0b051d5824() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2f98032f_7f96_4e3d_958e_c05f688aa5a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_2e4b4c82_82ae_4204_92c2_4a5e0c228be1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cc8bd1ee_220d_4959_ad08_7cc4d2698e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bedbcf85_4de4_4116_a096_1748f1d46251() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b3d6d61e_3a30_4377_98ac_4f758fc3f647() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2b12da1c_6c29_439d_b2eb_8c73fcdb509a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_72911099_ae99_45ee_8716_1e801031ebd7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_75d3a7d3_886b_406a_8c44_7428e82516b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_776f4498_57d5_4a8e_9db1_0add0ec8cfc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b69e63d5_fd8d_4d2c_aa93_b83b622069a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5e307478_a7df_4414_b169_6c0c62dda5f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e885c4c4_86da_413b_891c_c06834c988a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d052cca5_f9a5_403c_a5f2_d1dd7e8d903b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4de9a468_1632_46ae_b72d_10bcebaac23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5f11e901_f42f_43d3_883d_34cb7f4ce9f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1cd7c96e_afbb_4965_8e60_426f80f4803f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_eee25c9e_e2ac_487b_86d8_e1a0e578224b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0cb6b031_c257_4df6_93be_8acbcf294a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8eaf8a0f_4a92_48bf_8645_ad90823464d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_78a23fb9_896f_479c_8aea_7a442b9cc078() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_58a81e7b_aab8_4bde_9dbc_1ea6fed606b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_0bde64da_3232_4c64_b790_49751acaeee7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0915085f_2ac6_4b7c_a03d_3153be2e738f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_6720d446_3ff2_4541_8f9f_5edd17223cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_317a9483_f6ec_44bc_ac46_9a0714e83d5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_92744e7e_c3e2_414d_b930_2d0d765ac789() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_821490fc_c276_470f_9f06_8e99a4a94168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6720d446_3ff2_4541_8f9f_5edd17223cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_42e9d229_375d_4306_89bd_d6180b1abbad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_92d29a86_3a6a_4e21_8d16_b5ba56e1e810() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_16abab32_6e31_44c9_b3e1_b8d404772e50() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_39404c94_7903_4a27_a397_e2aaa87ebcb2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0de5f100_f142_49e1_9476_4c3364a3fd58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2e4a099f_38cd_42d2_998a_f657e11516be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_edbe711b_f8c6_4add_a716_58c39f7bf3a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7f9d96ae_0301_4b47_a5d7_ea8993ab4d66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_09fe211c_1033_4315_b8d0_8f0bb870ed27() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0d4da408_3cd2_448f_9bce_1db7ace344da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_43698697_0a05_4e0d_bcfb_cc6457f02f62() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f09b3463_27a7_4c6d_8724_c5a3f2e32cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_369894d0_172d_4f2f_970d_964e34bae181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_007207d0_da65_4df0_b3f9_b90ed930723b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a55ab954_ed2b_4c8b_bb8d_189269c24c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_312977d7_73af_441e_bd3a_c5b9c03b2995() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_48c488fa_b6ca_45e1_8009_c58af9f286a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_0ed7e1ce_d7bb_481a_8305_85e2ad5eb766() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d6ca4d25_5e54_43a9_9437_79d63275f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e3ff4543_1ef8_4502_8f34_3253c7b467c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c77195f8_ebdf_4a36_895b_3057f904edce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3301f7d5_623c_46ca_a795_243a2b0115d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d30b6807_321e_4dcf_afc0_e5fcfb5bc00a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d30b4668_4fd3_4ba9_8d3b_0cf8a96cfca8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0520ea69_8105_4dec_b3de_77d6523cb5a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_14382c43_b9b1_44aa_92fd_e2d8bf052f33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_593c5d68_00bc_4524_8c99_d93ae5ea8cbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_a1cf918f_7b27_4349_837d_bd3f92e40b28() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9102e3d8_9dce_40fa_b484_11e7868ea84b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6c925021_cc26_47ab_a4c7_e04f0132078f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_473b0d9f_8fb4_469f_bfd9_1f0cc4a17626() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1202bb40_7fc4_4c9e_ad42_f53d735c88ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f94c5c55_d78b_4fd3_be0d_ecc56f15beea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_21fa7f1c_2810_4ec7_9fd2_ebfde3d82b53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_06d90366_23f3_4fe0_99a9_12804f89945a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_04c7acf2_4bd4_47e3_8ea5_b0d4a089fb4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_10676a95_61a2_44fe_9314_963600d4d8dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c4234177_ddea_44ca_8de7_63ddd7eaba9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_20fa7093_470f_4e24_a176_e3f6829f9c00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_d2f49ed4_c719_46f0_8657_b4d6890342ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_97a65ee2_94a6_42e9_b552_764779f519da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0a726183_d170_4a2d_a10d_0b06f2ce4053() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a3d5d177_d480_4fb7_a9d9_450e612a225f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7d2d09de_ef3c_4564_87cb_895952dc1ea9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_25835e55_3c19_4b34_bf9a_f4007eb48f00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e604462b_37a5_4a46_8d0b_17e74c6d6a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3a1ac45d_c83b_48e9_b74f_f627f79fac03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4cda2c99_29fa_4aba_ba14_1ebf7fe59969() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e45fbff7_a0d4_46cf_b12f_fdbd8394cdca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d0edd4a8_1e80_4fde_9b4b_d889a1bff04c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b415ad0f_6906_469a_971a_8a35734beda8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5f8b802f_062c_4c76_8517_9b46b7f012f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_dda3c9c9_f045_4712_8539_42db7896205c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4de9a468_1632_46ae_b72d_10bcebaac23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f1fb57c2_bf89_4651_8957_a0100a5f746a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f157031d_a927_418c_9801_2f717688f827() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7252ce4e_6fae_4894_8acf_8ceac7dd73f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_884e2140_a6ae_44c0_ad21_a911cc587620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ccb38191_4b54_4e23_ba4f_e0902b1bacf0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_62ce21d5_1a84_42a1_a284_c08dbd5bf52d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_25f9dd09_24b6_4636_b217_8049165370f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fac00f35_8dc7_4ea8_bc00_916d4f0b32ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c2f01d0b_d3ce_44e7_91f6_a51b748123fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_00e25ee7_df89_4130_b4d0_734d8b8387db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_af007427_34b4_4193_b0fd_5e222e1aa421() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b4f0449d_e172_43ca_9b62_57a1562dc209() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_93552028_4073_4eee_8078_c223f7b7a621() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_aac74a22_a912_48de_8ef6_dcf5559d5e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ade2dcbb_50dd_47b4_9a10_ae4fe9f9f475() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b5ec3c24_c897_423c_9e32_e883407e380d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5e139813_980e_403a_98fa_fdb2578bb139() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a8b59008_4d65_480f_918d_5f9407376e5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ffeb51e8_b84f_4644_8ba6_0d11ba6d98ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fff5fc4a_ea2e_4c8a_9180_da8cfb7061e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_77bae181_7139_44a1_b5aa_713274d429c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3a7662c9_8b17_4ba8_9498_2dd824635c33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8b3784a2_ec2e_4c7f_bc8c_c4c517f82184() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_884e2140_a6ae_44c0_ad21_a911cc587620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_331f7f64_351a_491d_a5a5_9c10507d083a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_38555b9e_8797_45b3_b3fd_87d89bec4da1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e3a6cf9a_730a_4d0e_8711_01110907dcc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8eaf8a0f_4a92_48bf_8645_ad90823464d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4ef414d7_fddc_451d_a29d_423d88f5a138() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2f646bcd_9fb3_4093_9049_f1740b605420() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6101fe33_1821_494a_ac59_a1f726a3d52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e283b54f_e42e_41ca_8888_08383aa04ecd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c54e8b14_6838_471f_b4b3_5e22f9cff441() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c5cd0afa_b98a_4ff1_85cb_910813c64a83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_4b36cfce_2bf0_46a9_9e42_ded60584e193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_97d592e7_754b_45e6_b7a0_21d4e1b2de17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_edab01a6_caf4_4cdf_865a_a5655f0c6a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_34fa767a_dc6e_4d9a_bbd8_a5f62b27b3c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b5ec3c24_c897_423c_9e32_e883407e380d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_79fa659c_0c71_45c6_aca4_cd8e7ebf3967() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3329eabb_a99e_43b5_9d50_089c0f130832() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_989ee809_e511_404b_b009_e005e2af9248() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_edab01a6_caf4_4cdf_865a_a5655f0c6a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e0b8ab0e_88b3_48c0_ade1_e54af831c5cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3a1ac45d_c83b_48e9_b74f_f627f79fac03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_30beac97_7803_4da4_bf69_0e37f9feec91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_912bc225_ebde_48cd_846c_ab3e903223ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f5a83bc0_c8ab_494a_82ba_f6673deeddaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_df5b9228_2696_4e83_a8d6_4ac73fd9f293() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_afecc466_176f_4604_bc47_957303a40ac1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b56c8b1a_ef6e_4c5d_9982_9f53e6e64663() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f342a60e_bf7e_4f66_ac6b_9124048f8dee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a206878d_2302_4002_9680_959dd742eeef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4cda2c99_29fa_4aba_ba14_1ebf7fe59969() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b2803c23_3132_4a82_a11b_eecaac907e12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6b87ef8f_3e18_47d6_84eb_963a77ad326b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_49e92902_ecb4_4501_a13d_716256d259ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6b87ef8f_3e18_47d6_84eb_963a77ad326b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_729d1a6c_edda_44e2_b923_89b45c9ca179() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a5d8fef2_8fc9_4431_a0ed_ae9b98d796d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_2609348b_1fd0_4662_9467_36ce54be2572() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0c978632_7497_4330_8302_4b1c5c97ace5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6cd7fbf7_36bc_4595_9585_096498db3c8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4f291299_10ae_4226_a0a9_79aa6f55427d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a020ab23_5ce4_4e69_90e6_8a01fffe57c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c19a0687_9615_4385_a686_5d52bb859bd2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b5eac88f_04bf_4790_a47d_783d8b8fa57e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5a2451b0_6b54_4153_8c49_73a727fd9d53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f5998728_2e99_4fb1_a0d8_73e4fe29b107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b17300a7_02a9_45b8_aa3a_fabe80514afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c1f00d4e_4e3e_462b_9d63_e051bba73279() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b2200ec4_dd37_4f2b_92dc_09f2831ff1d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_79887937_3b75_48a8_bbc6_844389c81975() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c91d9122_da65_4f03_8762_57102f4416e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_0dc8277e_e4ae_41cb_96e5_4ee26d70ceba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_00e25ee7_df89_4130_b4d0_734d8b8387db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_056214c9_5734_48fa_a170_524e37000e85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a7182d1e_5e42_4c7b_8322_adeea4fca112() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_bef6894d_6027_4a7e_b5a2_2fec3dcef1f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_adcd89e6_99bb_42a6_a539_3d504508d0ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_20a1001d_277b_4670_b15c_d4a370bb63f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f342a60e_bf7e_4f66_ac6b_9124048f8dee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_af007427_34b4_4193_b0fd_5e222e1aa421() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5e3b272f_fa9d_43ff_a1bb_da593b9ca90d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7475da91_311a_4edd_b72b_c13836bcf6d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_17676952_3831_49ea_8e89_516b6c4f39e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_da901ebf_0c33_44f5_a5f7_8e5fac489aaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f03b5b1a_5f00_4ef0_83f0_c0012f7db61c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_77c62676_b562_4077_9f31_2869628a4e6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5696a735_18a9_43cb_98cb_6f022e3786a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_27c1f921_faef_44cb_8017_a73794108b54() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_19c69545_f1ca_4d3e_89e5_75a216902a9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f3e57c6b_d605_4916_96d9_10fff44e5d55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f45b0b22_247e_4918_9216_2c4dfaab5019() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8ae50af9_3f9a_4fd1_8a5d_c754d72c3dfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_14afa445_7117_458d_b311_990d6e6ae756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_308fad1b_0112_4514_9871_545732d0e5d0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c78fee96_73e0_4db9_a3bf_d6857dbad62a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_eee25c9e_e2ac_487b_86d8_e1a0e578224b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4c659fb7_13f5_4e50_9734_c92ae5c3c737() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f94c5c55_d78b_4fd3_be0d_ecc56f15beea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8ac97d62_10ef_48e6_b151_60ae21058c94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6d911c03_a151_487b_985d_81055a9cd145() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d4c801b7_7301_4d28_a515_6da12d54743a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_07a5938c_c62f_4fd7_9904_33aea4c86099() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_411587a2_aa72_4864_a871_312abd9e3cba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_845db240_3cfb_4ebc_a1dd_96d1da2c2092() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f23c2913_5f40_48ce_8772_4d4a6fec54ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_803cc1e7_604c_4f2d_ade9_f3e9931986d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_cc0f70a3_dbdc_4dc2_a1ba_d353fe1a6173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_27244f78_2e86_4d00_98fc_db0362fc70b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a5d8b8f8_5ab8_460b_8d9c_266645d921c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9040e531_f962_4862_a4e3_76e5e79a35f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_327811e1_3a2b_45af_8225_c5cc17620a81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bfd55b99_f54a_442f_99ed_b97875dcaf7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_930894ca_0454_48eb_a6b2_6ddf550fa4cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4e0d9afd_8d66_44ea_85b5_f94b65b936ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ad3d53d3_b4ed_468b_b210_cec7229d81f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_aac74a22_a912_48de_8ef6_dcf5559d5e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2c9bfbde_a620_4033_be8f_894bdab1251d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8d643ba7_381c_4e1c_8bc5_ab3c9739953c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_912bc225_ebde_48cd_846c_ab3e903223ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2cf1e92e_3a7b_4f97_9ce7_aa7d96c447ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_89c34b96_a14b_4af6_8a6e_789154576bc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_5a753daa_53ae_45a2_8c49_ea68e7c541b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_86ada2b9_4bc5_4837_8bcb_373188b41272() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_32b99fef_645f_4f06_99d1_7aa29db8878e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d5505315_9663_4443_a270_b8cd7ccc961b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_88402215_6f23_4d68_8de7_d13283a303dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_173d6660_6406_4eae_914b_22d9f984852f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_eb08a6ad_d83e_4cd0_b979_8c9b43409f47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_70bbaaa4_6c60_4eba_a5db_14b81e319baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ea18208d_c1b5_4aed_9674_12f9e5cd9f97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_19159faa_32b6_4d56_8d7e_7488337b85f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2c9bfbde_a620_4033_be8f_894bdab1251d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c9926bc7_b0b6_49d7_8026_459ea06433eb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_60950d2d_9a48_4725_bd69_42559df4170f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d87bebf7_7a81_403e_aba2_b81bc6574425() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_96758fd1_3c7e_47cf_97e6_cecee735f6bb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_a1aa45a6_90b9_4513_8e4f_c8af874af8e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c35091d7_125b_4684_a002_a44c9470541b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7f1539f7_71c2_4cad_aacb_052deb2bb33f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_152fdaed_1509_445f_9780_341493f5aaab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_170464d2_7c6f_4641_ab45_ee1e93aefd84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a9db90c2_2084_44db_9f57_1bb142403fd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f4ffc246_ad3c_417c_8e25_d89da5eed9b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_d5383aea_5b3c_4a33_a7ec_8780a59ebddb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_abadeee0_762d_46d9_97cd_13a55432c0da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e7bc7abd_dead_4474_9b2b_fc52a91d30f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0b062058_684f_470e_a7b0_09f59c2ff93f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_482c2051_7c8b_4dd8_ad57_e59f6fd00cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_773e3290_bc31_41b1_9613_0194f2728e2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4cdd735b_28eb_4345_903d_3595b2594046() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_78631fc2_e125_4026_87f6_a4900eec2d35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_81e4d4d4_3e2e_43a3_849a_30554f84fe98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_99df2b99_293d_4234_b27b_30d7cfb3a968() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3bb32a82_e88a_423f_8752_d5bede16ce18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8e2a441a_9bb0_4bae_abdf_c1dfaadf10b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c7d189c4_4fd3_4911_8d2d_44fa165fe888() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_32c232a4_3d23_49ba_9d27_db4f64d071ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f9a8bd4b_8884_45f3_9988_d2d32931f3bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f8dab4a4_4413_4629_b71c_3c17f03e127d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_77bae181_7139_44a1_b5aa_713274d429c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2cf1e92e_3a7b_4f97_9ce7_aa7d96c447ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_889a9697_b401_441b_bb58_e8b190370501() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_19673009_e08d_4c48_8d17_85077959f944() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5040b327_01c7_4a44_a9e5_98184c146baa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_17157a1b_a13f_41c9_aa6b_965c05137bd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f627fcab_268e_4fb5_9d60_190c0dcc52f4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c35e63ed_59df_4610_9e6b_cf3c80dbc704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_74ffd2a1_b9b2_40b6_a335_51a75f01a0bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_dc4ffef6_6e09_43ba_bf12_6ad5ff9f836b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c626dadc_461a_4b01_8fe8_7c9c08435417() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6d33978c_32d9_4732_bceb_19935664b243() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3df4f4e4_d5fa_4146_ad86_e93e7d550a6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_174a84ba_5f68_45b0_9d84_38b3575d7d0b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_caee20d3_dd72_40c5_9116_07af8c8c30e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_046186d2_0a9e_4a94_a8ee_30ef5e9e9991() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0c01ea96_5a5c_4d38_af48_c8dac16ed3e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_09043cdf_5731_4335_a8d1_42c5721a48d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6a95c035_0ebb_42f0_b245_4a0351ee33f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bdb227d3_74a3_464e_8582_aeaa4f0b8f55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_843ac6ad_88cc_440e_bc3a_8a89fd5c5f57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_aec2d1d5_c090_41f3_9369_dce8eea327a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6ed42b3f_3d49_4524_87bf_7f7a4e47baf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_59590d27_9ea9_44d5_ad25_e2071a38655a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4dbc9c60_79e2_46eb_aef1_fe9f60ccb4a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6e182204_2325_4779_a1b6_6d9688e3aa13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a51738e8_8ff7_4126_b187_4f54855e3d07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cff84526_a922_4736_8461_5af1ca488b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_1cd7c96e_afbb_4965_8e60_426f80f4803f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_14241fd2_b741_484f_92f6_07dd53880c1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cd63ab28_50e3_4f21_a06f_6382af40d566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c6c16ad8_c80a_4668_971b_575943b80ced() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_207f6472_fca5_4bc6_983a_b6a6d4bfce69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_6c925021_cc26_47ab_a4c7_e04f0132078f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_96a31b87_6dbd_466f_bcb3_5fcf77bbff29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_5f908914_9bfa_4f5e_92ad_89e4d7cacc42() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_156cea86_b9d2_4504_a45b_f770e5fbdb2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_951ec70e_0267_433a_8343_2b6952f611aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_09043cdf_5731_4335_a8d1_42c5721a48d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e87da859_b909_49eb_977c_ab78f603d86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fa92a027_b08d_4816_b24a_587a47312117() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_6ec7aee2_7515_4eef_b19f_3ca29c95d3ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_caaf0ce7_3934_4e1f_96d9_0f5f8ead05ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e9f84464_a806_45a7_a14d_7b42978b3c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_884e2140_a6ae_44c0_ad21_a911cc587620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b5df5cbf_092c_49dc_aa19_7d01a8f367ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9074651c_72fb_47e8_a9f8_d7b8e007a409() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0915085f_2ac6_4b7c_a03d_3153be2e738f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4a4cc083_afd5_4ced_b60c_9974ed467ba1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c13690f1_c8d8_41f7_a7fc_04ed74a088ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_79edadb5_2faa_48e6_8c08_9736f7682669() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7a093284_0578_4958_9ef3_27ee0650dea4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_25da0985_6082_4dda_a8ef_9f298114257a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_021770b4_737b_4b4c_9345_16c0f969cf0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_8510befa_3411_4840_b134_d09162f3d1e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7f1539f7_71c2_4cad_aacb_052deb2bb33f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_35249559_9326_4c96_bd1a_8a1c9f7308e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f90db12c_06c6_4dbd_ae69_afdf96f69b14() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5ee02244_7a10_48e7_8462_68c66410d9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e19eae6b_dc78_45bd_95f6_86bbbd7ad5ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_679e86e7_cdad_4ea7_960d_bc14440f3a2e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8ef717ec_79c1_442c_a2c0_b93be262dfaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b69e63d5_fd8d_4d2c_aa93_b83b622069a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_292627bf_09aa_4fa0_98f0_89c127b4d642() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_10520ce8_474d_41fe_8eff_23fc15adef56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bb16400d_1e72_4b9a_92cb_914e13c7cca6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_31fff2a5_e84e_47e6_afb7_6a35a66992e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1ddbc9b8_c279_462e_9540_3e6b194602cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b69e63d5_fd8d_4d2c_aa93_b83b622069a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9533448d_2fee_4767_86ef_8aea6b271ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5c41eae0_e34a_472c_9d99_0c550eb25690() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_54eacfbc_94c7_4704_83cf_32f232933c9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_06d90366_23f3_4fe0_99a9_12804f89945a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_af007427_34b4_4193_b0fd_5e222e1aa421() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c23a4b41_c833_4c99_845e_dfc047045f7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_27270c33_cb41_4fbf_bfda_82008ab4dd38() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e170d5e9_2af8_436e_b53b_8e7d23040ada() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_bd7217a3_3b17_48ad_a6c0_39baff6b0657() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8e2a441a_9bb0_4bae_abdf_c1dfaadf10b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ffeb51e8_b84f_4644_8ba6_0d11ba6d98ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cd832202_b3b6_4bf3_a17b_60b06abfdc34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fdd9391c_8452_4126_a7df_3efb3cfe47ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_d40f004c_722a_4959_9fc8_125a6778b552() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c709500a_cdcc_4977_9d86_ac6ac578029f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2f87392d_edee_46ba_a65e_f365bc303b92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_750e5d03_578a_4863_8d10_fc3283079309() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0c978632_7497_4330_8302_4b1c5c97ace5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_71a7034f_ad7c_48a4_8c19_efd469d07dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_889a9697_b401_441b_bb58_e8b190370501() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e2440eae_32ee_4b3b_8139_c05c906ab00c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_73323ad7_6ad0_4d30_9f8b_2ea176dc8500() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f157031d_a927_418c_9801_2f717688f827() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4d06e8ae_2975_4678_ad61_023900ca95ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cec70e86_8d2a_4ca3_8317_68bfbb56894c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_edbe711b_f8c6_4add_a716_58c39f7bf3a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5c7ad180_2915_41ab_9211_5c193597eccf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_cb684d6c_f621_4afe_909f_916f5253ef33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0feca5bc_e841_4064_afd2_f59b1b38cd85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9e483280_5460_4afa_8d20_f795d40f47d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4b647afc_5fa7_4fa7_9f02_e02d9db892c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_36ee7891_38ec_495a_97e1_b59cc9e3ad61() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_23cc3949_d600_4010_9257_8e0601397137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f94c5c55_d78b_4fd3_be0d_ecc56f15beea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_51f8d673_45da_45fc_a41b_c5a8d0989200() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_568a7e62_1f76_4094_ae91_53516189679f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_80b75226_e260_4658_8f10_245237a4ad1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a907bea0_0549_43fc_876e_7e4a973d0191() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_370bc6a2_bdc8_4207_afe6_add8631331fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_60b4fdba_7541_4140_92d6_4d17402d4dd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c13690f1_c8d8_41f7_a7fc_04ed74a088ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4d06e8ae_2975_4678_ad61_023900ca95ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b4772359_1078_4888_ba83_d1f253b1f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1c558239_86db_44e1_9755_8121b9385755() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a2bd35eb_e1cb_4123_8e59_3031e1313171() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_57eb73b0_393b_4f32_871b_a7237c99bde1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1aaebd79_ce87_4348_be86_71e170ef3561() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_757d2b3f_aeba_4db3_9a7e_efba9acb8d2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_852b511b_436a_4022_a581_c8361f358e31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b9199286_65dc_44ae_a835_54488626a6ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7bf88e82_3e70_48f3_85fe_4eef35eb7c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5cc33b70_1fe8_4f73_a06b_7ebf1696d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_64498bd9_c1f4_47b4_b339_11863a55195a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_72ba1603_7291_4e4e_b19a_2fc10ccabece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bf56ed06_3dd0_4dfe_80d8_33bd5b397ab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f27df727_d098_4d3d_8809_ed944ea933b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_62ce21d5_1a84_42a1_a284_c08dbd5bf52d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6d8cebe7_7632_43f1_97fe_21483cf4fa57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_87e4e8e3_baeb_4501_ad60_6a69ad586c3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b056b70f_34ab_48d7_9ea6_1fcb99d24484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_712741bc_a35d_4d4e_8538_ed682dbb3c3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e9f84464_a806_45a7_a14d_7b42978b3c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_edbe711b_f8c6_4add_a716_58c39f7bf3a6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_ee234a98_2600_4606_8117_d0b09b53316b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8183c81c_43e6_4aec_90af_50f08a358870() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b9bc2559_b562_430a_b1eb_3142e3d146be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_deb29c8a_fbb9_4e87_9f95_4191a41fa7e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2bf58553_9e53_41ed_82c7_a0f6752cfeec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_96a31b87_6dbd_466f_bcb3_5fcf77bbff29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5f908914_9bfa_4f5e_92ad_89e4d7cacc42() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_07753571_1f05_4f43_b77c_38ba10cb2748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_f6f09421_6a5b_4047_baf4_1397188a1ca9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b5df5cbf_092c_49dc_aa19_7d01a8f367ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_38e44b78_d107_46bd_9816_f74240dbbe55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_45076c5d_ffb2_406e_9172_4db36107ef19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6d8cebe7_7632_43f1_97fe_21483cf4fa57() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_64f5f449_f73f_4afc_a4dc_ae9b146302df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_01ef5233_485b_43a6_94f7_687626857894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_1aabcdad_afd0_43e3_a822_718cd1198a7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_77bae181_7139_44a1_b5aa_713274d429c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c7e9d0c2_c013_426c_9646_c690a60e4a70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1449e29c_9f58_4edd_8552_1a692625c9ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8d74af62_a236_49a7_81ce_3597704dfe01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_388bee55_deb3_45de_9f82_cb2387b70446() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3a57ec2f_ce0a_4e8d_9069_630d327567d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_40423214_22cd_4a56_8856_176719d29f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_75d3a7d3_886b_406a_8c44_7428e82516b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_095c31c0_2037_4562_a2f2_e2ed5aa038e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_87e4e8e3_baeb_4501_ad60_6a69ad586c3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_02b2c1b2_5636_4b6a_ba2e_4deb0cff6cd1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_25f9dd09_24b6_4636_b217_8049165370f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_42653d31_cad8_4f4f_8967_8df6222ceff5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_00770ee1_e2a5_4d37_8f53_064568593d48() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_42653d31_cad8_4f4f_8967_8df6222ceff5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_01ed684b_0d68_4bab_8c60_bbb1130462ab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_49af8968_b9ec_4990_9bb6_235514e7a633() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_8eaf8a0f_4a92_48bf_8645_ad90823464d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_00770ee1_e2a5_4d37_8f53_064568593d48() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_818fff67_cdb9_4f61_96f4_b8a91f736032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_03d7373d_f7db_45e8_bdff_aba6423a7d05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_569e4181_3ab3_47ea_8476_160dce8960d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_420c4423_eba6_481f_a57a_033a44079ce3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_03d7373d_f7db_45e8_bdff_aba6423a7d05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e1e8cdeb_3d02_48a8_8da8_470ef9f1c571() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6aa75ee1_a139_49f4_8b6d_3b116542d4cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b09bb88c_cb68_4b9e_989b_83eda6dba654() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3770a28f_49e5_4074_9191_5be0d7bd12b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0efa0968_79a4_4a4f_a0a0_3d7aa2d589fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c35e63ed_59df_4610_9e6b_cf3c80dbc704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5bee1966_5e60_47e0_848a_7905dd591c7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_7a65b6a9_33d9_418b_a1d2_8915591b57ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d861fea6_5b9a_4c61_87c3_268fee419451() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_99df2b99_293d_4234_b27b_30d7cfb3a968() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e45fbff7_a0d4_46cf_b12f_fdbd8394cdca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6c41eb87_1daa_4ab4_a24f_487effc9cf24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_fd019daa_2241_4194_8a6a_b573026e7566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_98c4b2d8_e78e_4cb6_9da7_d8875a3e07fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_92465c43_2ddc_40c8_bd2d_9bb8d8341afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_25c21292_520c_4dbc_875d_6c2d4848059b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c9f64a04_4e7c_4351_8fe8_74eb29fc6372() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_59f145b7_68ab_4938_b2b8_307a43e3ce41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_da9051db_99e6_4b72_b877_63cc38e66950() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_585d3941_2f50_4e99_9798_4430b539b165() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_dba89110_4c34_43ef_be35_1eafbb821cf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_88f88cbb_504a_41c1_9dec_450f2e50dd7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_9398b375_3c43_4d45_aa4e_ebfb0533e9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_152fdaed_1509_445f_9780_341493f5aaab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_776cd8d1_e285_49b9_9990_8dd13e35085b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_de98c634_292d_4e4a_a9be_9cbdb1453ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2832bdb7_d979_4ad0_a753_dbbb06825b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ce9d2271_283b_4be6_b84f_1faaed0e968f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f369ba0b_9961_4f3c_970b_8bafdc9fd6f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e95d1062_4578_4eaa_b67f_97442ed3ffc2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_891dd467_e561_47f3_a362_bfd8533fa19e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8ef717ec_79c1_442c_a2c0_b93be262dfaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ce67a044_2962_4576_9f28_69d9a13044c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c202a3b5_d46d_49e8_824e_bc7c6c0e6a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_34fa767a_dc6e_4d9a_bbd8_a5f62b27b3c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_1109a239_5947_4f39_9bd4_c79f0f72a55c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a2910c15_9bc3_495e_955b_a42303cde52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a206878d_2302_4002_9680_959dd742eeef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e2c8c77a_c36a_4c47_a999_f8e739d42e58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_74dcd886_20a4_4550_8ad4_e26ac5a58a13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_170464d2_7c6f_4641_ab45_ee1e93aefd84() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_23b82137_1379_4052_b6dc_8c1d95128ff1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_731aaaa0_aa7e_4355_9070_9b935d911066() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_75299203_d8ec_45fd_9d65_98fa20789412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e537b67a_9a8e_484c_aca0_5b0a8b3a8cb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e98c7290_42ea_465e_85f5_f32168a0e98e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_207f6472_fca5_4bc6_983a_b6a6d4bfce69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ea18208d_c1b5_4aed_9674_12f9e5cd9f97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_803cc1e7_604c_4f2d_ade9_f3e9931986d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_231c0056_4985_4a15_908e_ad76858eee3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_dc1ffd2d_9073_4e07_8b58_fd9021a3b42e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3bb32a82_e88a_423f_8752_d5bede16ce18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b09bb88c_cb68_4b9e_989b_83eda6dba654() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e6f09294_9cfb_4923_a0bd_203b6960f0a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_134aa7a9_5908_4638_a8b8_9d09635541d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a5ac7375_feb5_49ae_89b5_fba99a412a90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2f20bdf3_1752_444a_8b48_86396c4813ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_482c2051_7c8b_4dd8_ad57_e59f6fd00cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_532a10b0_cec4_4763_ac4a_b261b1b62b44() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b5ec3c24_c897_423c_9e32_e883407e380d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_06405b8e_7fe7_466b_bf3b_40ff5c3a6263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0477ab11_0f6d_4536_9a94_fcc2c0849885() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_06938022_06b9_4be0_9470_c454eb5b3d7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_369894d0_172d_4f2f_970d_964e34bae181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_292627bf_09aa_4fa0_98f0_89c127b4d642() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5e7ec1cf_6737_49f0_afe8_6c1d2270b060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0c978632_7497_4330_8302_4b1c5c97ace5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_705da8d9_fe0a_4ab3_ac70_4ca8b5b7dbab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6703009e_7a8a_49d2_88cc_7116394c5d17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b775ffbb_eea3_4c89_9665_c3fdfef72498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_bcfda23e_5ad3_4c58_9354_cf4d72843225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a59e8992_85cf_4c11_b7bf_a0f2e37b64b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_be427e26_a24e_4d0e_a651_bbbdcdcef432() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_2bd3b0c3_534d_4d43_b13f_149f091df9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fb949175_9c73_4709_b3c3_00249f0e2b65() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_7a84bb9c_e9f0_4eb4_87c0_ec8c28a07376() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1d921567_2c1e_4fcb_b868_e9c06dadd7d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_ba217f67_eadf_4060_b567_ee078b8dd154() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4f626321_6ff3_4653_8108_50e98aba4bf1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_59f6c3a2_7200_4a50_89d3_c6a55bd4e245() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_48e56d99_2ec1_43da_9e88_ea4d483c7826() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_331f7f64_351a_491d_a5a5_9c10507d083a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3b1605a3_afac_4d4b_82a1_9599aeca969d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_3301f7d5_623c_46ca_a795_243a2b0115d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3c89a5f6_da79_4175_9b0e_95f78c683f94() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_209530a3_f380_48a2_84c1_5ec6d4a10965() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c05ed265_5543_442d_b3dc_4f9bf16e99db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_d8b6710f_e58c_4d1c_ab1a_4ba079702e8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_3301f7d5_623c_46ca_a795_243a2b0115d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6101fe33_1821_494a_ac59_a1f726a3d52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5fd57764_dec7_43bc_902a_5b5896f033e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3ae4a2a1_764b_4631_9df5_67e7126bea6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_191a58ac_584a_427f_91be_79b5da0c542a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1c892525_7960_4643_b088_705e00262007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_a54c37a3_00d6_400e_bb6a_c05e4a89cb4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f26d649c_4083_4346_8537_34c54606d352() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d8884e2f_647c_4554_affd_b3a3b4b2087a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_69f5e7be_6221_42f6_b97f_0d7c3a5ccfd5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5ee0a6fe_7335_42bb_bd26_9f98a579b9f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b013dd23_51e7_4488_8ef6_b73ef1fd3e80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e1c53e7c_f314_4c4e_991d_cda53d5cf808() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a57061f7_50ee_4e3f_aded_fb67c8a39d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_10676a95_61a2_44fe_9314_963600d4d8dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_731aaaa0_aa7e_4355_9070_9b935d911066() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7de6c5c2_9aae_4b35_8cc2_c1fe954992b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b498d9b3_985e_4d9d_b29b_9c3045dc11ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_bd315b8b_e503_4e21_b890_acc9c6c2a332() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_58d6fee2_529b_48a0_bd6a_373ca8c281f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1a1c53fb_ae1c_453c_bdf8_1a0cca96ee6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_79887937_3b75_48a8_bbc6_844389c81975() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_859082a5_7531_4f30_b10c_8f025ba183fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c4234177_ddea_44ca_8de7_63ddd7eaba9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_42e9d229_375d_4306_89bd_d6180b1abbad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c05ed265_5543_442d_b3dc_4f9bf16e99db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9599ba02_82d6_4346_a876_c227a78ffc3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_fcc3b482_40be_4540_8197_c33155c871cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_6998c1f8_d7f1_4ae5_84ed_d629a7ec7ec9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0520ea69_8105_4dec_b3de_77d6523cb5a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8183c81c_43e6_4aec_90af_50f08a358870() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_99794316_abf3_4829_9979_afda1abc156d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7bf88e82_3e70_48f3_85fe_4eef35eb7c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_61a460aa_4cb5_420e_a103_daa836b5171a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_18971e1d_253f_4b42_ae7f_7ce2da6729a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f97be7f1_e384_46bb_b3a4_1637eeffc69a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8d74af62_a236_49a7_81ce_3597704dfe01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_01fd0d1f_8c05_44e3_a8e9_5fa433c10d2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_ab6e58ae_4bd3_42af_a269_64f4d87e3402() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_63f0e6c7_5b08_43ad_ba94_0fde4b80cf85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_46bc51d8_135d_4220_96ab_0778f9f610e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2307f200_7b9d_409d_bfc3_5e1ee5fbb42c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f94c5c55_d78b_4fd3_be0d_ecc56f15beea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f7240e90_e5d0_4d87_b2c8_af39b6905312() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ad3d53d3_b4ed_468b_b210_cec7229d81f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_59f6c3a2_7200_4a50_89d3_c6a55bd4e245() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_054160e4_733b_4d82_b02d_ffafbe56fead() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_34831057_edd8_454b_a62b_0cf101905b76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_77e8c0f4_b3cb_4948_b366_fe0755a687dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f23c2913_5f40_48ce_8772_4d4a6fec54ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_58a81e7b_aab8_4bde_9dbc_1ea6fed606b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8f07f72e_f367_4265_a10b_7be7e14eed6c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0186b02e_1193_4c85_910b_c020cb41367f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_5fddd0a1_495e_45fc_9b38_1924b33f1e95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_d355950b_d9be_4216_bed6_47f5099b7af5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6f259ef0_82c8_4a3d_9a54_e0492f3fd1f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5ac7988e_ef2e_4978_a509_01fc3c287ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3274b618_980a_4b19_bf36_7ea8e8de121f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_84c9b48b_484b_40a1_9266_2fca3b54c173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bdaecf8f_4ee6_41b0_9efb_ce684fce5fff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_acdbbf25_0f40_444c_b8c9_e695392d82f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_373054b4_59d4_45e7_ab31_4282cbad3770() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_34831057_edd8_454b_a62b_0cf101905b76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4dbc9c60_79e2_46eb_aef1_fe9f60ccb4a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d7ae68b0_5b97_44a0_b543_98ff72eb9a35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2f2798ef_f2b9_4772_b35a_74397854eb77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d3c81b74_c8c1_4824_98c8_02a54d933723() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0c978632_7497_4330_8302_4b1c5c97ace5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0efa0968_79a4_4a4f_a0a0_3d7aa2d589fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1448abc6_740b_4016_95b3_9329fee0232f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0aab9ae5_d51d_4a40_adf1_5bae976eb1f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d8b6710f_e58c_4d1c_ab1a_4ba079702e8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d8884e2f_647c_4554_affd_b3a3b4b2087a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4d3a4ecb_0e8e_4740_8875_796025637c5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_290ee586_c2e7_4809_8a2d_b0b592bc780c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5c41eae0_e34a_472c_9d99_0c550eb25690() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8ccdf212_a716_4053_b957_444b9a984be2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_18aaebe0_36ab_4093_880a_be0a748ad44a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_202c0a5f_50ff_4f13_8aba_f34dbf03c88b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_44db7931_24ba_486c_9ed6_ae1a5ff0de64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_54181e4c_bd59_474a_8bab_a812bb9a5280() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f6aff357_476e_495f_9fd0_216cdbb2ff04() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_17c7d914_2f0d_46da_97e3_34de2bae69a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e19cb88e_32d9_4618_89db_5585efc56498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e8320f90_7d06_4fcf_9127_fe995f264947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f5998728_2e99_4fb1_a0d8_73e4fe29b107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c3f5d853_3294_456a_b6f5_8d1770d4c706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f157031d_a927_418c_9801_2f717688f827() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4d84cb57_23f4_4fd5_904e_2d9cc1bf1c77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_373054b4_59d4_45e7_ab31_4282cbad3770() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_35196c56_0140_4661_ac4d_fb3786f726ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bfcff9f0_0d21_4402_af88_fa4ea3f9a78b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_694cc508_8533_4370_9aab_fa1a89228467() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5744b908_2309_4527_9014_e30bf2fe329d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d40f004c_722a_4959_9fc8_125a6778b552() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_1ddbc9b8_c279_462e_9540_3e6b194602cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c57d4bde_8ff5_4158_921b_352f5edd5598() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_989ee809_e511_404b_b009_e005e2af9248() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1fb108c4_d8de_47a5_8858_6499eea4f34e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_292627bf_09aa_4fa0_98f0_89c127b4d642() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8492da1e_dc07_4d30_aaac_d03d44929691() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4fed3a50_e8e4_4545_95b2_223bde220038() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_edc00cae_b2a3_44e4_ab1a_57da12292e39() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b9fa3c39_7a59_49b5_8b5c_bef3affacb92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_311806a2_22e6_4c1d_9453_45716fb6b95d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f46f00d6_c59e_4722_a85b_e4e2c303a86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4dbc9c60_79e2_46eb_aef1_fe9f60ccb4a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a58f8da5_ec99_4374_882c_85e2b081e60f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e85619d8_16cf_4e07_95d8_9009216a92d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_4d3a4ecb_0e8e_4740_8875_796025637c5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6c2c32d0_efd0_4484_b5ef_05bf47d7f39f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3043bcb4_364d_40cd_9f39_be2317e8449c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_10676a95_61a2_44fe_9314_963600d4d8dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_96d79ab6_39ca_47dd_8027_8f72e8853c47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_e3907d6b_f302_492a_b8cb_c3eef367348f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_07753571_1f05_4f43_b77c_38ba10cb2748() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2a87427d_498b_46fc_911f_e0edcde83ea1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_225366bf_5b96_403a_8c91_5303b3f0a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c4609263_ef06_4de1_b054_8d854b8d3eb5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_88e7fb96_7d57_4ada_9ede_fed19f3273e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_95a01bd5_ecbe_41a6_bd5b_6714dd84edc0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_44dfa3b4_1000_4150_885d_eb825f5a0047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_bcc26970_59bd_4ef3_95d0_9d90c5e76956() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_006564b7_92fe_45b3_9a12_89b513218ad8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_054160e4_733b_4d82_b02d_ffafbe56fead() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_9fab06f0_d3c8_4ca3_9853_1b26b564befa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6c5faae5_83a5_4cd4_a8d1_518abaa7ebf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d1d59cad_5211_4481_8518_f1b0ea15503b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_1da39b39_46f9_42f6_b518_de5441c393ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2b5e68d5_eaa8_4782_8fb3_35bf15e55564() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e9f84464_a806_45a7_a14d_7b42978b3c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_051f74d3_b144_4f02_bf50_2e7c3c8c5f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f7c05bc7_7fa0_4459_9953_95be409debaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1e71e19d_a256_47c3_b974_ee3ac3567a5b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8853697c_2baf_4864_9fdd_1241bf33f9d1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1a9bb200_f515_4049_8ad1_1111dd94f9b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2a87427d_498b_46fc_911f_e0edcde83ea1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_776f4498_57d5_4a8e_9db1_0add0ec8cfc3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d6ca4d25_5e54_43a9_9437_79d63275f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_ccd75a8b_6fbb_4485_868a_0ed0c19fc570() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5e7ec1cf_6737_49f0_afe8_6c1d2270b060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_23b82137_1379_4052_b6dc_8c1d95128ff1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_acdbbf25_0f40_444c_b8c9_e695392d82f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_44db7931_24ba_486c_9ed6_ae1a5ff0de64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_279d9e18_40ff_4fd3_9620_0d0b70e282bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3c56c142_0b54_4221_9a14_0ad94d455bf3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2d9bf204_0846_4728_8a68_af588d56a2c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_590d5623_4df0_4615_bcb3_cdf401d089fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_63034043_97d5_4c57_b61a_afa41faefcec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_31dab31d_86a6_4ab6_8be3_3906d04eac1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6bef330b_f453_4e05_89ea_5959bc908fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2267bd43_5b1b_4e37_9989_818e70f0f671() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f462266d_f2e7_4644_83c7_ed8c5d0c3fac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_65fb5930_1bf5_4bed_9793_448cb7212c99() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_da901ebf_0c33_44f5_a5f7_8e5fac489aaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_59f6c3a2_7200_4a50_89d3_c6a55bd4e245() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e1022359_5a75_4059_b56a_d0e56c6c0624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_426aad42_fdf7_4e45_b76e_7a4c9d211ad9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_410d3d6a_3142_4d6c_bb4b_ccec07654ab7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_01ef5233_485b_43a6_94f7_687626857894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5040b327_01c7_4a44_a9e5_98184c146baa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a5916754_3844_4b44_afa2_da745d867b97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f049f7c2_a174_4f96_926a_83eaab07c263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_202c0a5f_50ff_4f13_8aba_f34dbf03c88b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_73323ad7_6ad0_4d30_9f8b_2ea176dc8500() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_6f697b70_670d_40e7_9468_5c1c453ea22f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_8e72351a_070b_41dd_94a8_9358af98677f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_7ae560bf_409f_4d40_b570_544b2fcccab5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3f459302_0b9e_4c6b_83d6_b5bd0a17ff90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6c925021_cc26_47ab_a4c7_e04f0132078f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_07145161_86c8_438e_a97b_1142af050e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0ef02c1d_79da_4829_87a2_44ee0dd57f75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_60b4fdba_7541_4140_92d6_4d17402d4dd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_324f53d1_14c1_421e_bd3e_2c18f06209ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_af0d8ce6_ce4b_4cd2_80f6_80bab56478f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2bd3b8cd_4a44_49c7_8e3a_2251035b70a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f64c9cb6_ebd0_4963_a522_4c9710d18107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e861a9c8_d352_4044_ba99_c5199317b697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8956b178_bf58_4406_a81e_e80c907655dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_42653d31_cad8_4f4f_8967_8df6222ceff5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f5a83bc0_c8ab_494a_82ba_f6673deeddaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e27ae4c0_e5b1_4df7_8613_117ec091e021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_add2fe1e_8170_44ee_a299_c7889fff0c4f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_60fbb24f_18b4_4955_b2b1_34af2cc7d7a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_adccc442_ad7d_4c64_a5b5_23bacc7577f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7a425cee_f8e9_4d1b_8009_5245ce36bb31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8fd35ce5_7933_421a_a8b3_6550e24cb7e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_10dbec00_7f29_4695_8482_781fe9d8462d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_34b4dc08_59ed_4fbf_aa88_d60c79391ece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ec39a0c9_2323_4471_909e_337347b1b7ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_aafa1de2_9bbd_4155_b625_7aa9f0475a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8209b9e5_83a3_4a26_b31a_eddcde6c903d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2b12da1c_6c29_439d_b2eb_8c73fcdb509a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4087f2dd_63cf_4c1b_a969_7ae4c8aa7e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_77f7d997_713a_45c0_bade_5e7aa5ed12c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_046186d2_0a9e_4a94_a8ee_30ef5e9e9991() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e99d933e_dbfc_4186_a5fb_d01a48bbfd13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_989ee809_e511_404b_b009_e005e2af9248() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_69e97de1_51ad_4204_8a9c_6886fa84c250() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0b062058_684f_470e_a7b0_09f59c2ff93f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_39404c94_7903_4a27_a397_e2aaa87ebcb2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_514f0370_4aea_4da0_ad32_7b69567fc0c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_15aba3b8_faf7_4d1d_9490_b70b291af662() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ddc440f4_7e2c_4aa1_bf8b_42b7ec59fcd6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_01e25675_51fe_47fd_875d_e96271c36e8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_7a093284_0578_4958_9ef3_27ee0650dea4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_78bc5979_601e_44e0_974a_8952a5666073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d8b6710f_e58c_4d1c_ab1a_4ba079702e8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_8fbf3b60_c8fe_49c1_80b7_5562f73c7438() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a9f2e834_1d31_4b6b_9fce_3a3a62ca10a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7a06bd60_212e_4a68_91fc_7f275ae59c56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_f2d8dbbb_8c31_4de0_afd2_508d6eabcaea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_00cd38b2_1287_4399_b525_a6af4e962fda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_90cf6754_6402_4df4_8280_1a5945e38e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c0294b23_a968_498a_8d21_b312b94b9596() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cb684d6c_f621_4afe_909f_916f5253ef33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c7d189c4_4fd3_4911_8d2d_44fa165fe888() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f2f4133d_dff7_4721_b106_ab7748dd54e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d418e39f_f8e4_4383_bd08_f65e1f63258a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5cb9611d_55aa_43d1_9424_7185c7d6982e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6aa6d66d_1d99_461d_b61b_2f00d7bb25f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_13296526_4606_4635_a47d_35a9a4f1b042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e8b57719_9b00_4143_ae6e_2161c0087e8b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_13de9847_f012_416b_b3d5_913de8ecfc7d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_358739ea_aa07_4299_b6c8_fa188004b44c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1deca706_fa97_4c2f_bd4b_8f1fd6de1df8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_efc49b58_fd44_475e_9491_2bace5012ccc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f011d5fb_aa07_48b0_9cd1_af0ecca41dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0724312a_b2d5_4d2c_b448_6e5f41191310() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_afe8e6b4_d557_4cea_b4e6_6398c40db84c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_36411eac_8d22_4efd_b273_d6d4a2142894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b26e001e_3f06_40ca_ad6d_3f99d5d06f12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4f750753_a2f8_4503_9272_caca33cb3835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c4189ee6_cc2c_4cf9_95aa_ef1477dd9032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_71112c7f_2f0e_483c_a3c9_70bc7c8c5dea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_86ada2b9_4bc5_4837_8bcb_373188b41272() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b7cf93b8_c866_45cf_b648_e798274d5a1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_95c51af9_65a3_4bb8_9b7f_298c72d00553() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d5377c00_3e7d_470c_9a72_cee3dda8a276() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c451a034_a863_421d_9e83_2ce4678e167e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0520ea69_8105_4dec_b3de_77d6523cb5a7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_fb949175_9c73_4709_b3c3_00249f0e2b65() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1d66842e_93d4_475c_8ca0_406af05c9649() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_8adefca8_7981_4b19_8ddf_d7fb06fc31b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ec39a0c9_2323_4471_909e_337347b1b7ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6b100c66_d328_45b8_99bb_50c341be8b88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2c9f165d_8f63_4803_8577_01931ba783da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_0cb6b031_c257_4df6_93be_8acbcf294a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_751fcce6_d6c8_4838_9740_908b59b0c0e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fcfcb8c0_5779_4e1b_af0d_efe6e456e620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_3b1605a3_afac_4d4b_82a1_9599aeca969d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b1f24f98_9179_49fa_a25e_6c7c84091ca1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6cd7fbf7_36bc_4595_9585_096498db3c8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_5744b908_2309_4527_9014_e30bf2fe329d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9e483280_5460_4afa_8d20_f795d40f47d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fa639bd1_ae8b_4dc1_bd1a_96d81e46da0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a57061f7_50ee_4e3f_aded_fb67c8a39d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_74f4dc62_5d95_4315_b36c_d759d182c181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_309b990f_f638_4d49_9d57_16288a71eea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_951ec70e_0267_433a_8343_2b6952f611aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_35249559_9326_4c96_bd1a_8a1c9f7308e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_191a58ac_584a_427f_91be_79b5da0c542a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7f1539f7_71c2_4cad_aacb_052deb2bb33f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_88f88cbb_504a_41c1_9dec_450f2e50dd7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_97d592e7_754b_45e6_b7a0_21d4e1b2de17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4f750753_a2f8_4503_9272_caca33cb3835() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b6ee810a_ec23_4e5f_b925_92806ea549a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_add2fe1e_8170_44ee_a299_c7889fff0c4f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_818fff67_cdb9_4f61_96f4_b8a91f736032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_5f908914_9bfa_4f5e_92ad_89e4d7cacc42() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_75ea0576_3de5_4934_97ec_9d6d26cf9eba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_411587a2_aa72_4864_a871_312abd9e3cba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fc6cb7c7_89ee_4030_8d14_b28e0959d89c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f7c05bc7_7fa0_4459_9953_95be409debaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_844acbbe_17c1_47cc_be1c_c9d2a43bd9d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_72da67b9_087a_4858_9b2d_50c5d879dfa1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d16910d0_fe53_4907_8be3_c2764872ad70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5b636626_176f_494c_960c_2aeec6e8c9d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_9123309f_2b1f_44e1_a3b8_b901103ff8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_68f98558_29eb_40c2_b40f_1323f09db799() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_17b5a9b1_7ba8_4221_b589_a55bd1f7f543() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_11ae9eff_9488_4c4f_8ab3_ea17446c6c06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_25a21414_bc5d_47bf_b579_717676a42a0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1ce0146f_3fe1_4611_8673_0e71d8f8c389() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3f3398ad_420d_41ad_a999_ba7e79eb5244() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_a3d5d177_d480_4fb7_a9d9_450e612a225f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bf110fd2_b7c9_402d_bdaa_c8fb9bb22110() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_62198a5f_3d75_421b_9546_aba8b1c58542() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b250f4c4_7df6_437b_9d44_c75774c14cea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_309b990f_f638_4d49_9d57_16288a71eea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_522d62dc_bfe2_4891_860f_6c36483e7772() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c202a3b5_d46d_49e8_824e_bc7c6c0e6a5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a2ce0981_0c79_4bbf_bc6f_a506728e3223() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1be72399_bc03_4d1f_8c12_27f584a3038f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_63f0e6c7_5b08_43ad_ba94_0fde4b80cf85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f45b0b22_247e_4918_9216_2c4dfaab5019() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_30b97351_0551_44cf_978a_76520fdeb8cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_14992d0a_121d_4ee7_aac6_99248c2af879() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_39851f32_c6b5_41ac_83cd_eda434a3d443() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_19673009_e08d_4c48_8d17_85077959f944() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_97a65ee2_94a6_42e9_b552_764779f519da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_77f7d997_713a_45c0_bade_5e7aa5ed12c3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b498d9b3_985e_4d9d_b29b_9c3045dc11ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3a85be31_69e1_4628_b68f_062f88e6a9bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6c41eb87_1daa_4ab4_a24f_487effc9cf24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_56c69a57_f7a2_4ad8_a152_cf882b12da81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e98c7290_42ea_465e_85f5_f32168a0e98e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_feb814e5_d0c5_4776_a9cc_22ff0a67d46d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_84c9b48b_484b_40a1_9266_2fca3b54c173() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_94e61289_5c99_40b4_8e86_bce683d238ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_dba89110_4c34_43ef_be35_1eafbb821cf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_809af517_ac01_4279_aa38_a5e585bf05ef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_48c488fa_b6ca_45e1_8009_c58af9f286a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_03d7373d_f7db_45e8_bdff_aba6423a7d05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1aabcdad_afd0_43e3_a822_718cd1198a7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0aab9ae5_d51d_4a40_adf1_5bae976eb1f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_daf44f99_9943_41e4_92b0_c249918a7d15() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0d7c39b8_08fa_4ad3_8989_7e028f726525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_fcbf4709_ce77_4076_832c_4db2a5f01ea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c7e9d0c2_c013_426c_9646_c690a60e4a70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4111e63b_6ab7_4ea8_abc1_8768264f749c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_481b1d47_bb73_4cd0_9dbf_39472bfc08a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_897e7efe_33f0_4881_9493_2a189e99cc4b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_75a7d86a_7f78_4603_90e9_5d8c0fbf9e11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6c2c32d0_efd0_4484_b5ef_05bf47d7f39f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0caa00d1_463b_4a6e_870c_17ea4fb46939() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5b629202_3a60_41ea_89d4_c2b7e2a355ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c35e63ed_59df_4610_9e6b_cf3c80dbc704() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6998c1f8_d7f1_4ae5_84ed_d629a7ec7ec9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a58f8da5_ec99_4374_882c_85e2b081e60f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_311806a2_22e6_4c1d_9453_45716fb6b95d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6b6b1cb4_ccc6_4034_b6cb_166fac56dde5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2326342f_d981_4249_8917_81c6971c40e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_852b511b_436a_4022_a581_c8361f358e31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f7e62e76_756f_41e2_933a_ae84ab01d925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f3d338af_1cb0_4e73_a69b_c92fd67543b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a51738e8_8ff7_4126_b187_4f54855e3d07() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_893fb587_d247_4eb1_b160_e4f546a7b6b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8b3784a2_ec2e_4c7f_bc8c_c4c517f82184() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_dc0b4f95_5ec2_4c8e_a94e_348f9b206903() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_54432884_1fbb_4dc7_9098_156fe308cb89() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4e16bb6e_0d62_4d67_9174_f9e4f9cde3f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_fcbf4709_ce77_4076_832c_4db2a5f01ea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_1d57b98c_249d_4d04_bcd1_3f4cddd13527() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6b74499e_5f15_4683_8269_0c0970dae96f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6bef330b_f453_4e05_89ea_5959bc908fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_31b1f795_b60d_4155_8803_05922ff69613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_408775cd_ec84_4fdd_bb73_bf3479985454() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4d84cb57_23f4_4fd5_904e_2d9cc1bf1c77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_36411eac_8d22_4efd_b273_d6d4a2142894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_09043cdf_5731_4335_a8d1_42c5721a48d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_0a726183_d170_4a2d_a10d_0b06f2ce4053() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3688d2d3_2cb3_4a87_8062_4c4e7f9863ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2f20bdf3_1752_444a_8b48_86396c4813ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8ecffc3e_b80b_4a4d_92b9_f5268ceda959() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5f3f3f9a_b7db_49e6_aefb_43f508ff1f8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5c8573e8_4537_4701_a812_58c8a001b783() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_370335e6_1795_4d75_a7e2_3cbe3260a43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4d0df127_5ce9_4266_9462_01f809836673() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e1d0cf0f_0f16_4244_a47b_bad0df347eb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_056214c9_5734_48fa_a170_524e37000e85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e71a78d9_6746_41f7_9a76_2121770e42ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_34fa767a_dc6e_4d9a_bbd8_a5f62b27b3c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6e182204_2325_4779_a1b6_6d9688e3aa13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c23a4b41_c833_4c99_845e_dfc047045f7f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a874b368_55f5_4a34_9ab2_37edc2df2cae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c37adbe0_87ab_4f00_aeaf_e17aaa9662ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1c892525_7960_4643_b088_705e00262007() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d93a6b7e_025f_4c89_b301_8b5c79387a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_52a2a986_b76e_4783_9785_29d56cb7c452() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f9b1b82d_3349_465e_bb61_9f4a578abe2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f16b00ec_60da_4bdc_b1be_dd86df39e52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e877df89_22b3_431d_a34f_44700be5237d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_cafca234_eb5f_4fec_ba97_8d8b6b412105() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3a85be31_69e1_4628_b68f_062f88e6a9bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_cdc487bb_a5e4_49f2_91f4_12467fa87b47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_279d9e18_40ff_4fd3_9620_0d0b70e282bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_551a37ff_c5b6_4662_877d_7b32232124b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_dc717223_ea69_4938_8e7c_0239f698bc19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f8625fff_7419_4fc6_940b_fe463cc08b05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7a425cee_f8e9_4d1b_8009_5245ce36bb31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_6998c1f8_d7f1_4ae5_84ed_d629a7ec7ec9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_62ce21d5_1a84_42a1_a284_c08dbd5bf52d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_dc0b4f95_5ec2_4c8e_a94e_348f9b206903() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_10520ce8_474d_41fe_8eff_23fc15adef56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_408775cd_ec84_4fdd_bb73_bf3479985454() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d8dcd83a_7bb0_46fb_a883_364409f6ff72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c1ec123f_0f0e_4425_a81f_8ddae93d361c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b69e63d5_fd8d_4d2c_aa93_b83b622069a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ea6d834e_c25f_4d0d_9560_c6399c59d010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b2bf2174_e0ec_4e93_96b4_f8c12dba7ec7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_20ca20b1_be92_4e73_b5fe_0a99b9d61492() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_893fb587_d247_4eb1_b160_e4f546a7b6b8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_888f0e9e_cd95_459c_b30a_c9a220d1f2e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_888f0e9e_cd95_459c_b30a_c9a220d1f2e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3580e7b5_17ea_4286_92ff_195e213323e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c05ed265_5543_442d_b3dc_4f9bf16e99db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_035cdcf6_122f_4479_9cdf_1ff527286b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0b739275_02f0_494d_8cc4_7438460799e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_44ccd14a_0fd4_45b6_9c63_a6c5d1568ee3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_729d1a6c_edda_44e2_b923_89b45c9ca179() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b9199286_65dc_44ae_a835_54488626a6ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a5b62b48_9c31_45f7_8238_d233ee38258c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b9199286_65dc_44ae_a835_54488626a6ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_095c31c0_2037_4562_a2f2_e2ed5aa038e3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c05ed265_5543_442d_b3dc_4f9bf16e99db() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c07a70eb_a070_46f6_a707_8e66cdc571fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1d3345b9_e249_4f3e_a3b5_56474c6fcf6b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_01fd0d1f_8c05_44e3_a8e9_5fa433c10d2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a3d5d177_d480_4fb7_a9d9_450e612a225f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0cb6b031_c257_4df6_93be_8acbcf294a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_30beac97_7803_4da4_bf69_0e37f9feec91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c7056859_41e8_4ecc_8d29_d2c5947eb16e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4b600242_6994_4929_a1dc_bf035db62a40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9e294aae_5223_4484_bed5_b29af85b097b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b11f0a88_08dd_4143_b40f_12b4ac993dcd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ab38e9f2_16f1_4ae2_ace1_4bd50a35ca02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_47d3d8e4_edd8_48eb_b966_f7d9e3cc6c3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f187775d_d354_4938_9e82_7c61328c2e03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_04f52b54_c600_4a0b_9e27_2ac4f08e7378() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f1d2af93_6d70_4330_905a_ed536e36743d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_3698a8f3_9a74_4b0b_995b_2d37859a6b8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_1ddbc9b8_c279_462e_9540_3e6b194602cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_30beac97_7803_4da4_bf69_0e37f9feec91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_54eacfbc_94c7_4704_83cf_32f232933c9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7b8fd12d_a160_4f8f_ab50_2b534a046413() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_9f55e98b_5266_445c_a075_24f23b4c3003() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7318e19b_6930_4c32_8fcb_e65cc418e1c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_61028804_9cb1_4ab6_a016_c4890cc834da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4992d0e2_4483_4d63_bee6_c61f48caa9ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c54a7d11_55ab_4d97_8ae4_43186b469c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d31ce131_6ac0_4ed4_803f_c87577fd4f17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_86096c58_7eb4_4e8b_8b04_2ab89ec27469() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c31c2038_a6ed_4314_b077_360f57631e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a3cf341a_a9a6_4de3_b69e_38d274b14fc8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_223517f5_1076_4f41_8f8a_9f6fd2697bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8d0eb2fb_4fea_4bd7_a6a5_c195728d9e1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_bf21c91c_cef0_41f7_b6c5_1dd7e7fc611e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f0120469_3428_4ad0_8568_a2fc5d38c5be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e170d5e9_2af8_436e_b53b_8e7d23040ada() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f7e62e76_756f_41e2_933a_ae84ab01d925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6bfd7e19_5fa2_40b6_b628_3e090b7291f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4f626321_6ff3_4653_8108_50e98aba4bf1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_17676952_3831_49ea_8e89_516b6c4f39e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_aec2d1d5_c090_41f3_9369_dce8eea327a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_eb2e12e1_c896_4a74_9752_b9eea4582464() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e6f09294_9cfb_4923_a0bd_203b6960f0a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_59f145b7_68ab_4938_b2b8_307a43e3ce41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_eb4d0fde_56be_4727_81f4_efc642596141() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_467d1497_ef09_4cf8_9d4a_2e42ee656624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e0b8ab0e_88b3_48c0_ade1_e54af831c5cc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_deb29c8a_fbb9_4e87_9f95_4191a41fa7e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f2616ad1_81fc_4f13_afdf_817c416647bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_594aff1f_ccaf_4de6_b340_24d579e2b144() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c3f5d853_3294_456a_b6f5_8d1770d4c706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_49e92902_ecb4_4501_a13d_716256d259ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5db123d0_0ce8_4374_bc32_0656a7e31b3e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d5377c00_3e7d_470c_9a72_cee3dda8a276() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_370335e6_1795_4d75_a7e2_3cbe3260a43b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e27ae4c0_e5b1_4df7_8613_117ec091e021() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_3d3df9fe_0021_43d5_b94b_4dbad3123b5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_feb814e5_d0c5_4776_a9cc_22ff0a67d46d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4ebed85b_b770_44a8_a578_a1760250fb8f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_4ea33365_4145_4765_82e4_ceebfaaff96e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2bd3b0c3_534d_4d43_b13f_149f091df9b1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ba59dd74_936c_4159_b62a_55c975c0eb47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_40423214_22cd_4a56_8856_176719d29f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_408775cd_ec84_4fdd_bb73_bf3479985454() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d16910d0_fe53_4907_8be3_c2764872ad70() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_39404c94_7903_4a27_a397_e2aaa87ebcb2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_4bf58963_ef25_490f_b4b5_f4cbacd3b2be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7316e54e_18c8_4569_97d5_f86b3e9a746c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_19bf1445_5581_4d23_8a67_abdfa6fbed06() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f6bbd26b_ba87_4c71_8375_8acb37743d8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3047c64b_5602_4c47_9ba2_2f57df36b75a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f5e7dfd1_30df_4e97_a6bf_b2175368a5c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d6ee4fe1_639f_48f6_a4fa_fda54f6aa5ad() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_e0102bb9_852c_4dae_ab88_f98c0698c95c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7fd1879f_4a3a_402c_b6f6_f93cd5714439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4bf58963_ef25_490f_b4b5_f4cbacd3b2be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_cbbb7f67_ae7c_43ce_9dfd_98814fee75fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f53f1f82_3808_482e_9a9d_6fbeccdb1b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_af0d8ce6_ce4b_4cd2_80f6_80bab56478f2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_476cbb75_d885_4e10_96aa_973202f7685d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a85c5abe_f532_4ac5_9e86_106be76e99e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d704e785_9d47_4ccb_a6f9_76bd2be5106d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_5a53267b_b35a_4e36_8d3f_b04bbeebd3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_98b824f3_c9dc_418f_87da_369ec771253f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f342a60e_bf7e_4f66_ac6b_9124048f8dee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6e55b432_1bd1_4db5_bd04_7edec8ca550c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8e72351a_070b_41dd_94a8_9358af98677f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e861a9c8_d352_4044_ba99_c5199317b697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_abadeee0_762d_46d9_97cd_13a55432c0da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_31dab31d_86a6_4ab6_8be3_3906d04eac1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c35091d7_125b_4684_a002_a44c9470541b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_155fd60a_fa44_486f_acb2_3f0fa86927b2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0ab61eda_f597_4958_8a73_f544372185a5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b56c8b1a_ef6e_4c5d_9982_9f53e6e64663() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0624f6e9_39dc_496f_9173_a0754fcc9bcc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_19395eaa_de8e_4028_9cf9_1881c6ae5082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8dc57733_cd59_4b4a_b85a_7cd150b12a6d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_290ee94d_4596_48f9_bc3e_222d6724d6dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ccb38191_4b54_4e23_ba4f_e0902b1bacf0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_3b1605a3_afac_4d4b_82a1_9599aeca969d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6a95c035_0ebb_42f0_b245_4a0351ee33f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_482c2051_7c8b_4dd8_ad57_e59f6fd00cde() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_dc4ffef6_6e09_43ba_bf12_6ad5ff9f836b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b2675607_b1de_42ca_8bda_99ce18ab89c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_decd4ff8_1f22_48ab_8226_55dbef62ec31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c91d9122_da65_4f03_8762_57102f4416e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b32ef39a_f584_4043_b11f_2309c5498082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_10dbec00_7f29_4695_8482_781fe9d8462d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_e5b72dcd_2315_4aa2_ad7f_5f27d2d2783e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_331250db_e6f8_41e3_a1b6_5b0b82b31041() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_3c425c26_7a3a_4433_ac52_01a9dac329f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0eb6165f_3f9e_4c5f_9a22_b6504446f5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_732dac41_ebf7_4233_afe0_aa381bdefa8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_3df4f4e4_d5fa_4146_ad86_e93e7d550a6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_03612763_5740_4d8c_a351_2970f859d4b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6d35df7f_83df_4c4c_b7f5_e897ccfe048d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_75a7d86a_7f78_4603_90e9_5d8c0fbf9e11() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_776cd8d1_e285_49b9_9990_8dd13e35085b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2160d417_0be3_419b_975a_65b7832bf5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c556e7ea_c1ee_4392_8f56_d224ce7f1246() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2b664586_8576_40ae_9da8_594ce69716f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_d8bc92a3_48e3_43a6_8813_89cc9142c4b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c12c4499_f0fc_456e_93f0_fe00243b5e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_88e7fb96_7d57_4ada_9ede_fed19f3273e7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_3c06aabf_813d_4702_a795_fdb2eaec82fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8ce477b9_5406_4a3b_a431_7a9f6f03d51e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a5d8fef2_8fc9_4431_a0ed_ae9b98d796d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5fddd0a1_495e_45fc_9b38_1924b33f1e95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_62ce21d5_1a84_42a1_a284_c08dbd5bf52d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a8b59008_4d65_480f_918d_5f9407376e5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_6aa75ee1_a139_49f4_8b6d_3b116542d4cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_2d9bf204_0846_4728_8a68_af588d56a2c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5fe2d2bb_cc9f_4824_b0fc_9858d50e8e0e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5a53267b_b35a_4e36_8d3f_b04bbeebd3c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c126f5c7_efcc_4997_971f_d58e4eaa438d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f1d2af93_6d70_4330_905a_ed536e36743d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6dfd85e1_f92b_43dd_b273_b0b2d9b4b7ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0741d2de_abad_49a9_b292_f15b6061ee8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d4c801b7_7301_4d28_a515_6da12d54743a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2a1c767b_cfcf_493d_8bd7_c0caafb2d1de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f857a5f7_8519_4a83_827d_9f2b816d002e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_ff314a7b_a9dd_48f7_a54a_744551127b60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_7d2d09de_ef3c_4564_87cb_895952dc1ea9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b1f7ae12_5bdb_4971_9d55_7d357fcc2e35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b4a7563d_dcaa_4eb0_b88f_a806a24550cf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_56a90d79_5604_42ce_a3c3_f951c4cae047() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_29ae5c3a_1d03_47e4_a6a7_058b215903b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_891dd467_e561_47f3_a362_bfd8533fa19e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b8a683b5_e72b_41b5_99d4_93f43d95668b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_056214c9_5734_48fa_a170_524e37000e85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_72d29a71_3e8a_4c9d_91bd_a4d9d50e632a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a7d399a6_a15c_494b_95f6_d0856aef5c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c74d4c71_ed19_40f7_be34_fdcccd5b420f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b8a683b5_e72b_41b5_99d4_93f43d95668b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6b6b1cb4_ccc6_4034_b6cb_166fac56dde5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_56c16a8e_e993_4c14_aac5_69b760be9be7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9b53b0fc_c9e9_43ae_ac2b_bc740907cb24() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d8b6710f_e58c_4d1c_ab1a_4ba079702e8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ee4ee609_caae_4a91_8da6_5d407b82bbc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_9ac84fde_82a8_4c89_9faa_ee1f55d5a2da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ca9acb25_9421_47a1_bd9f_72aa4c23073a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_aee7f721_1e5e_4ce3_ba14_8fe754393be4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_3df53c03_814a_4697_92f6_c7304fdbfd4e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_6ff062de_82ae_4c73_b81c_45fea18db66d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5ca675bc_dfe4_4eaf_b849_21d959b7e353() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6d33978c_32d9_4732_bceb_19935664b243() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_95f45ce4_eafb_44fc_a123_dabb1241221c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ffc16cc8_8243_422c_a40d_3542f913b077() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_811209e7_7587_44e4_983a_6b833511fd80() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b2d80524_9506_447a_beda_ccd5cc2c2cc6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3e74925d_641a_4f75_8c78_2ffcb3997616() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ab38e9f2_16f1_4ae2_ace1_4bd50a35ca02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_244af958_60e5_4a7a_ba13_87031711893f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_b51dfa66_eee9_48f5_86c1_6e20885ffb3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c77195f8_ebdf_4a36_895b_3057f904edce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_773e3290_bc31_41b1_9613_0194f2728e2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_78bc5979_601e_44e0_974a_8952a5666073() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_d40f004c_722a_4959_9fc8_125a6778b552() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c6c16ad8_c80a_4668_971b_575943b80ced() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_17157a1b_a13f_41c9_aa6b_965c05137bd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_729d1a6c_edda_44e2_b923_89b45c9ca179() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5f4e1fa8_6723_4713_a258_71a4d4bdeccb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_92465c43_2ddc_40c8_bd2d_9bb8d8341afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1f3f023c_03a6_489c_b07b_3fcf7f0618b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_a206878d_2302_4002_9680_959dd742eeef() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b6eb9ed3_befa_4491_b84f_5c7a1ffbaeea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_207f6472_fca5_4bc6_983a_b6a6d4bfce69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_0ed7e1ce_d7bb_481a_8305_85e2ad5eb766() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5c8573e8_4537_4701_a812_58c8a001b783() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d31ce131_6ac0_4ed4_803f_c87577fd4f17() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_c2f01d0b_d3ce_44e7_91f6_a51b748123fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_86be6dc6_65fd_4468_a60a_e3e47711a13a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_1c00c7dd_06b9_44fa_b286_ab8e503dfeaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_420c4423_eba6_481f_a57a_033a44079ce3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_66c25bf0_227b_4ed3_806e_d20209521601() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_406fc22e_9088_4b3d_8395_ff1fda9be614() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_72b2213b_b949_400c_b4fd_984eb09d46b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b1f24f98_9179_49fa_a25e_6c7c84091ca1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f5998728_2e99_4fb1_a0d8_73e4fe29b107() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_762081c7_71ba_4857_bddd_1ab5607e3459() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6e55b432_1bd1_4db5_bd04_7edec8ca550c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_fa88c368_d0aa_4801_82db_b8d118a36d29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0aab9ae5_d51d_4a40_adf1_5bae976eb1f5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e7bc7abd_dead_4474_9b2b_fc52a91d30f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b2352be0_2d83_4feb_a650_f5d2f4e57d56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f3d338af_1cb0_4e73_a69b_c92fd67543b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_9105a35e_2885_4f14_9350_57b924bd0c88() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5c8573e8_4537_4701_a812_58c8a001b783() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0ebc817b_57d3_49fe_af5b_a7900a58a72f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_331f7f64_351a_491d_a5a5_9c10507d083a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_03b66409_b1a1_43f9_952d_5bcf82d63a34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6d834741_efb9_4d5c_adf5_f1b35907d7ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b36b6753_755d_47cd_b472_b6d49c67b166() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_0de5f100_f142_49e1_9476_4c3364a3fd58() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_358739ea_aa07_4299_b6c8_fa188004b44c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_569e4181_3ab3_47ea_8476_160dce8960d2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8aa7fa3f_83cd_4d89_bfe7_bfdcedc77428() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7c73c158_ea87_4543_bcb8_88fa5b0a2e10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c74f959a_87d0_469a_baba_1e29c364d2ec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_537221d0_40fa_4626_9eb1_170d54cb45dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5696a735_18a9_43cb_98cb_6f022e3786a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_58d6fee2_529b_48a0_bd6a_373ca8c281f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_bd73a1d1_34eb_40d0_aadb_21caf1e222d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c2f01d0b_d3ce_44e7_91f6_a51b748123fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8e8b4672_715b_4a7d_afab_ee9942726535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e60e531a_8a5c_419b_af72_009a5df4ce25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_cd7804d2_dffd_497a_b845_f8fe59eeda81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2f2798ef_f2b9_4772_b35a_74397854eb77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a9a3f02a_6a0d_453b_931c_c6d68cc48575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2f646bcd_9fb3_4093_9049_f1740b605420() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a79fdd1d_2e02_4e29_a68f_33da15dc40ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_e1c299fe_eafe_44c9_8af1_09c2ed8d2b8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_9a673136_183d_4e19_9dcf_89a75a6901c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_edab01a6_caf4_4cdf_865a_a5655f0c6a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d30b6807_321e_4dcf_afc0_e5fcfb5bc00a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_db3f6134_4f1b_40c3_b41b_9e01f756f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_98d49fc6_b3cc_43b8_9585_9bc08a22359c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_6720d446_3ff2_4541_8f9f_5edd17223cfd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1fb108c4_d8de_47a5_8858_6499eea4f34e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_007207d0_da65_4df0_b3f9_b90ed930723b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_6d35df7f_83df_4c4c_b7f5_e897ccfe048d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0b739275_02f0_494d_8cc4_7438460799e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ca2b5c9c_43e0_4eb0_afe8_d1868508fb83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_852dd5bf_138b_4318_8f5f_a0050659e3f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_493eaa96_38e5_4f01_b8ef_047f076e1dac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e28074bd_1d9f_4219_95e2_64c0b6d16b5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_cd7804d2_dffd_497a_b845_f8fe59eeda81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4b647afc_5fa7_4fa7_9f02_e02d9db892c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_388bee55_deb3_45de_9f82_cb2387b70446() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_e34c92e6_6ca6_4954_9eea_707666ef2dbd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_29208566_8a35_4d31_85c8_579105008ec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a5bf4aa5_654d_4ba3_b263_ef14423a5685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f72a210d_3b4d_42c4_ac28_08482df780d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6f259ef0_82c8_4a3d_9a54_e0492f3fd1f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_79edadb5_2faa_48e6_8c08_9736f7682669() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_051f74d3_b144_4f02_bf50_2e7c3c8c5f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3043bcb4_364d_40cd_9f39_be2317e8449c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d3c81b74_c8c1_4824_98c8_02a54d933723() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f442f33c_f1bb_4b87_bf1c_5997eebd2a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_7fd33a47_9e3a_4436_bae1_764501d29429() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_311806a2_22e6_4c1d_9453_45716fb6b95d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_1c330a38_c064_437a_9d2d_fae5b1a54d20() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_180d2dd0_f405_442e_967f_a91c3a14973e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_97a65ee2_94a6_42e9_b552_764779f519da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f3ce6c17_6f04_4243_b7c5_5ac407546999() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_66c25bf0_227b_4ed3_806e_d20209521601() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c126f5c7_efcc_4997_971f_d58e4eaa438d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_66e54364_3047_4d32_a8f8_6482c24c834d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_6ed42b3f_3d49_4524_87bf_7f7a4e47baf2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_63c680eb_f510_4feb_9380_bbd9133ea758() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_57b9149d_1dd2_43bc_ae0e_81232d1e976a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2ada1a99_15f7_4df0_8c77_30a4e124d98b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c07a70eb_a070_46f6_a707_8e66cdc571fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6e55b432_1bd1_4db5_bd04_7edec8ca550c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_df40f16d_b8f3_4958_b609_b121a6998439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a253b76f_2c77_4ea3_bf15_25a59f12c1aa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_2cfc49c3_51e2_49bb_aaab_bf833ce50b23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_309df7ac_411c_4f97_a435_b1e2be258194() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_5959b4a9_aecc_41dd_94e2_ac57b3fabf32() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_eeced3cd_7e38_47db_befc_8ae1f8e2d400() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ae8d7ceb_394e_4552_a3b8_894ca5c42846() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5c7ad180_2915_41ab_9211_5c193597eccf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7475da91_311a_4edd_b72b_c13836bcf6d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_0186b02e_1193_4c85_910b_c020cb41367f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d1d2112a_f7b1_4fd3_8150_58b393f5a54a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_30b97351_0551_44cf_978a_76520fdeb8cd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cd7804d2_dffd_497a_b845_f8fe59eeda81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_2f98032f_7f96_4e3d_958e_c05f688aa5a9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e0102bb9_852c_4dae_ab88_f98c0698c95c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a7d399a6_a15c_494b_95f6_d0856aef5c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_2307f200_7b9d_409d_bfc3_5e1ee5fbb42c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_36411eac_8d22_4efd_b273_d6d4a2142894() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a7182d1e_5e42_4c7b_8322_adeea4fca112() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_26892abd_f0ea_447c_b4e5_b800aa7d78f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_dc1ffd2d_9073_4e07_8b58_fd9021a3b42e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_62198a5f_3d75_421b_9546_aba8b1c58542() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d4d6a753_107e_41cf_88eb_bc51ef9d22d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1aabcdad_afd0_43e3_a822_718cd1198a7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9416b36d_ea1a_4860_9586_1b052549d0bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a7d399a6_a15c_494b_95f6_d0856aef5c7b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_bab21046_b0eb_4233_9735_9d2cc0eae706() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3d302b84_0423_49ec_ab29_cbc423cdf549() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_99794316_abf3_4829_9979_afda1abc156d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_17392b4d_f207_47de_9da7_8528b4deb0e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_231c0056_4985_4a15_908e_ad76858eee3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_388bee55_deb3_45de_9f82_cb2387b70446() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5fde443b_64b9_4b2a_a610_69f3a6ad2006() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b7bb9021_ea67_41b6_8ac1_d3b40c0298ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8d0eb2fb_4fea_4bd7_a6a5_c195728d9e1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_b32ef39a_f584_4043_b11f_2309c5498082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_773383ce_35b3_4cdc_810e_6a34cc3cc753() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_593c5d68_00bc_4524_8c99_d93ae5ea8cbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c12c4499_f0fc_456e_93f0_fe00243b5e9d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cd832202_b3b6_4bf3_a17b_60b06abfdc34() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_f78afa5b_240c_4d0d_ba22_fec3bcef6036() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_45684653_c8df_4591_8ec5_df8190d76175() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_845c2314_8a5a_4602_b967_0eb3df844a97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_807db54d_a24f_40d2_aad6_73b390954cb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1f9791dd_a7b1_4cd8_9bb9_1a854d99c7bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ee4ee609_caae_4a91_8da6_5d407b82bbc1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ccd75a8b_6fbb_4485_868a_0ed0c19fc570() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_adccc442_ad7d_4c64_a5b5_23bacc7577f0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_488d8253_66e0_4b27_927c_cea259b28db8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_45684653_c8df_4591_8ec5_df8190d76175() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5b24e576_a8c9_427f_aaee_09efa40e72dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_292627bf_09aa_4fa0_98f0_89c127b4d642() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_60fbb24f_18b4_4955_b2b1_34af2cc7d7a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_efaa1305_3e74_4610_ac5b_f81526d90db2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_06269574_26e7_4e24_b41c_195e989e8c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_2cfc49c3_51e2_49bb_aaab_bf833ce50b23() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d30b4668_4fd3_4ba9_8d3b_0cf8a96cfca8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0e134aeb_8605_442e_a9ce_bf043a43c81b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_ab229044_f825_40b6_93db_b869e7552697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_e2440eae_32ee_4b3b_8139_c05c906ab00c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_cd4873ca_8f3f_42ae_b629_998788034f6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_480cda45_1d9e_4766_84ea_cae975e39ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_18a85fc3_8120_4a24_a73a_e9fdd88f245f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_805a5a74_3365_4c17_832a_229b2fabaf5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6bcd3631_fb4e_42ba_81b8_7c3b4adc9638() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_da901ebf_0c33_44f5_a5f7_8e5fac489aaf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_b775ffbb_eea3_4c89_9665_c3fdfef72498() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_77e8c0f4_b3cb_4948_b366_fe0755a687dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e1f96444_b43a_4bda_b27b_de2b15402ed2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a6071f27_0faa_44c1_a543_c9fff15dc0d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_73323ad7_6ad0_4d30_9f8b_2ea176dc8500() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_090c8983_9999_4240_a204_da923c24fe08() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d14ab80b_6c45_49d2_aa9a_533efa6d8cfb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4b647afc_5fa7_4fa7_9f02_e02d9db892c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_dda4348e_a2ae_4938_abfd_05e21beae926() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b4772359_1078_4888_ba83_d1f253b1f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_7841591a_fd9f_4dea_9928_c5b797e1f5ff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_aee7f721_1e5e_4ce3_ba14_8fe754393be4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c68577a7_5e82_448b_931a_af85ee2949cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d09ad164_ccf1_4fd7_b13f_24a7e22d60a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5f3f3f9a_b7db_49e6_aefb_43f508ff1f8c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b94d4181_a53a_4eaa_9d74_cf3e1eac622f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4f626321_6ff3_4653_8108_50e98aba4bf1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a8f4c73a_8a76_452f_98f7_a3972a1b6d83() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2c9f165d_8f63_4803_8577_01931ba783da() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f2e2bb16_4a99_431a_9d9f_684c9006a3ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7132fad9_02ac_40b1_9255_0a0efa1a3555() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_74ef5886_3db2_4cda_87e3_c397828d6613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_5744b908_2309_4527_9014_e30bf2fe329d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ab229044_f825_40b6_93db_b869e7552697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_06405b8e_7fe7_466b_bf3b_40ff5c3a6263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_67d8d6bc_24fd_4303_9958_5e3913700460() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e42accfa_eb9c_4b4e_8cbf_9c1d18cc8ff0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_46350b48_041c_45aa_99a8_c5095b2663de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_82cb1ce6_eda3_4755_9832_3ce52c8fa6e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_db4bc96d_a230_4bf7_8dbe_19ab09c13579() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b4772359_1078_4888_ba83_d1f253b1f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d3c81b74_c8c1_4824_98c8_02a54d933723() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a7de2efd_f9cf_4d51_a818_89fb23085a02() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_4e8f30df_752f_439e_befa_a6c0338f0687() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d7b045da_d9f7_4e91_953d_af3a33e6dab1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c698500e_0c49_4cc7_89ab_e23b4b9556b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2a1c767b_cfcf_493d_8bd7_c0caafb2d1de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e6f09294_9cfb_4923_a0bd_203b6960f0a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f442f33c_f1bb_4b87_bf1c_5997eebd2a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_96d79ab6_39ca_47dd_8027_8f72e8853c47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_f1c2c52f_3296_40c8_a363_0bdd1b49f795() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6d294327_ae42_484a_a703_3d70ebb7b7fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6e2fb2e1_2f28_4a10_90f1_93e87bc17f59() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_298f69fb_8b14_42d4_a74e_58fb1dcde137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_ad938b5c_5d05_4bd7_b33d_e5bc833456a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d5383aea_5b3c_4a33_a7ec_8780a59ebddb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_044b8ed3_30a5_428c_ac24_b46fffabb859() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_564a5e29_b1ac_4ee3_aa88_2e5de69e9e60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_66c25bf0_227b_4ed3_806e_d20209521601() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7b577615_0e7d_4243_a105_1ea2572bd540() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f45b0b22_247e_4918_9216_2c4dfaab5019() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_944d49a8_02b1_48a1_9b18_fe2cc022ed53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_8c5306fe_2dea_49ea_8678_d65320e5c962() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8db69925_0565_48ad_8b01_2d0d610f4a72() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_80f245bd_538e_4a11_aa4f_c6dff001da8d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f2bec0ea_5c26_42c6_adfc_7e458eda5ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b3d3190f_ee3c_4626_8c7a_71b57cf59270() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9d437de3_0b03_4e8f_a6bf_72f0a5410178() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_96758fd1_3c7e_47cf_97e6_cecee735f6bb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_203274bb_247f_4451_b6f7_1a71272cb6bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_53a31fe1_53df_499e_b9a2_7e3a073fea42() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e47b7f3d_d9c0_4c7f_b196_8da79b59c672() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_6f9ad5a1_fdda_441f_a1ba_f6086f82a974() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f049f7c2_a174_4f96_926a_83eaab07c263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8fd35ce5_7933_421a_a8b3_6550e24cb7e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_4b36cfce_2bf0_46a9_9e42_ded60584e193() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5a51f1fa_3c81_45e3_a4d1_c34733e30070() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_0ef02c1d_79da_4829_87a2_44ee0dd57f75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_ad938b5c_5d05_4bd7_b33d_e5bc833456a8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_df40f16d_b8f3_4958_b609_b121a6998439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_564a5e29_b1ac_4ee3_aa88_2e5de69e9e60() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fc6cb7c7_89ee_4030_8d14_b28e0959d89c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d9b86c6a_b186_401d_88ac_5646e300aa05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ca3ef9e9_d3aa_4ec4_bccc_8543f51790d7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1c635c62_abd5_4b90_a13b_83b3a3c0b0ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_75ea0576_3de5_4934_97ec_9d6d26cf9eba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_fd3f4bcb_26ce_4086_8a59_09d8d16906ea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a57061f7_50ee_4e3f_aded_fb67c8a39d69() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_5a51f1fa_3c81_45e3_a4d1_c34733e30070() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f4ffc246_ad3c_417c_8e25_d89da5eed9b9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_c1f00d4e_4e3e_462b_9d63_e051bba73279() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_244af958_60e5_4a7a_ba13_87031711893f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_bbe8cdb4_d38b_45d6_aef8_f3f9f0dd1682() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_c1f00d4e_4e3e_462b_9d63_e051bba73279() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0f31f959_6a22_483e_82a3_07a9c9d8c5b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_bebbd571_6cdf_414e_afde_07944c8e8872() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f442f33c_f1bb_4b87_bf1c_5997eebd2a77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_7318e19b_6930_4c32_8fcb_e65cc418e1c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_78631fc2_e125_4026_87f6_a4900eec2d35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ec77f40f_1415_4266_aa7c_fe4f3b257060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_56da5154_d646_4e2c_aa5b_2daa2663669c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_29ae5c3a_1d03_47e4_a6a7_058b215903b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_0321342d_bb13_4852_8ddd_d8c833f1c718() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f9b1b82d_3349_465e_bb61_9f4a578abe2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_d83709bd_613e_46fa_b0f9_2294263105fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d87bebf7_7a81_403e_aba2_b81bc6574425() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4a65e8db_24d8_47a6_9254_5704eb785fa8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_410d3d6a_3142_4d6c_bb4b_ccec07654ab7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_15f9249c_abdd_4e87_b627_4a674126ea75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bd7217a3_3b17_48ad_a6c0_39baff6b0657() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_884e2140_a6ae_44c0_ad21_a911cc587620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cb50fbbc_46b6_4186_98f4_51bf54b9219f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_aa3a7bb0_0032_4913_b9db_88421ec90d97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_bb9108ac_ebfe_458b_aa9e_a9748525c004() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_2326342f_d981_4249_8917_81c6971c40e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_7a425cee_f8e9_4d1b_8009_5245ce36bb31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_729d1a6c_edda_44e2_b923_89b45c9ca179() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_0d06e089_cfcb_4146_808d_381509d71a82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9135a7a4_d524_4af6_8a1e_d92455eb4a76() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ee275eae_8c09_47f0_8b88_f147e8c07f6a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_84482b97_4d0e_4389_801a_8a8e499f9727() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_aafa1de2_9bbd_4155_b625_7aa9f0475a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_51f8d673_45da_45fc_a41b_c5a8d0989200() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fb6499cc_e84b_4e32_a26c_5eecfe7e449d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7cd6f875_20f4_41c2_bbd4_068ec0160c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_20a1001d_277b_4670_b15c_d4a370bb63f6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8477295f_5e47_4367_8f2f_919d8d8af3e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0cb6b031_c257_4df6_93be_8acbcf294a8a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_304e93fc_d27b_47d3_9be4_ff609e508c1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4d84cb57_23f4_4fd5_904e_2d9cc1bf1c77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_d5383aea_5b3c_4a33_a7ec_8780a59ebddb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_18ba48ca_ceb3_4418_864f_dace66c4deda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_79fa659c_0c71_45c6_aca4_cd8e7ebf3967() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7a06bd60_212e_4a68_91fc_7f275ae59c56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5f4e1fa8_6723_4713_a258_71a4d4bdeccb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5078faf3_65e9_411a_a828_a13a6358384c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_dc0b4f95_5ec2_4c8e_a94e_348f9b206903() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_7c73c158_ea87_4543_bcb8_88fa5b0a2e10() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_0d7c39b8_08fa_4ad3_8989_7e028f726525() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_59f424cb_6bd8_4840_b9f0_f48466ba8d90() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_85c5a287_7416_4cbc_a082_412b2c34876c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_5fe2d2bb_cc9f_4824_b0fc_9858d50e8e0e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_1aaebd79_ce87_4348_be86_71e170ef3561() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_aafa1de2_9bbd_4155_b625_7aa9f0475a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_34b4dc08_59ed_4fbf_aa88_d60c79391ece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5a737877_dc8c_446a_b475_19eeae5e1e55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0b739275_02f0_494d_8cc4_7438460799e6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a9a3f02a_6a0d_453b_931c_c6d68cc48575() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d87bebf7_7a81_403e_aba2_b81bc6574425() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_c0c5b3b2_56c5_4983_a7e9_696b202dda16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b4772359_1078_4888_ba83_d1f253b1f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b584cd90_67cd_4160_90ab_dbfa4bb4e38d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_17392b4d_f207_47de_9da7_8528b4deb0e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_bdaecf8f_4ee6_41b0_9efb_ce684fce5fff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_481b1d47_bb73_4cd0_9dbf_39472bfc08a0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_4657e7a6_48e8_478d_8167_92da1cc5bee6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3d363009_0e39_496c_a531_33f1621d3c2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_1263b015_425b_44ff_a975_34fe961af031() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_8ef717ec_79c1_442c_a2c0_b93be262dfaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f157031d_a927_418c_9801_2f717688f827() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_cff84526_a922_4736_8461_5af1ca488b81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_7b577615_0e7d_4243_a105_1ea2572bd540() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_df57a0cf_d4a5_4091_94bb_fe0633be8d6f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fb949175_9c73_4709_b3c3_00249f0e2b65() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a6bafd0a_b479_4f71_b431_d5703e3e50b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_2da6f0d6_9c61_456d_b0ce_eead74b5dfff() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_056214c9_5734_48fa_a170_524e37000e85() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_28409518_f84c_434b_b27c_f6d60e999868() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_476cbb75_d885_4e10_96aa_973202f7685d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8ecffc3e_b80b_4a4d_92b9_f5268ceda959() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b250f4c4_7df6_437b_9d44_c75774c14cea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a55ab954_ed2b_4c8b_bb8d_189269c24c25() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a00aa613_cf58_4c4f_ae70_90dbe4025f13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_773e3290_bc31_41b1_9613_0194f2728e2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_956eaebc_77ff_42a5_a59b_6631b95feec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5fddd0a1_495e_45fc_9b38_1924b33f1e95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c91d9122_da65_4f03_8762_57102f4416e4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_d224ba2e_e119_4dc7_a61f_6b4010c8c2f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_f3850f03_165e_4d66_8a95_419b3033d801() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_18971e1d_253f_4b42_ae7f_7ce2da6729a4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_c31c2038_a6ed_4314_b077_360f57631e81() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f7e62e76_756f_41e2_933a_ae84ab01d925() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_ee97a465_090d_48e8_917e_e08b4ca2485a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_81e4d4d4_3e2e_43a3_849a_30554f84fe98() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a6bafd0a_b479_4f71_b431_d5703e3e50b0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f9a8bd4b_8884_45f3_9988_d2d32931f3bc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_9f79a323_0d5f_4d70_9907_f6b8b8f0e588() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_0c01ea96_5a5c_4d38_af48_c8dac16ed3e5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f0026b5b_9739_4c14_9a9c_c53b21826de4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_61619bc6_8e34_4e25_b82a_bcd33adef856() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b250f4c4_7df6_437b_9d44_c75774c14cea() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_5bee1966_5e60_47e0_848a_7905dd591c7e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3e74925d_641a_4f75_8c78_2ffcb3997616() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d30b6807_321e_4dcf_afc0_e5fcfb5bc00a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_25715498_f196_40b6_a331_539cf9ca216c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_960147ca_18d7_4f8e_96fe_f9301d0f7cc4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9ed3c1f3_43a7_4794_80d3_d1bf1a4e9ade() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_2160d417_0be3_419b_975a_65b7832bf5ce() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_035cdcf6_122f_4479_9cdf_1ff527286b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8fd6496e_d983_41e8_86df_469abc9b15c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_1263b015_425b_44ff_a975_34fe961af031() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5f3ccbbb_ab54_4f43_8a31_8fad3d8e933f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6c6cb5b7_4907_4516_92ad_7b29768c1b22() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d895572a_8f7c_4baf_a0c2_977b04e24d77() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_31b1f795_b60d_4155_8803_05922ff69613() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_b2bf2174_e0ec_4e93_96b4_f8c12dba7ec7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_8e8b4672_715b_4a7d_afab_ee9942726535() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2d9bf204_0846_4728_8a68_af588d56a2c1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_dc1ffd2d_9073_4e07_8b58_fd9021a3b42e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1ddd4939_3c04_4f8c_aa87_75e0c3fe8660() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_15f9249c_abdd_4e87_b627_4a674126ea75() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_223517f5_1076_4f41_8f8a_9f6fd2697bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8e2a441a_9bb0_4bae_abdf_c1dfaadf10b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4bf58963_ef25_490f_b4b5_f4cbacd3b2be() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_20fa7093_470f_4e24_a176_e3f6829f9c00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_29208566_8a35_4d31_85c8_579105008ec2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_72b2213b_b949_400c_b4fd_984eb09d46b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_f23c2913_5f40_48ce_8772_4d4a6fec54ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5a753daa_53ae_45a2_8c49_ea68e7c541b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f7474e93_2c43_4add_b301_cef140010b40() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_de98c634_292d_4e4a_a9be_9cbdb1453ba2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_5cb9611d_55aa_43d1_9424_7185c7d6982e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_ce67a044_2962_4576_9f28_69d9a13044c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_d9ac7716_18dc_48bb_9a70_e9725a6eb996() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_773383ce_35b3_4cdc_810e_6a34cc3cc753() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5040b327_01c7_4a44_a9e5_98184c146baa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_370bc6a2_bdc8_4207_afe6_add8631331fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_a835c470_21d9_46f0_8e87_38c1fc9abe1d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_14241fd2_b741_484f_92f6_07dd53880c1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_15385204_0ee7_44a5_8a10_17989398c9fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b1410c7d_e423_4d66_955a_ad0d1057dc47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a8b59008_4d65_480f_918d_5f9407376e5c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_3bd85280_801d_4d3b_bc72_9ab2a5b91468() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9a673136_183d_4e19_9dcf_89a75a6901c4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_f3850f03_165e_4d66_8a95_419b3033d801() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_d704e785_9d47_4ccb_a6f9_76bd2be5106d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_72ba1603_7291_4e4e_b19a_2fc10ccabece() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5b24e576_a8c9_427f_aaee_09efa40e72dc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_467d1497_ef09_4cf8_9d4a_2e42ee656624() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_f46f00d6_c59e_4722_a85b_e4e2c303a86c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6e2fb2e1_2f28_4a10_90f1_93e87bc17f59() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_fd019daa_2241_4194_8a6a_b573026e7566() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4de9a468_1632_46ae_b72d_10bcebaac23f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f16b00ec_60da_4bdc_b1be_dd86df39e52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e8cd0df8_dda9_407b_8708_92baedc47a3f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_c993c20b_c8fe_423b_94e3_a11f5deadc16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_c29e8ca6_1731_4c05_8780_194287bf2735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_09043cdf_5731_4335_a8d1_42c5721a48d6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e6668c10_a3e7_44fd_8f86_5b9a80d55a0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_223517f5_1076_4f41_8f8a_9f6fd2697bbb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_a58f8da5_ec99_4374_882c_85e2b081e60f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_19395eaa_de8e_4028_9cf9_1881c6ae5082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a9f2e834_1d31_4b6b_9fce_3a3a62ca10a2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_fa88c368_d0aa_4801_82db_b8d118a36d29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_6e2fb2e1_2f28_4a10_90f1_93e87bc17f59() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_96d79ab6_39ca_47dd_8027_8f72e8853c47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_315c8bf0_9613_4733_8be6_15041013c286() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ee97a465_090d_48e8_917e_e08b4ca2485a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5e0521c3_1ceb_4dae_8922_84d5f762607e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_20fa7093_470f_4e24_a176_e3f6829f9c00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_0ed4e724_3af5_4fc9_b65c_5d7fb5d0ce01() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c0c5b3b2_56c5_4983_a7e9_696b202dda16() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ab229044_f825_40b6_93db_b869e7552697() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bdd8f061_b905_41e1_bee5_b84a78a7a4c9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_051f74d3_b144_4f02_bf50_2e7c3c8c5f2f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_54fd500d_e788_4238_84cc_94b08e188792() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_2ada1a99_15f7_4df0_8c77_30a4e124d98b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8b87fe58_f430_4a0c_b1cd_de5c19751dd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e5b72dcd_2315_4aa2_ad7f_5f27d2d2783e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c4189ee6_cc2c_4cf9_95aa_ef1477dd9032() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_4992d0e2_4483_4d63_bee6_c61f48caa9ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c9f64a04_4e7c_4351_8fe8_74eb29fc6372() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f5e7dfd1_30df_4e97_a6bf_b2175368a5c0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_d6362bbb_c45b_48b8_9201_bb24b55e267c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_c814dc33_e699_4b3b_b236_701ef8ee3bcb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_c698500e_0c49_4cc7_89ab_e23b4b9556b4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0280d40a_d7bc_43a8_958e_3eaeb30f826f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_e283b54f_e42e_41ca_8888_08383aa04ecd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_87e4e8e3_baeb_4501_ad60_6a69ad586c3d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f03b5b1a_5f00_4ef0_83f0_c0012f7db61c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_d052cca5_f9a5_403c_a5f2_d1dd7e8d903b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5aa89345_cc9d_4dc2_b311_a6a8bb5d793b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_852dd5bf_138b_4318_8f5f_a0050659e3f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_666de809_03d5_453f_9fbe_dd4bfb8c0524() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_bb0ad54a_4522_45aa_a199_a3054e149119() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1c635c62_abd5_4b90_a13b_83b3a3c0b0ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f7973b05_5fb6_4dc4_84db_f24849dd5f7a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e590c4c6_de11_4da0_80d2_f19af0815a18() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_fa01a8d0_3c23_4af4_bc43_c868b88267f3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_36033106_2f46_4260_ad1c_03a5520d4947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_df391b51_f84c_48ab_939e_a2a42517d484() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f53f1f82_3808_482e_9a9d_6fbeccdb1b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f3e57c6b_d605_4916_96d9_10fff44e5d55() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d052cca5_f9a5_403c_a5f2_d1dd7e8d903b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_78631fc2_e125_4026_87f6_a4900eec2d35() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_7fd33a47_9e3a_4436_bae1_764501d29429() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c5e1e3e3_bb71_442b_97e1_dafdc4f88c1e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_30ff2f2a_3e4e_4f5e_b3ba_35fd1f940750() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_31646a5e_4f64_4620_a22b_abe2278b73af() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_0a818c23_a0e1_48d1_a8a2_ff467c2fae95() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_c126f5c7_efcc_4997_971f_d58e4eaa438d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_ff72de95_9fd1_4e28_8090_e5ec991916a3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_b3d3190f_ee3c_4626_8c7a_71b57cf59270() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_26ec5711_28da_486c_9c50_219ff7cc0450() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_04bd1bdb_dd31_459d_a95d_d001ce9781ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_b11f0a88_08dd_4143_b40f_12b4ac993dcd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_1d57b98c_249d_4d04_bcd1_3f4cddd13527() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_be427e26_a24e_4d0e_a651_bbbdcdcef432() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_3b5de9e4_af92_41ed_9442_893609075436() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_82cabb35_66e8_4f2b_8c1e_82d132e56735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7fd1879f_4a3a_402c_b6f6_f93cd5714439() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_e6668c10_a3e7_44fd_8f86_5b9a80d55a0f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_73b6983c_2543_402f_8bb8_23d927a2b607() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d7c34757_8473_44d0_a34a_f37cfdfa3249() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_c25bb9b6_a280_4e18_95b9_7eb98d4e40fa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_23b82137_1379_4052_b6dc_8c1d95128ff1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_6a95c035_0ebb_42f0_b245_4a0351ee33f9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_12e8c994_1cf7_471f_9297_eff2af5f9547() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ea6d834e_c25f_4d0d_9560_c6399c59d010() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6bef330b_f453_4e05_89ea_5959bc908fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9af9967c_93ee_4283_965e_b140d0d2556c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_06554558_90e9_4fd6_bb4d_c1caf305b2dd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_15166ec6_8047_4c78_9d7f_2afda2687e92() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4ec961e0_cc20_4405_8045_6e44d80b007c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_eb4d0fde_56be_4727_81f4_efc642596141() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_5959b4a9_aecc_41dd_94e2_ac57b3fabf32() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_fa88c368_d0aa_4801_82db_b8d118a36d29() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_12e8c994_1cf7_471f_9297_eff2af5f9547() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_6439eea6_3e10_4fb1_88bd_b536b7029012() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_18ba48ca_ceb3_4418_864f_dace66c4deda() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_0fd24478_b972_43fc_a9d6_cf8a6827cdb6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_0321342d_bb13_4852_8ddd_d8c833f1c718() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_b36b6753_755d_47cd_b472_b6d49c67b166() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_96ebb77a_9925_42a6_a38f_3889cb958042() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_49e92902_ecb4_4501_a13d_716256d259ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_03f51d70_0c8b_4f04_b572_d50f9e37899b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_69f5e7be_6221_42f6_b97f_0d7c3a5ccfd5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_0bde64da_3232_4c64_b790_49751acaeee7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_bb58dc4a_3ea9_4bb7_82be_6d42ceded1fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_1aae327e_f8e8_4689_9a7b_4dfc24f2060b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_a10f374d_aeaa_4bae_9885_2bbdb8d9d168() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f61e5e7a_ab2c_440a_9c81_49209b5d2586() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_d7446950_3285_474d_a270_978789408412() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_f53f1f82_3808_482e_9a9d_6fbeccdb1b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_d0edd4a8_1e80_4fde_9b4b_d889a1bff04c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a40099c9_3cb7_44ef_b7db_d2809ead75c5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_166520be_8ecb_4d86_b53f_0626a08c2442() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_585d3941_2f50_4e99_9798_4430b539b165() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8de24d28_716f_4f9b_9138_c07ac4ca2947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_25da0985_6082_4dda_a8ef_9f298114257a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_6d294327_ae42_484a_a703_3d70ebb7b7fb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_a7182d1e_5e42_4c7b_8322_adeea4fca112() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_e6f09294_9cfb_4923_a0bd_203b6960f0a1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_17e3161e_e269_41c8_a881_e19c78a26c63() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_c25072f3_7250_4577_94a1_89aef61fe8df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_57bd2904_9fbf_4ca3_afd3_62c6d53caa67() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_66587cfd_e1dc_497a_9e81_0f71d4e1771c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_31fff2a5_e84e_47e6_afb7_6a35a66992e0() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4e92d703_4bca_481b_9230_c22792995cc7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b81aed14_e043_4b39_b507_14a869c76b33() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_317a9483_f6ec_44bc_ac46_9a0714e83d5f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a71540fc_8aee_45c6_b28c_d7200ba0726e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_959d107a_14b8_479a_bb13_ee21daa7f74b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_92465c43_2ddc_40c8_bd2d_9bb8d8341afa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6750f0c6_56eb_4d80_88a8_bcd3c806e46b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_448425d9_9f33_4f11_be77_4f0f53cd19e1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_f6aff357_476e_495f_9fd0_216cdbb2ff04() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_331250db_e6f8_41e3_a1b6_5b0b82b31041() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_06405b8e_7fe7_466b_bf3b_40ff5c3a6263() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3047c64b_5602_4c47_9ba2_2f57df36b75a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1cc7bb49_960a_4b1f_9a06_e5e520d360e2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8fe2c646_baca_40ee_b783_3215ebe4bb2a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_12527554_9999_44f3_a177_eae88d8f4b31() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c68577a7_5e82_448b_931a_af85ee2949cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_1397a06e_d440_4d2a_9763_251174b880cb() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_71a7034f_ad7c_48a4_8c19_efd469d07dec() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_aafa1de2_9bbd_4155_b625_7aa9f0475a46() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_34fd786b_962b_4989_84b0_1a88715d107e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_52fc6055_0b77_47c4_8e28_1167887f1204() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_59f145b7_68ab_4938_b2b8_307a43e3ce41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_1e20ef2e_01d1_4164_a03a_1191929a3e30() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_8ecffc3e_b80b_4a4d_92b9_f5268ceda959() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_a9db90c2_2084_44db_9f57_1bb142403fd8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_508bc443_be3d_4a01_8b05_2255086c5baf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_4e0d9afd_8d66_44ea_85b5_f94b65b936ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_9398b375_3c43_4d45_aa4e_ebfb0533e9e8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_30beac97_7803_4da4_bf69_0e37f9feec91() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_67324c69_fefb_4852_96ec_87f2fafb1767() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_b7cf93b8_c866_45cf_b648_e798274d5a1c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_71a0bbe1_b094_49eb_9640_6f2d6e2885c8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c54a7d11_55ab_4d97_8ae4_43186b469c0c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f78afa5b_240c_4d0d_ba22_fec3bcef6036() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_ca54dc58_c04a_4398_8274_38605870fca3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_b41a0927_56e0_4b0c_8162_f78481d04292() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_23cc3949_d600_4010_9257_8e0601397137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_e537b67a_9a8e_484c_aca0_5b0a8b3a8cb3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_e4501375_af7b_4f9d_a919_73e4665ba5c6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2394df99_c649_455b_8783_a3dbb7fbfdd3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_f97be7f1_e384_46bb_b3a4_1637eeffc69a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_54fd500d_e788_4238_84cc_94b08e188792() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8f2b4cc4_ea90_42b0_bfd6_af26f150de03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_8d0eb2fb_4fea_4bd7_a6a5_c195728d9e1b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_9d437de3_0b03_4e8f_a6bf_72f0a5410178() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_28e4b7d5_4042_4bbd_9382_81892b881756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_6101fe33_1821_494a_ac59_a1f726a3d52b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_306b27fa_9986_44e6_9578_31d5f6a2bf9c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_4c090651_3256_46ef_a9e7_db98dc0c2fcf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_3580c761_a578_4001_bcfb_44c56e104cbe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_5e307478_a7df_4414_b169_6c0c62dda5f7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_1d921567_2c1e_4fcb_b868_e9c06dadd7d4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_bd73a1d1_34eb_40d0_aadb_21caf1e222d8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_66c5b2eb_b0aa_4f39_b805_192696ade28e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_8510befa_3411_4840_b134_d09162f3d1e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_f2bec0ea_5c26_42c6_adfc_7e458eda5ce6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_63491030_e5fe_49a9_b796_a99808f3f060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a51a14b7_3e4e_44fd_a7f8_00a81cb52c6e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_eee25c9e_e2ac_487b_86d8_e1a0e578224b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a6d1b07c_7cf7_494a_84ad_a82ebae78e4d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b2803c23_3132_4a82_a11b_eecaac907e12() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_156f35f7_09d5_484a_ba08_b81f63161ebe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b4c55071_d0da_425e_9a8f_e0d165a9934e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_e1c06184_3b1e_422d_9a45_ed7eb6dd6f86() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b2352be0_2d83_4feb_a650_f5d2f4e57d56() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ac01f334_489e_49bc_894a_fa25edd8ef3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_7f9d96ae_0301_4b47_a5d7_ea8993ab4d66() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_9132f087_5382_4cc7_97ff_06afec628fdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_845c2314_8a5a_4602_b967_0eb3df844a97() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_406fc22e_9088_4b3d_8395_ff1fda9be614() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_eb08a6ad_d83e_4cd0_b979_8c9b43409f47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_5a753daa_53ae_45a2_8c49_ea68e7c541b7() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_a838f46b_be21_4a32_9406_eac35cee65bf() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_9f1c5893_d8c5_4daf_9d6c_b4b96f56d998() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_d19d2d4e_e813_4a73_8479_490843bd8040() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_225366bf_5b96_403a_8c91_5303b3f0a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_d4c801b7_7301_4d28_a515_6da12d54743a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b5eac88f_04bf_4790_a47d_783d8b8fa57e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_25715498_f196_40b6_a331_539cf9ca216c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_f6f09421_6a5b_4047_baf4_1397188a1ca9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_886118d3_3a18_4d27_8af5_323dfa75476d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_16abab32_6e31_44c9_b3e1_b8d404772e50() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b7fdee48_75e4_48b3_9edd_a20c9d7c1196() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_8de24d28_716f_4f9b_9138_c07ac4ca2947() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_f857a5f7_8519_4a83_827d_9f2b816d002e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_0d06e089_cfcb_4146_808d_381509d71a82() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_09f5344d_62e8_462f_b99c_08efb964fe41() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_cdc487bb_a5e4_49f2_91f4_12467fa87b47() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_7af20def_9342_4aac_b6d7_b2f7db1a1884() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_9123309f_2b1f_44e1_a3b8_b901103ff8ac() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_64f5f449_f73f_4afc_a4dc_ae9b146302df() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_3a1ac45d_c83b_48e9_b74f_f627f79fac03() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_b94d4181_a53a_4eaa_9d74_cf3e1eac622f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_8e804c5c_4e5d_4364_9ce6_7cff69c2b8d3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_44db7931_24ba_486c_9ed6_ae1a5ff0de64() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_f61e5e7a_ab2c_440a_9c81_49209b5d2586() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5b636626_176f_494c_960c_2aeec6e8c9d5() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_75d3a7d3_886b_406a_8c44_7428e82516b3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_ba1c5b0f_80f6_4870_ba6c_a2ea0f921d3a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_07145161_86c8_438e_a97b_1142af050e53() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_6bef330b_f453_4e05_89ea_5959bc908fe3() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_324f53d1_14c1_421e_bd3e_2c18f06209ba() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_1d66842e_93d4_475c_8ca0_406af05c9649() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_8ef717ec_79c1_442c_a2c0_b93be262dfaa() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_590d5623_4df0_4615_bcb3_cdf401d089fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_14afa445_7117_458d_b311_990d6e6ae756() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_5e139813_980e_403a_98fa_fdb2578bb139() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_acf2bc4c_cc90_400a_ae3e_c5dafaf03b68() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_2_b32ef39a_f584_4043_b11f_2309c5498082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_e19eae6b_dc78_45bd_95f6_86bbbd7ad5ca() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_8aa7fa3f_83cd_4d89_bfe7_bfdcedc77428() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_4_b4772359_1078_4888_ba83_d1f253b1f9de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_2832bdb7_d979_4ad0_a753_dbbb06825b3b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b8ccbd73_7acb_415f_abde_3e2e9a23dbdc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_959d107a_14b8_479a_bb13_ee21daa7f74b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_a31fde65_1936_4a78_ae43_5037eaf66661() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_3aa4a0d8_a95d_4eb8_aa03_0420de531ec6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_6834c735_74ff_4f19_9141_b72bd4f3d7ae() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_502e7975_eb4f_4930_89b7_0b9b7c6350c2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_a2ce0981_0c79_4bbf_bc6f_a506728e3223() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_ff454c50_8cf1_40f6_9ca8_543c0d294a9e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_7cd6f875_20f4_41c2_bbd4_068ec0160c2b() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_e71a78d9_6746_41f7_9a76_2121770e42ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_b2d48aab_2188_4f0e_8249_1650d0e6aa5d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_551a37ff_c5b6_4662_877d_7b32232124b6() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4e8f30df_752f_439e_befa_a6c0338f0687() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_9a3637ec_7610_422e_b27d_6dcb5106c849() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a6071f27_0faa_44c1_a543_c9fff15dc0d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_4ef414d7_fddc_451d_a29d_423d88f5a138() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_dc717223_ea69_4938_8e7c_0239f698bc19() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_a71540fc_8aee_45c6_b28c_d7200ba0726e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_17157a1b_a13f_41c9_aa6b_965c05137bd4() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_69e97de1_51ad_4204_8a9c_6886fa84c250() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_40423214_22cd_4a56_8856_176719d29f9f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_fa639bd1_ae8b_4dc1_bd1a_96d81e46da0d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e99d933e_dbfc_4186_a5fb_d01a48bbfd13() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_4111e63b_6ab7_4ea8_abc1_8768264f749c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_aeb59689_b707_4be6_919c_92312e29b0fc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_8525fbe3_2f09_4aeb_9f10_750af8c0778d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_fcfcb8c0_5779_4e1b_af0d_efe6e456e620() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_752d2c97_2c2b_4068_90ff_1746d41eaef8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_4a04f9ee_75c4_4b64_b56d_9b7e1002498c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_feaf1a9a_487b_444b_95fa_58ecf7988e96() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_1945e604_bcf8_47c9_a783_483b2cb4cffc() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_84b71600_0e4a_4621_bb44_d32a07a8f3ee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_a5bf4aa5_654d_4ba3_b263_ef14423a5685() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_82cabb35_66e8_4f2b_8c1e_82d132e56735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_8e72351a_070b_41dd_94a8_9358af98677f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7dfc86d5_53b8_4c37_b8ef_1b4b80453952() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_7c7378ae_5efb_41fe_ad56_867f8c7eaaee() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_5fe2d2bb_cc9f_4824_b0fc_9858d50e8e0e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_c556e7ea_c1ee_4392_8f56_d224ce7f1246() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_dda4348e_a2ae_4938_abfd_05e21beae926() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_cbbb7f67_ae7c_43ce_9dfd_98814fee75fe() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_1_0ddbdfcd_5123_43d4_8552_0d337030663f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_feb814e5_d0c5_4776_a9cc_22ff0a67d46d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_fb7eb574_281c_4e4e_965d_72a89b0a9306() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_3d1e0f67_e0ab_434f_94d4_b05285ed6340() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_a3d5d177_d480_4fb7_a9d9_450e612a225f() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_6_efaa1305_3e74_4610_ac5b_f81526d90db2() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_abd09ee9_899d_444f_a2ab_52d767211318() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_1_279d9e18_40ff_4fd3_9620_0d0b70e282bd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_99a3dd4c_6f79_4e06_93a6_72cd24f81893() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_021770b4_737b_4b4c_9345_16c0f969cf0a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_0_3d363009_0e39_496c_a531_33f1621d3c2d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_25835e55_3c19_4b34_bf9a_f4007eb48f00() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_ec77f40f_1415_4266_aa7c_fe4f3b257060() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_2d140101_281a_4dd5_9f23_c52dc81e9158() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_7b8fd12d_a160_4f8f_ab50_2b534a046413() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_d1493453_c52e_432e_b7f7_eb295cf9423c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b32ef39a_f584_4043_b11f_2309c5498082() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_46350b48_041c_45aa_99a8_c5095b2663de() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_369894d0_172d_4f2f_970d_964e34bae181() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_b11f0a88_08dd_4143_b40f_12b4ac993dcd() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_4d0df127_5ce9_4266_9462_01f809836673() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f78afa5b_240c_4d0d_ba22_fec3bcef6036() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_9040e531_f962_4862_a4e3_76e5e79a35f8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_309b990f_f638_4d49_9d57_16288a71eea8() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_5_c0829858_1dbb_4441_992c_d4c2d7eba871() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_6d35df7f_83df_4c4c_b7f5_e897ccfe048d() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_4_c29e8ca6_1731_4c05_8780_194287bf2735() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_e0102bb9_852c_4dae_ab88_f98c0698c95c() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_298f69fb_8b14_42d4_a74e_58fb1dcde137() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_0_995480a9_1d20_4f31_ae58_b784cde4a6ed() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_52fc6055_0b77_47c4_8e28_1167887f1204() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_5_852dd5bf_138b_4318_8f5f_a0050659e3f1() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_3_03d7373d_f7db_45e8_bdff_aba6423a7d05() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_ba217f67_eadf_4060_b567_ee078b8dd154() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_4b39de92_0f70_4b28_81e3_04208d98c462() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_6_225366bf_5b96_403a_8c91_5303b3f0a225() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_3_c0829858_1dbb_4441_992c_d4c2d7eba871() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_f2f4133d_dff7_4721_b106_ab7748dd54e9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_2_01ed684b_0d68_4bab_8c60_bbb1130462ab() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))));
    assertEquals(False, result);
}

    @Test
    public void test_monotonic_Problem_7_5a61ad07_1bd6_4994_b10e_bf7bf617de8e() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_83daa340_3c4f_4295_89bd_ee65dbce5d1a() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

    @Test
    public void test_monotonic_Problem_7_768ccb95_8e63_4503_b460_80bf946339d9() {
    boolean result = monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l))));
    assertEquals(True, result);
}

}
